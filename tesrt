local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

if not getgenv then
	getgenv = function() return _G end
end

if not game then
	game = {
		CoreGui = {},
		GetService = function(_, name)
			return {}
		end
	}
end

getgenv().gethui = function() return game.CoreGui end

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	AllElements = {},
	Themes = {
		Default = {
			Main = Color3.fromRGB(10, 10, 10),      -- Deep black background
			Second = Color3.fromRGB(20, 20, 20),    -- Slightly lighter black (layer panels)
			Stroke = Color3.fromRGB(60, 60, 60),    -- Subtle gray border/strokes
			Divider = Color3.fromRGB(40, 40, 40),   -- Divider lines
			Bloom = Color3.fromRGB(255, 255, 255),  -- White accent/bloom highlight
			Text = Color3.fromRGB(230, 230, 230),   -- Light gray (readable text)
			TextDark = Color3.fromRGB(150, 150, 150) -- Darker gray (secondary text)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}


local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
	warn("OrionLib: Failed to load icons. ", Response)
end

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Global
Orion.DisplayOrder = 9999
if syn then
	pcall(function() syn.protect_gui(Orion) end)
	Orion.Parent = game.CoreGui
else
	Orion.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			pcall(function() Interface:Destroy() end)
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			pcall(function() Interface:Destroy() end)
		end
	end
end

function OrionLib:IsRunning()
	if gethui then
		return Orion.Parent == gethui()
	else
		return Orion.Parent == game:GetService("CoreGui")
	end
end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SafeFunction = function(...)
		local s, e = pcall(Function, ...)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end
	local SignalConnect = Signal:Connect(SafeFunction)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	local s, e = pcall(function()
		while (OrionLib:IsRunning()) do
			task.wait()
		end

		for _, Connection in next, OrionLib.Connections do
			if Connection then pcall(function() Connection:Disconnect() end) end
		end
	end)
	if not s then
		warn("OrionLib Error: ", e)
	end
end)

local function MakeDraggable(DragPoint, Main)
	local s, e = pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				Main.Position	= UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
			end
		end)
	end)
	if not s then
		warn("OrionLib Error: ", e)
	end
end

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
		Object[i] = v
	end
	for i, v in next, Children or {} do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	for Property, Value in pairs(Props) do
		Element[Property] = Value
	end
	return Element
end

local function SetChildren(Element, Children)
	for _, Child in ipairs(Children) do
		Child.Parent = Element
	end
	return Element
end

local function Round(Number, Factor)
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 then Result = Result + Factor end
	return Result
end

local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("UIGradient") or Object:IsA("ImageLabel") or Object:IsA("ImageButton") or Object:IsA("VideoFrame") or Object:IsA("ScrollingFrame") then
		return "BackgroundColor3"
	end
	if Object:IsA("UIStroke") then
		return "Color"
	end
	if Object:IsA("TextLabel") or Object:IsA("TextBox") or Object:IsA("Sound") then
		return "TextColor3"
	end
end


local function AddThemeObject(Object, Type)
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local prop = ReturnProperty(Object)
	if prop and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
		Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
	end
	return Object
end

local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in pairs(Type) do
			local prop = ReturnProperty(Object)
			if prop and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
				pcall(function() Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Name] end)
			end
		end
	end
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local s, Data = pcall(HttpService.JSONDecode, HttpService, Config)
	if not s or not Data then return end
	for a, b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function()
				local s,e = pcall(function()
					if OrionLib.Flags[a].Type == "Colorpicker" then
						OrionLib.Flags[a]:Set(UnpackColor(b))
					elseif OrionLib.Flags[a].Type == "Textbox" then
						OrionLib.Flags[a]:Set(b, true)
					else
						OrionLib.Flags[a]:Set(b)
					end
				end)
				if not s then
					warn("OrionLib Error: ", e)
				end
			end)
		else
		end
	end
end

local function SaveCfg(Name)
	if not (writefile and OrionLib.Folder and Name) then return end
	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end
	end
	pcall(writefile, OrionLib.Folder .. "/" .. Name .. ".txt", tostring(HttpService:JSONEncode(Data)))
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3,Enum.UserInputType.Touch}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0),
		Active = true
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})

	if GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.GothamSemibold,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Right,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 8)
	})
}), {
	Position = UDim2.new(1, -15, 1, -15),
	Size = UDim2.new(0, 300, 1, 0),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function()
		local s, e = pcall(function()
			NotificationConfig.Name = NotificationConfig.Name or "Notification"
			NotificationConfig.Content = NotificationConfig.Content or "Test"
			NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
			NotificationConfig.Time = NotificationConfig.Time or 5

			local NotificationFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 8), {
				Size = UDim2.new(1, 0, 0, 0),
				AutomaticSize = Enum.AutomaticSize.Y,
				Parent = NotificationHolder,
				BackgroundTransparency = 1
			}), {
				Create("UIScale", {Scale = 0.8}),
				AddThemeObject(MakeElement("Stroke", nil, 1.2), "Stroke"),
				AddThemeObject(Create("UIStroke", {Thickness = 3, Transparency = 1, Enabled = false, Name = "Bloom"}), "Bloom"),
				MakeElement("Padding", 10, 10, 10, 10),
				AddThemeObject(SetProps(MakeElement("Image", NotificationConfig.Image), {
					Size = UDim2.new(0, 20, 0, 20), Name = "Icon", ImageTransparency = 1
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
					Size = UDim2.new(1, -30, 0, 20), Position = UDim2.new(0, 30, 0, 0), Font = Enum.Font.GothamBold, Name = "Title", TextTransparency = 1
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
					Size = UDim2.new(1, 0, 0, 0), Position = UDim2.new(0, 0, 0, 25), Font = Enum.Font.GothamSemibold, Name = "Content", AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true, TextTransparency = 1
				}), "TextDark")
			}), "Main")

			local bloomStroke = NotificationFrame:FindFirstChild("Bloom")
			if bloomStroke then bloomStroke.Enabled = true end

			local entranceTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
			TweenService:Create(NotificationFrame.UIScale, entranceTweenInfo, {Scale = 1}):Play()
			TweenService:Create(NotificationFrame, entranceTweenInfo, {BackgroundTransparency = 0.1}):Play()
			for _, child in ipairs(NotificationFrame:GetChildren()) do
				local prop; if child:IsA("TextLabel") then prop = "TextTransparency" elseif child:IsA("ImageLabel") then prop = "ImageTransparency" elseif child:IsA("UIStroke") then prop = "Transparency" end
				if prop then TweenService:Create(child, entranceTweenInfo, {[prop] = child == bloomStroke and 0.5 or 0}):Play() end
			end

			task.wait(NotificationConfig.Time - 0.5)

			local exitTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
			TweenService:Create(NotificationFrame.UIScale, exitTweenInfo, {Scale = 0.8}):Play()
			for _, child in ipairs(NotificationFrame:GetChildren()) do
				local prop; if child:IsA("TextLabel") then prop = "TextTransparency" elseif child:IsA("ImageLabel") then prop = "ImageTransparency" elseif child:IsA("UIStroke") or child:IsA("Frame") then prop = "Transparency" end
				if prop then TweenService:Create(child, exitTweenInfo, {[prop] = 1}):Play() end
			end
			TweenService:Create(NotificationFrame, exitTweenInfo, {BackgroundTransparency = 1}):Play()

			task.wait(exitTweenInfo.Time)
			if NotificationFrame and NotificationFrame.Parent then NotificationFrame:Destroy() end
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg then
		local s, e = pcall(function()
			if isfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				if readfile then LoadCfg(readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt")) end
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end
end
--window thingy
 function OrionLib:MakeWindow(WindowConfig)
    Minimized = false
    Loaded = false
    UIHidden = false
    gradientsToAnimate = {}
    OrionLib.AllElements = {}

    AllTopTabObjects = {}
    AllSideTabObjects = {}
    activeTopTabObject = nil
    activeSideTabObject = nil

    OrionLib.Themes = {
        Default = {
            Main = Color3.fromRGB(25, 25, 25),
            Second = Color3.fromRGB(32, 32, 32),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(60, 60, 60),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(150, 150, 150),
            Bloom = Color3.fromRGB(255, 255, 255)
        },
        Dark = {
            Main = Color3.fromRGB(15, 15, 15),
            Second = Color3.fromRGB(25, 25, 25),
            Stroke = Color3.fromRGB(50, 50, 50),
            Divider = Color3.fromRGB(45, 45, 45),
            Text = Color3.fromRGB(245, 245, 245),
            TextDark = Color3.fromRGB(180, 180, 180),
            Bloom = Color3.fromRGB(200, 200, 200)
        },
        Light = {
            Main = Color3.fromRGB(245, 245, 245),
            Second = Color3.fromRGB(235, 235, 235),
            Stroke = Color3.fromRGB(180, 180, 180),
            Divider = Color3.fromRGB(200, 200, 200),
            Text = Color3.fromRGB(30, 30, 30),
            TextDark = Color3.fromRGB(100, 100, 100),
            Bloom = Color3.fromRGB(50, 50, 50)
        },
        Mocha = {
            Main = Color3.fromRGB(51, 36, 29),
            Second = Color3.fromRGB(82, 60, 50),
            Stroke = Color3.fromRGB(120, 90, 75),
            Divider = Color3.fromRGB(100, 75, 60),
            Text = Color3.fromRGB(240, 220, 200),
            TextDark = Color3.fromRGB(180, 150, 130),
            Bloom = Color3.fromRGB(255, 240, 220)
        },
        Aqua = {
            Main = Color3.fromRGB(0, 128, 128),
            Second = Color3.fromRGB(0, 150, 150),
            Stroke = Color3.fromRGB(0, 180, 180),
            Divider = Color3.fromRGB(0, 160, 160),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(200, 200, 200),
            Bloom = Color3.fromRGB(0, 255, 255)
        },
        Rose = {
            Main = Color3.fromRGB(188, 86, 117),
            Second = Color3.fromRGB(204, 102, 133),
            Stroke = Color3.fromRGB(220, 120, 150),
            Divider = Color3.fromRGB(210, 110, 140),
            Text = Color3.fromRGB(255, 255, 255),
            TextDark = Color3.fromRGB(230, 230, 230),
            Bloom = Color3.fromRGB(255, 200, 220)
        },
        DeepBlack = {
            Main = Color3.fromRGB(10, 10, 10),
            Second = Color3.fromRGB(20, 20, 20),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(40, 40, 40),
            Bloom = Color3.fromRGB(255, 255, 255),
            Text = Color3.fromRGB(230, 230, 230),
            TextDark = Color3.fromRGB(150, 150, 150)
        }
    }

    WindowConfig = WindowConfig or {}
    isShiny = WindowConfig.Shiny or (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.Shiny)
    isUnlockMouse = WindowConfig.UnlockMouse or (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.UnlockMouse)

    WindowConfig.Name = WindowConfig.Name or "Orion Library"
    WindowConfig.SubName = WindowConfig.SubName or nil
    WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
    WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
    WindowConfig.HidePremium = WindowConfig.HidePremium or false
    if WindowConfig.IntroEnabled == nil then
        WindowConfig.IntroEnabled = true
    end
    WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
    WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
    WindowConfig.ShowIcon = WindowConfig.Icon or false
    WindowConfig.Icon = WindowConfig.Iconid or "rbxassetid://8834748103"
    WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
    WindowConfig.SearchBar = WindowConfig.SearchBar or nil
    WindowConfig.UnlockMouse = isUnlockMouse or false
    WindowConfig.Shiny = isShiny or false
    WindowConfig.KeyToOpenWindow = WindowConfig.KeyToOpenWindow or "M"
    WindowConfig.Size = WindowConfig.Size or UDim2.new(0, 615, 0, 380)
    WindowConfig.Autofit = WindowConfig.Autofit or false
    WindowConfig.playid = WindowConfig.playid or nil
    WindowConfig.Vibrate = WindowConfig.Vibrate or {Enabled = false, Duration = 0.2}
    OrionLib.Folder = WindowConfig.ConfigFolder
    OrionLib.SaveCfg = WindowConfig.SaveConfig

    local UserInputService = game:GetService("UserInputService")
    local isMobile = UserInputService.TouchEnabled
    local elemSize = isMobile and 28 or 20
    local halfElem = elemSize / 2
    local knobSize = isMobile and 24 or 14
    local halfKnob = knobSize / 2
    local barHeight = isMobile and 12 or 6
    local halfBar = barHeight / 2

    mouseCaptureGui = Create("ScreenGui", {
        Name = "OrionMouseCapture",
        Parent = Orion.Parent,
        ResetOnSpawn = false,
        Enabled = true,
        DisplayOrder = Orion.DisplayOrder - 1
    })
    mouselock = false
    freeMouse = nil

    function UnlockMouse(Value)
        if not freeMouse then return end
        mouselock = Value
        if Value then
            spawn(function()
                while mouselock do
                    UserInputService.MouseIconEnabled = true
                    freeMouse.Visible = true
                    wait()
                end
                UserInputService.MouseIconEnabled = false
                freeMouse.Visible = false
            end)
        else
            UserInputService.MouseIconEnabled = false
            if freeMouse then freeMouse.Visible = false end
        end
    end

    if WindowConfig.UnlockMouse and UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
        freeMouse = Create("TextButton", {
            Name = "FMouse",
            Size = UDim2.fromScale(1, 1),
            BackgroundTransparency = 1,
            Text = "",
            Parent = mouseCaptureGui,
            Visible = false
        })
    end

    function MakeShineOnHover(target, textLabel)
        if not WindowConfig.Shiny or not target or not textLabel then return end

        shineGradient = textLabel:FindFirstChild("Shine")
        if not shineGradient then
            shineGradient = Create("UIGradient", {
                Name = "Shine",
                Enabled = false,
                Rotation = 0,
                Color = ColorSequence.new(Color3.fromRGB(255, 255, 255)),
                Transparency = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 1),
                    NumberSequenceKeypoint.new(0.4, 0.8),
                    NumberSequenceKeypoint.new(0.5, 0.2),
                    NumberSequenceKeypoint.new(0.6, 0.8),
                    NumberSequenceKeypoint.new(1, 1)
                }),
                Parent = textLabel
            })
        end

        AddConnection(target.MouseEnter, function()
            shineGradient.Enabled = true
            if not table.find(gradientsToAnimate, shineGradient) then
                table.insert(gradientsToAnimate, shineGradient)
            end
        end)

        AddConnection(target.MouseLeave, function()
            shineGradient.Enabled = false
            for i, v in ipairs(gradientsToAnimate) do
                if v == shineGradient then
                    table.remove(gradientsToAnimate, i)
                    break
                end
            end
        end)
    end

    if WindowConfig.SaveConfig then
        s, e = pcall(function()
            if (isfolder and makefolder) and not isfolder(WindowConfig.ConfigFolder) then
                makefolder(WindowConfig.ConfigFolder)
            elseif not (isfolder and isfolder(WindowConfig.ConfigFolder)) then
                if makefolder then makefolder(WindowConfig.ConfigFolder) end
            end
        end)
        if not s then
            warn("OrionLib Error: ", e)
        end
    end

    TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4), 
    WindowConfig.SearchBar and {
        Size = UDim2.new(1, 0, 1, -90),
        Position = UDim2.new(0, 0, 0, 40)
    } or {
        Size = UDim2.new(1, 0, 1, -50)
    }), 
    {
        MakeElement("List"),
        MakeElement("Padding", 8, 0, 0, 8)
    }), "Divider")


    tabHolderUpdating = false
    AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if tabHolderUpdating then return end
        tabHolderUpdating = true
        if TabHolder and TabHolder.UIListLayout then 
            TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16)
        end 
        tabHolderUpdating = false
    end)

    CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0.8, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
            Position = UDim2.new(0, 8, 0, 6),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
            Position = UDim2.new(0, 8, 0, 6),
            Size = UDim2.new(0, 18, 0, 18),
            Name = "Ico"
        }), "Text")
    })

    ThemesBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0.2, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345998"), {
            Position = UDim2.new(0, 8, 0, 6),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    PrivacyBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0.4, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://6031071053"), {
            Position = UDim2.new(0, 8, 0, 6),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    FullScreenBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0.6, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483362458"), {
            Position = UDim2.new(0, 8, 0, 6),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    DragPoint = SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, 0, 0, 50)
    })

    loadedThumbnail = nil
    PlayerImage = SetProps(MakeElement("Image", ""), { Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1 })
    AnonImage = SetProps(MakeElement("Image", "rbxassetid://6031071053"), {
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Visible = false
    })
    spawn(function()
        s, content, isReady = pcall(Players.GetUserThumbnailAsync, Players, LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
        if s and isReady then
            loadedThumbnail = content
            updatePlayerInfo()
        end
    end)

    DisplayLabel = AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
        Size = UDim2.new(1, -60, 0, 13),
        Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
        Font = Enum.Font.GothamBold,
        ClipsDescendants = true
    }), "Text")

    NameLabel = AddThemeObject(SetProps(MakeElement("Label", "@" .. LocalPlayer.Name, 12), {
        Size = UDim2.new(1, -60, 0, 12),
        Position = UDim2.new(0, 50, 1, -25),
        Font = Enum.Font.GothamSemibold,
        Visible = not WindowConfig.HidePremium
    }), "TextDark")

    WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
        Size = UDim2.new(0, 150, 1, -85),
        Position = UDim2.new(0, 0, 0, 85)
    }), {
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(1, 0, 0, 10),
            Position = UDim2.new(0, 0, 0, 0)
        }), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(0, 10, 1, 0),
            Position = UDim2.new(1, -10, 0, 0)
        }), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(0, 1, 1, 0),
            Position = UDim2.new(1, -1, 0, 0)
        }), "Stroke"),
        TabHolder,
        SetChildren(SetProps(MakeElement("TFrame"), {
            Size = UDim2.new(1, 0, 0, 50),
            Position = UDim2.new(0, 0, 1, -50)
        }), {
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(1, 0, 0, 1)
            }), "Stroke"),
            SetChildren(SetProps(MakeElement("Frame"), {
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 32, 0, 32),
                Position = UDim2.new(0, 10, 0.5, 0),
                ClipsDescendants = true,
                BackgroundTransparency = 1
            }), {
                PlayerImage,
                AnonImage,
                MakeElement("Corner", 1)
            }),
            SetChildren(SetProps(MakeElement("TFrame"), {
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 32, 0, 32),
                Position = UDim2.new(0, 10, 0.5, 0)
            }), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                MakeElement("Corner", 1)
            }),
            DisplayLabel,
            NameLabel
        }),
    }), "Second")

    function SelectSideTab(tabToSelect)
        if not tabToSelect then return end
        parentTopTab = tabToSelect.ParentTopTab
        if activeTopTabObject ~= parentTopTab and parentTopTab.Button then
            SelectTopTab(parentTopTab)
        end
        activeSideTabObject = tabToSelect
        for _, otherSideTab in ipairs(AllSideTabObjects) do
            if otherSideTab.Button and otherSideTab.Container and otherSideTab.ParentTopTab == parentTopTab then
                isSelected = (otherSideTab == tabToSelect)
                otherSideTab.Container.Visible = isSelected
                if isSelected then
                    otherSideTab.Button.Title.Font = Enum.Font.GothamBlack
                    TweenService:Create(otherSideTab.Button.Ico, TweenInfo.new(0.25), {ImageTransparency = 0}):Play()
                    TweenService:Create(otherSideTab.Button.Title, TweenInfo.new(0.25), {TextTransparency = 0}):Play()
                else
                    otherSideTab.Button.Title.Font = Enum.Font.GothamSemibold
                    TweenService:Create(otherSideTab.Button.Ico, TweenInfo.new(0.25), {ImageTransparency = 0.4}):Play()
                    TweenService:Create(otherSideTab.Button.Title, TweenInfo.new(0.25), {TextTransparency = 0.4}):Play()
                end
            end
        end
    end

    function SelectTopTab(tabToSelect, fromSearch)
        if not tabToSelect then return end

        for _, otherTopTab in ipairs(AllTopTabObjects) do
            isSelected = (otherTopTab == tabToSelect)
            if otherTopTab.Container then otherTopTab.Container.Visible = isSelected and not otherTopTab.IsMultiTab end
            if otherTopTab.Button then
                if isSelected then
                    AddThemeObject(otherTopTab.Button, "Stroke")
                    AddThemeObject(otherTopTab.Button.Title, "Text")
                else
                    AddThemeObject(otherTopTab.Button, "Second")
                    AddThemeObject(otherTopTab.Button.Title, "TextDark")
                end
            end
        end

        activeTopTabObject = tabToSelect
        if TabHolder then TabHolder.Visible = tabToSelect.IsMultiTab end

        for _, sideTab in ipairs(AllSideTabObjects) do
            if sideTab.Button and sideTab.Container then
                sideTab.Button.Visible = (sideTab.ParentTopTab == tabToSelect)
                sideTab.Container.Visible = false
            end
        end

        if tabToSelect.IsMultiTab and not fromSearch then
            firstSideTabInGroup = tabToSelect.SideTabs[1]
            if firstSideTabInGroup then SelectSideTab(firstSideTabInGroup) end
        end
    end
    
    if WindowConfig.SearchBar then
        SearchBox = nil
        currentFilter = "All"

        function SearchHandle()
            pcall(function()
                text = string.lower(SearchBox.Text)
                isSearching = text ~= ""
                
                matchedTopTabs = {}
                if isSearching then
                    for _, tab in ipairs(AllTopTabObjects) do
                        if string.find(string.lower(tab.Name), text, 1, true) then
                            table.insert(matchedTopTabs, tab)
                        end
                    end
                end

                matchedSideTabs = {}
                if isSearching then
                    for _, tab in ipairs(AllSideTabObjects) do
                        if string.find(string.lower(tab.Button.Title.Text), text, 1, true) then
                            table.insert(matchedSideTabs, tab)
                        end
                    end
                end

                tabSearchActive = #matchedTopTabs > 0 or #matchedSideTabs > 0

                if not isSearching then
                    for _, topTab in ipairs(AllTopTabObjects) do topTab.Button.Visible = true end
                    if activeTopTabObject and activeTopTabObject.IsMultiTab then
                        for _, sideTab in ipairs(AllSideTabObjects) do sideTab.Button.Visible = (sideTab.ParentTopTab == activeTopTabObject) end
                        if activeSideTabObject then SelectSideTab(activeSideTabObject)
                        elseif #activeTopTabObject.SideTabs > 0 then SelectSideTab(activeTopTabObject.SideTabs[1])
                        else SelectTopTab(activeTopTabObject)
                        end
                    elseif activeTopTabObject then
                        SelectTopTab(activeTopTabObject)
                    end
                else
                    if #matchedSideTabs > 0 then
                        firstMatch = matchedSideTabs[1]
                        SelectSideTab(firstMatch)
                        for _, t in ipairs(AllTopTabObjects) do t.Button.Visible = (t == firstMatch.ParentTopTab) end
                        for _, s in ipairs(AllSideTabObjects) do s.Button.Visible = table.find(matchedSideTabs, s) ~= nil end
                    elseif #matchedTopTabs > 0 then
                        firstMatch = matchedTopTabs[1]
                        SelectTopTab(firstMatch, true)
                        for _, t in ipairs(AllTopTabObjects) do t.Button.Visible = (t == firstMatch) end
                        for _, s in ipairs(AllSideTabObjects) do s.Button.Visible = (s.ParentTopTab == firstMatch) end
                        if firstMatch.IsMultiTab and firstMatch.SideTabs[1] then SelectSideTab(firstMatch.SideTabs[1]) end
                    else
                        for _, t in ipairs(AllTopTabObjects) do t.Button.Visible = false end
                        for _, s in ipairs(AllSideTabObjects) do s.Button.Visible = false end
                    end
                end

                for _, element in ipairs(OrionLib.AllElements) do
                    if element and element.Wrapper and element.Wrapper.Parent and element.Wrapper.Parent.Parent then
                        name = element.Name or ""
                        textMatch = not isSearching or string.find(string.lower(name), text, 1, true)
                        
                        parentContainer = element.Wrapper.Parent.Parent
                        
                        filterMatch = false
                        if currentFilter == "All" then
                            filterMatch = true
                        elseif currentFilter == "TopBar Tab" then
                            filterMatch = (parentContainer.Name == "ItemContainer_Direct")
                        elseif currentFilter == "Tab" then
                            filterMatch = (parentContainer.Name == "ItemContainer_Side")
                        else
                            filterMatch = (element.Type == currentFilter)
                        end
                        
                        if tabSearchActive then
                            element.Wrapper.Visible = parentContainer.Visible and filterMatch
                        else
                            element.Wrapper.Visible = parentContainer.Visible and textMatch and filterMatch
                        end
                    end
                end
            end)
        end

        SearchContainer = Create("Frame", {
            Parent = WindowStuff,
            Size = UDim2.new(1, -20, 0, 24),
            Position = UDim2.new(0.5, 0, 0, 12),
            AnchorPoint = Vector2.new(0.5, 0),
            BackgroundTransparency = 1,
        }, {
            Create("UIListLayout", {
                FillDirection = Enum.FillDirection.Horizontal,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                VerticalAlignment = Enum.VerticalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 4)
            })
        })

        filterOnLeft = false

        SearchBar = AddThemeObject(Create("Frame", {
            Parent = SearchContainer,
            Size = UDim2.new(1, (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.filter and -44 or 0), 1, 0),
            ClipsDescendants = true,
            LayoutOrder = filterOnLeft and 1 or 0
        }, {
            MakeElement("Corner", 1, 6),
            AddThemeObject(MakeElement("Stroke"), "Stroke"),
        }), "Main")
        
        SearchBox = AddThemeObject(Create("TextBox", {
            Parent = SearchBar,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            PlaceholderColor3 = Color3.fromRGB(210,210,210),
            PlaceholderText = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.Default) or "🔍 Search",
            Font = Enum.Font.GothamBold,
            Text = '',
            TextXAlignment = Enum.TextXAlignment.Left,
            TextSize = 14,
            ClearTextOnFocus = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.ClearTextOnFocus ~= nil and WindowConfig.SearchBar.ClearTextOnFocus) or true
        }, {
            Create("UIPadding", {PaddingLeft = UDim.new(0,8)})
        }), "Text")

        MakeShineOnHover(SearchBox, SearchBox)
        AddConnection(SearchBox:GetPropertyChangedSignal("Text"), SearchHandle)

        if type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.filter then
            filterOptions = {"All", "Button", "Toggle", "Slider", "Dropdown", "Bind", "Textbox", "Colorpicker", "Executer", "MediaPlayer", "TopBar Tab", "Tab"}
            filterToggled = false

            FilterContainer = Create("Frame", {
                Name = "FilterContainer",
                Size = UDim2.new(0, 40, 1, 0),
                BackgroundTransparency = 1,
                ClipsDescendants = false,
                Parent = SearchContainer,
                ZIndex = WindowStuff.ZIndex + 10,
                LayoutOrder = filterOnLeft and 0 or 1
            })

            FilterButton = AddThemeObject(Create("TextButton", {
                Name = "FilterButton",
                Size = UDim2.new(1, 0, 1, 0),
                Text = "",
                AutoButtonColor = false,
                Parent = FilterContainer,
            }, {
                MakeElement("Corner", 1, 6),
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
            }), "Main")

            FilterList = AddThemeObject(Create("ScrollingFrame", {
                Name = "FilterList",
                Size = UDim2.new(3.5, 0, 0, 0),
                Position = filterOnLeft and UDim2.new(0, 0, 1, 5) or UDim2.new(1, 0, 1, 5),
                AnchorPoint = filterOnLeft and Vector2.new(0, 0) or Vector2.new(1, 0),
                Visible = false,
                ClipsDescendants = true,
                BorderSizePixel = 0,
                ScrollBarThickness = 4,
                Parent = FilterButton,
                Active = true,
                ZIndex = 50
            }), "Second")
            
            FilterListLayout = Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 4),
                Parent = FilterList
            })

            SetChildren(FilterList, {
                FilterListLayout,
                MakeElement("Padding", 4, 4, 4, 4),
                MakeElement("Corner", 0, 5),
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
            })

            filterListUpdating = false
            AddConnection(FilterListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                if filterListUpdating then return end
                filterListUpdating = true
                FilterList.CanvasSize = UDim2.new(0, 0, 0, FilterListLayout.AbsoluteContentSize.Y + 8)
                filterListUpdating = false
            end)
            
            FilterLabel = AddThemeObject(Create("TextLabel", {
                Text = "All ▾",
                Size = UDim2.new(1,0,1,0),
                Font = Enum.Font.GothamSemibold,
                TextSize = 13,
                BackgroundTransparency = 1,
                Parent = FilterButton
            }), "Text")
            
            AddConnection(FilterButton.MouseButton1Click, function()
                filterToggled = not filterToggled
                FilterList.Visible = true
                FilterLabel.Text = currentFilter .. (filterToggled and " ▴" or " ▾")
                
                tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                targetHeight = 0
                if filterToggled then
                    contentHeight = #filterOptions * 28 + (#filterOptions - 1) * 4
                    paddingOffset = 8
                    targetHeight = math.min(contentHeight + paddingOffset, 150)
                else
                    wait(tweenInfo.Time)
                    if FilterList and not filterToggled then
                        FilterList.Visible = false
                    end
                end
                TweenService:Create(FilterList, tweenInfo, {Size = UDim2.new(3.5, 0, 0, targetHeight)}):Play()
            end)

            for _, optionName in ipairs(filterOptions) do
                optionBtn = AddThemeObject(Create("TextButton", {
                    Name = optionName,
                    Size = UDim2.new(1, 0, 0, 28),
                    Text = "",
                    Parent = FilterList,
                    AutoButtonColor = false
                }), "Main")
                SetChildren(optionBtn, {MakeElement("Corner", 0, 4)})

                optionLabel = AddThemeObject(Create("TextLabel", {
                    Text = optionName,
                    Size = UDim2.new(1, -8, 1, 0),
                    Position = UDim2.new(0, 8, 0, 0),
                    Font = Enum.Font.GothamSemibold,
                    TextSize = 14,
                    BackgroundTransparency = 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = optionBtn
                }), "Text")
                
                AddConnection(optionBtn.MouseEnter, function()
                    hoverColor = optionBtn.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.2)
                    TweenService:Create(optionBtn, TweenInfo.new(0.2), { BackgroundColor3 = hoverColor }):Play()
                end)
            
                AddConnection(optionBtn.MouseLeave, function()
                    TweenService:Create(optionBtn, TweenInfo.new(0.2), { BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main }):Play()
                end)

                AddConnection(optionBtn.MouseButton1Click, function()
                    currentFilter = optionName
                    filterToggled = false
                    FilterLabel.Text = currentFilter .. " ▾"
                    SearchHandle()
                    
                    tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                    TweenService:Create(FilterList, tweenInfo, {Size = UDim2.new(3.5, 0, 0, 0)}):Play()
                    wait(tweenInfo.Time)
                    if FilterList and not filterToggled then
                        FilterList.Visible = false
                    end
                end)
            end
        end
    end
    
    hasSubName = WindowConfig.SubName and WindowConfig.SubName ~= ""

    nameOffset = WindowConfig.ShowIcon and 50 or 25
    WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
        Size = UDim2.new(1, -30, 0, 20),
        Position = UDim2.new(0, nameOffset, 0, hasSubName and 5 or 15),
        Font = Enum.Font.GothamBlack,
        TextSize = hasSubName and 18 or 20
    }), "Text")

    if hasSubName then
        SubNameLabel = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.SubName, 12), {
            Size = UDim2.new(1, -30, 0, 12),
            Position = UDim2.new(0, nameOffset, 0, 25),
            Font = Enum.Font.Gotham,
            TextSize = 12
        }), "TextDark")
    end

    WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 1, -1)
    }), "Stroke")

    TopTabHolder = SetChildren(Create("ScrollingFrame", {
        Name = "TopTabHolder",
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        ZIndex = 3,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100),
        CanvasSize = UDim2.new(0,0,0,0),
        ScrollingDirection = Enum.ScrollingDirection.X,
        AutomaticCanvasSize = Enum.AutomaticSize.X
    }), {
        Create("UIListLayout", {
            FillDirection = Enum.FillDirection.Horizontal,
            VerticalAlignment = Enum.VerticalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        })
    })

    TopBar = SetChildren(SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, 0, 0, 50),
        Name = "TopBar",
        ZIndex = 2
    }), {
        WindowName,
        WindowTopBarLine,
        AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
            Size = UDim2.new(0, 175, 0, 30),
            Position = UDim2.new(1, -195, 0, 10)
        }), {
            AddThemeObject(MakeElement("Stroke"), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.2, 0, 0, 0)
            }), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.4, 0, 0, 0)
            }), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.6, 0, 0, 0)
            }), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.8, 0, 0, 0)
            }), "Stroke"),
            CloseBtn,
            MinimizeBtn,
            ThemesBtn,
            PrivacyBtn,
            FullScreenBtn
        }), "Second"),
    })

    if hasSubName then
        SubNameLabel.Parent = TopBar
    end

    TopTabBar = AddThemeObject(SetChildren(Create("Frame", {
        Name = "TopTabBar",
        Size = UDim2.new(1, 0, 0, 35),
        Position = UDim2.new(0, 0, 0, 50),
        BackgroundTransparency = 1,
        ZIndex = 2
    }), {
        TopTabHolder,
        AddThemeObject(Create("Frame", {
            Size = UDim2.new(1,0,0,1),
            Position = UDim2.new(0,0,1,-1)
        }), "Stroke")
    }), "Second")

    if WindowConfig.Autofit then
        if isMobile then
            WindowConfig.Size = UDim2.new(0, 500, 0, 350)
        else
            WindowConfig.Size = UDim2.new(0, 650, 0, 400)
        end
    end

    local width = WindowConfig.Size.X.Offset
    local height = WindowConfig.Size.Y.Offset

    MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
        Position = UDim2.new(0.5, -math.floor(width / 2), 0.5, -math.floor(height / 2)),
        Size = WindowConfig.Size,
        ClipsDescendants = true
    }), {
        Create("UIStroke", {
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Thickness = 2,
            LineJoinMode = Enum.LineJoinMode.Round
        }),
        AddThemeObject(Create("Frame", {
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 85),
            ZIndex = 0
        }, {
            Create("UICorner", {
                CornerRadius = UDim.new(0, 10)
            })
        }), "Second"),
        TopBar,
        TopTabBar,
        DragPoint,
        WindowStuff
    }), "Main")

    MainWindow.Parent = Orion
    AddThemeObject(MainWindow.UIStroke, "Stroke")

    MakeShineOnHover(DragPoint, WindowName)

    rainbowSpeed = 0.15

    function HueLerp(h1, h2, t)
        dist = (h2 - h1 + 1) % 1
        if dist > 0.5 then
            dist = dist - 1
        end
        return (h1 + dist * t + 1) % 1
    end

    OrionLib.SelectedTheme = "Default"

    rainbowEnabled = false
    anonymous = false

    function updatePlayerInfo()
        if anonymous then
            DisplayLabel.Text = "Anonymous"
            NameLabel.Text = ""
            NameLabel.Visible = false
            PlayerImage.Visible = false
            AnonImage.Visible = true
        else
            DisplayLabel.Text = LocalPlayer.DisplayName
            NameLabel.Text = "@" .. LocalPlayer.Name
            NameLabel.Visible = not WindowConfig.HidePremium
            if loadedThumbnail then
                PlayerImage.Image = loadedThumbnail
            end
            PlayerImage.Visible = true
            AnonImage.Visible = false
        end
    end

    updatePlayerInfo()

    function ApplyTheme()
        selectedThemeTable = OrionLib.Themes[OrionLib.SelectedTheme]
        if selectedThemeTable then
            for themeName, themeColor in pairs(selectedThemeTable) do
                if OrionLib.ThemeObjects[themeName] then
                    for _, object in ipairs(OrionLib.ThemeObjects[themeName]) do
                        if object and object.Parent then
                            prop = ReturnProperty(object)
                            if prop then
                                pcall(function() object[prop] = themeColor end)
                            end
                        end
                    end
                end
            end
        end
    end

    AddConnection(RunService.Heartbeat, function()
        t = tick() * rainbowSpeed
        progress = t % 1

        hue_purple, hue_red, hue_green = 0.75, 0.98, 0.33
        dynamic_hue = nil

        if progress < 0.333 then
            dynamic_hue = HueLerp(hue_purple, hue_red, progress / 0.333)
        elseif progress < 0.666 then
            dynamic_hue = HueLerp(hue_red, hue_green, (progress - 0.333) / 0.333)
        else
            dynamic_hue = HueLerp(hue_green, hue_purple, (progress - 0.666) / 0.333)
        end

        if rainbowEnabled then
            dynamicColors = {
                Main = Color3.fromHSV(dynamic_hue, 0.9, 0.08),
                Second = Color3.fromHSV(dynamic_hue, 0.8, 0.2),
                Stroke = Color3.fromHSV(dynamic_hue, 0.9, 1),
                Divider = Color3.fromHSV(dynamic_hue, 0.8, 0.5),
                Bloom = Color3.fromHSV(dynamic_hue, 0.9, 1)
            }

            for themeName, themeColor in pairs(dynamicColors) do
                if OrionLib.ThemeObjects[themeName] then
                    for _, object in ipairs(OrionLib.ThemeObjects[themeName]) do
                        if object and object.Parent then
                            prop = ReturnProperty(object)
                            if prop then
                                pcall(function() object[prop] = themeColor end)
                            end
                        end
                    end
                end
            end
        end

        shineSpeed = 1.2
        for i = #gradientsToAnimate, 1, -1 do
            gradient = gradientsToAnimate[i]
            if gradient and gradient.Parent then
                gradient.Offset = Vector2.new(((tick() * shineSpeed) % 2) - 1, 0)
            else
                table.remove(gradientsToAnimate, i)
            end
        end
    end)


    if WindowConfig.ShowIcon then
        local iconOffset = 50
        WindowName.Position = UDim2.new(0, iconOffset, 0, hasSubName and 5 or 15)
        WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
            Size = UDim2.new(0, 30, 0, 30),
            Position = UDim2.new(0, 15, 0, hasSubName and 5 or 10)
        })
        WindowIcon.Parent = TopBar
    end

    MakeDraggable(DragPoint, MainWindow)

    MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
        Parent = Orion,
        Size = UDim2.new(0, 40, 0, 40),
        Position = UDim2.new(0.5, -20, 0, 20),
        BackgroundTransparency = 0,
        BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second,
        Visible = false,
        AnchorPoint = Vector2.new(0.5, 0.5)
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://10489703350"), {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0.7, 0, 0.7, 0),
            BackgroundColor3 = OrionLib.Themes.Default.Text
        }), "Text"),
        MakeElement("Corner", 1)
    })

    function MakeDraggableMobile(button)
        s, e = pcall(function()
            dragging = nil
            dragStart = nil
            startPos = nil

            function update(input)
                delta = input.Position - dragStart
                newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                TweenService:Create(button, TweenInfo.new(0.2), {Position = newPosition}):Play()
            end

            button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    dragStart = input.Position
                    startPos = button.Position

                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    update(input)
                end
            end)
        end)
        if not s then
            warn("OrionLib Error: ", e)
        end
    end

    MakeDraggableMobile(MobileReopenButton)


    AddConnection(CloseBtn.MouseButton1Up, function()
        MainWindow.Visible = false
        MobileReopenButton.Visible = true
        UIHidden = true
        UnlockMouse(false)
        OrionLib:MakeNotification({
            Name = "Interface Hidden",
            Content = "Press " .. WindowConfig.KeyToOpenWindow .. " to reopen the interface.",
            Time = 5
        })
        pcall(WindowConfig.CloseCallback)
    end)

    AddConnection(UserInputService.InputBegan, function(Input)
        if Input.KeyCode == Enum.KeyCode[WindowConfig.KeyToOpenWindow] and not UserInputService:GetFocusedTextBox() then
            UIHidden = not UIHidden
            MainWindow.Visible = not UIHidden
            MobileReopenButton.Visible = UIHidden
            UnlockMouse(not UIHidden)
        end
    end)

    AddConnection(MobileReopenButton.Activated, function()
        MainWindow.Visible = true
        MobileReopenButton.Visible = false
        UIHidden = false
        UnlockMouse(true)
    end)


    AddConnection(MinimizeBtn.MouseButton1Up, function()
        Minimized = not Minimized
        if Minimized then
            MainWindow.ClipsDescendants = true
            TopTabBar.Visible = false
            WindowTopBarLine.Visible = false
            MinimizeBtn.Ico.Image = "rbxassetid://7072720870"
            UnlockMouse(false)
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, mainWidth, 0, 50)}):Play()
            wait(0.1)
            WindowStuff.Visible = false
        else
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, mainWidth, 0, mainHeight)}):Play()
            MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
            UnlockMouse(true)
            wait(0.02)
            MainWindow.ClipsDescendants = false
            TopTabBar.Visible = true
            WindowStuff.Visible = true
            WindowTopBarLine.Visible = true
        end
    end)

    originalPos = MainWindow.Position
    originalSize = WindowConfig.Size
    originalSettingsSize = isMobile and UDim2.new(0, 450, 0, 350) or UDim2.new(0, 500, 0, 400)
    mainWidth = originalSize.X.Offset
    mainHeight = originalSize.Y.Offset
    settingsWidth = isMobile and 450 or 500
    settingsHeight = isMobile and 350 or 400
    isFullScreen = false

    tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

    AddConnection(FullScreenBtn.MouseButton1Up, function()
        isFullScreen = not isFullScreen
        if isFullScreen then
            TweenService:Create(MainWindow, tweenInfo, {Position = UDim2.new(0,0,0,0), Size = UDim2.new(1,0,1,0)}):Play()
        else
            TweenService:Create(MainWindow, tweenInfo, {Position = originalPos, Size = originalSize}):Play()
        end
    end)

    settingsMinimized = false
    settingsVisible = false
    sideBarVisible = true
    sideWidth = 150
    sideTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint)

    ToggleSideBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.333, 0, 1, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3173271667"), {
            Position = UDim2.new(0, 9, 0, 4),
            Size = UDim2.new(0, 18, 0, 18),
            Name = "Ico"
        }), "Text")
    })

    SettingsMinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.333, 0, 1, 0),
        Position = UDim2.new(0.333, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
            Position = UDim2.new(0, 9, 0, 4),
            Size = UDim2.new(0, 18, 0, 18),
            Name = "Ico"
        }), "Text")
    })

    SettingsCloseBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.333, 0, 1, 0),
        Position = UDim2.new(0.666, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
            Position = UDim2.new(0, 9, 0, 4),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    SettingsDragPoint = SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, 0, 0, 40)
    })

    SettingsName = AddThemeObject(SetProps(MakeElement("Label", "Settings", 14), {
        Size = UDim2.new(1, -30, 2, 0),
        Position = UDim2.new(0, 25, 0, -18),
        Font = Enum.Font.GothamBlack,
        TextSize = 18
    }), "Text")

    SettingsTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 1, -1)
    }), "Stroke")

    SettingsTopBar = SetChildren(SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, 0, 0, 40),
        Name = "TopBar"
    }), {
        SettingsName,
        SettingsTopBarLine,
        AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
            Size = UDim2.new(0, 105, 0, 25),
            Position = UDim2.new(1, -110, 0, 8)
        }), {
            AddThemeObject(MakeElement("Stroke"), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.333, 0, 0, 0)
            }), "Stroke"),
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(0, 1, 1, 0),
                Position = UDim2.new(0.666, 0, 0, 0)
            }), "Stroke"),
            ToggleSideBtn,
            SettingsMinimizeBtn,
            SettingsCloseBtn
        }), "Second")
    })

    SettingsSideTabHolder = SetChildren(Create("ScrollingFrame", {
        Name = "SideTabHolder",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    }), {
        Create("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        }),
        MakeElement("Padding", 5, 0, 5, 0)
    })

    AddConnection(SettingsSideTabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        SettingsSideTabHolder.CanvasSize = UDim2.new(0, 0, 0, SettingsSideTabHolder.UIListLayout.AbsoluteContentSize.Y + 10)
    end)

    SettingsSideTabBar = AddThemeObject(SetChildren(Create("Frame", {
        Name = "SideTabBar",
        Size = UDim2.new(0, sideWidth, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundTransparency = 1
    }), {
        SettingsSideTabHolder,
        AddThemeObject(Create("Frame", {
            Size = UDim2.new(0,1,1,0),
            Position = UDim2.new(1,-1,0,0)
        }), "Stroke")
    }), "Second")

    SettingsContent = AddThemeObject(SetChildren(SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, -sideWidth, 1, -40),
        Position = UDim2.new(0, sideWidth, 0, 40)
    }), {
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(0,1,1,0)
        }), "Stroke")
    }), "Divider")

    SettingsWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
        Position = UDim2.new(0.5, -250, 0.5, -200),
        Size = originalSettingsSize,
        ClipsDescendants = true,
        Visible = false
    }), {
        Create("UIStroke", {
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Thickness = 2,
            LineJoinMode = Enum.LineJoinMode.Round
        }),
        AddThemeObject(Create("Frame", {
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 40),
            ZIndex = 0
        }, {
            Create("UICorner", {
                CornerRadius = UDim.new(0, 10)
            })
        }), "Second"),
        SettingsTopBar,
        SettingsSideTabBar,
        SettingsDragPoint,
        SettingsContent
    }), "Main")

    SettingsWindow.Parent = Orion
    AddThemeObject(SettingsWindow.UIStroke, "Stroke")

    MakeShineOnHover(SettingsDragPoint, SettingsName)
    MakeDraggable(SettingsDragPoint, SettingsWindow)

    settingsTabs = {}

    function SelectSettingsTab(tabToSelect)
        for _, otherTab in ipairs(settingsTabs) do
            isSelected = (otherTab == tabToSelect)
            otherTab.Container.Visible = isSelected
            if isSelected then
                AddThemeObject(otherTab.Button, "Stroke")
                AddThemeObject(otherTab.Button.Title, "Text")
                otherTab.Button.Title.Font = Enum.Font.GothamBlack
                TweenService:Create(otherTab.Button.Title, TweenInfo.new(0.25), {TextTransparency = 0}):Play()
            else
                AddThemeObject(otherTab.Button, "Second")
                AddThemeObject(otherTab.Button.Title, "TextDark")
                otherTab.Button.Title.Font = Enum.Font.GothamSemibold
                TweenService:Create(otherTab.Button.Title, TweenInfo.new(0.25), {TextTransparency = 0.4}):Play()
            end
        end
    end

    function CreateSettingsTab(tabName)
        tabButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
            Size = UDim2.new(1, 0, 0, 30),
            AutoButtonColor = false,
            BackgroundTransparency = 0
        }), {
            AddThemeObject(SetProps(MakeElement("Label", tabName, 14), {
                Size = UDim2.new(1, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                TextSize = 14,
                Font = Enum.Font.GothamBold,
                Name = "Title"
            }), "TextDark")
        }), "Second")

        tabButton.LayoutOrder = #settingsTabs + 1
        tabButton.Parent = SettingsSideTabHolder

        tabContainer = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4), {
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 0, 0, 0),
            Visible = false
        }), {
            MakeElement("List"),
            MakeElement("Padding", 8, 0, 0, 8)
        }), "Second")
        AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = tabContainer

        tabContainer.Parent = SettingsContent

        tabContainerUpdating = false
        AddConnection(tabContainer.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            if tabContainerUpdating then return end
            tabContainerUpdating = true
            tabContainer.CanvasSize = UDim2.new(0, 0, 0, tabContainer.UIListLayout.AbsoluteContentSize.Y + 16)
            tabContainerUpdating = false
        end)

        tab = {
            Button = tabButton,
            Container = tabContainer,
            Name = tabName
        }

        table.insert(settingsTabs, tab)

        AddConnection(tab.Button.MouseButton1Click, function()
            SelectSettingsTab(tab)
        end)

        AddConnection(tab.Button.Activated, function()
            SelectSettingsTab(tab)
        end)

        return tab
    end

    themeTab = CreateSettingsTab("Theme")
    privacyTab = CreateSettingsTab("Privacy")
    infoTab = CreateSettingsTab("Info")

    SelectSettingsTab(themeTab)

    AddConnection(ToggleSideBtn.MouseButton1Click, function()
        sideBarVisible = not sideBarVisible
        targetWidth = sideBarVisible and 150 or 0
        TweenService:Create(SettingsSideTabBar, sideTweenInfo, {Size = UDim2.new(0, targetWidth, 1, -40)}):Play()
        TweenService:Create(SettingsContent, sideTweenInfo, {Position = UDim2.new(0, targetWidth, 0, 40), Size = UDim2.new(1, -targetWidth, 1, -40)}):Play()
        if sideBarVisible then
            ToggleSideBtn.Ico.Image = "rbxassetid://3173271667"
            SettingsSideTabBar.Visible = true
        else
            ToggleSideBtn.Ico.Image = "rbxassetid://74722782678455"
            wait(sideTweenInfo.Time)
            SettingsSideTabBar.Visible = false
        end
    end)

    rainbowWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = rainbowWrapper
    rainbowWrapper.Parent = themeTab.Container

    rainbowDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Enable rainbow cycling of UI colors.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    rainbowDescLabel.Parent = rainbowWrapper

    rainbowLabel = AddThemeObject(SetProps(MakeElement("Label", "Rainbow Mode", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    rainbowLabel.Parent = rainbowWrapper

    rainbowButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, elemSize, 0, elemSize),
        Position = UDim2.new(1, -(elemSize + 20), 0.5, -halfElem)
    }), "Main")
    rainbowButton.Parent = rainbowWrapper

    rainbowCheckbox = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    }), "Text")
    rainbowCheckbox.Parent = rainbowButton

    checkLabel = AddThemeObject(Create("TextLabel", {
        Text = "",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 16
    }), "Text")
    checkLabel.Parent = rainbowCheckbox

    rainbowCorner = MakeElement("Corner", 4)
    rainbowCorner.Parent = rainbowButton
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = rainbowButton

    function updateRainbowToggle()
        if rainbowEnabled then
            checkLabel.Text = "✓"
            rainbowButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Stroke
        else
            checkLabel.Text = ""
            rainbowButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
        end
    end
    updateRainbowToggle()

    AddConnection(rainbowButton.MouseButton1Click, function()
        rainbowEnabled = not rainbowEnabled
        updateRainbowToggle()
    end)

    sliderWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = sliderWrapper
    sliderWrapper.Parent = themeTab.Container

    sliderDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Adjust the speed of rainbow color changes.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    sliderDescLabel.Parent = sliderWrapper

    sliderLabel = AddThemeObject(SetProps(MakeElement("Label", "Rainbow Speed", 14), {
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    sliderLabel.Parent = sliderWrapper

    sliderBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0.5, -10, 0, barHeight),
        Position = UDim2.new(0.5, 5, 0.5, -halfBar)
    }), "Second")
    sliderBar.Parent = sliderWrapper

    barCorner = MakeElement("Corner", barHeight / 2)
    barCorner.Parent = sliderBar
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = sliderBar

    fillBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0.5, 0, 1, 0)
    }), "Stroke")
    fillBar.Parent = sliderBar

    fillCorner = MakeElement("Corner", barHeight / 2)
    fillCorner.Parent = fillBar

    knob = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, knobSize, 0, knobSize),
        Position = UDim2.new(0.5, -halfKnob, 0.5, -halfKnob),
        AutoButtonColor = false
    }), "Text")
    knob.Parent = sliderBar

    knobCorner = MakeElement("Corner", knobSize / 2)
    knobCorner.Parent = knob
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = knob

    valueLabel = AddThemeObject(SetProps(MakeElement("Label", "0.15", 12), {
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, 5, 0, 0),
        BackgroundTransparency = 1
    }), "Text")
    valueLabel.Parent = sliderBar

    dragging = false

    AddConnection(knob.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local pos = Vector2.new(input.Position.X, input.Position.Y) - sliderBar.AbsolutePosition
            percent = math.clamp(pos.X / sliderBar.AbsoluteSize.X, 0, 1)
            knob.Position = UDim2.new(percent, -halfKnob, 0.5, -halfKnob)
            fillBar.Size = UDim2.new(percent, 0, 1, 0)
            rainbowSpeed = 0.1 + (1 - 0.1) * percent
            valueLabel.Text = string.format("%.2f", rainbowSpeed)
        end
    end)

    staticThemeEnabled = false

    staticThemeWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = staticThemeWrapper
    staticThemeWrapper.Parent = themeTab.Container

    staticThemeDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Use a fixed theme instead of rainbow.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    staticThemeDescLabel.Parent = staticThemeWrapper

    staticThemeLabel = AddThemeObject(SetProps(MakeElement("Label", "Static Theme", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    staticThemeLabel.Parent = staticThemeWrapper

    staticThemeButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, elemSize, 0, elemSize),
        Position = UDim2.new(1, -(elemSize + 20), 0.5, -halfElem)
    }), "Main")
    staticThemeButton.Parent = staticThemeWrapper

    staticCheckbox = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    }), "Text")
    staticCheckbox.Parent = staticThemeButton

    staticCheckLabel = AddThemeObject(Create("TextLabel", {
        Text = "",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 16
    }), "Text")
    staticCheckLabel.Parent = staticCheckbox

    staticCorner = MakeElement("Corner", 4)
    staticCorner.Parent = staticThemeButton
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = staticThemeButton

    function updateStaticThemeToggle()
        if staticThemeEnabled then
            staticCheckLabel.Text = "✓"
            staticThemeButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Stroke
        else
            staticCheckLabel.Text = ""
            staticThemeButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
        end
        ApplyTheme()
    end
    updateStaticThemeToggle()

    AddConnection(staticThemeButton.MouseButton1Click, function()
        staticThemeEnabled = not staticThemeEnabled
        if staticThemeEnabled then
            rainbowEnabled = false
            updateRainbowToggle()
        else
            rainbowEnabled = true
            updateRainbowToggle()
        end
        updateStaticThemeToggle()
    end)

    dropdownWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = dropdownWrapper
    dropdownWrapper.Parent = themeTab.Container

    dropdownDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Choose a static color theme for the UI.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    dropdownDescLabel.Parent = dropdownWrapper

    dropdownLabel = AddThemeObject(SetProps(MakeElement("Label", "Select Theme", 14), {
        Size = UDim2.new(1, -130, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    dropdownLabel.Parent = dropdownWrapper

    dropdownButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, 120, 0, 24),
        Position = UDim2.new(1, -130, 0.5, -12)
    }), "Main")
    dropdownButton.Parent = dropdownWrapper

    dropdownText = AddThemeObject(SetProps(MakeElement("Label", "Default", 13), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamSemibold
    }), "Text")
    dropdownText.Parent = dropdownButton

    dropdownList = AddThemeObject(Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 2),
        Visible = false,
        ClipsDescendants = true,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ZIndex = 50
    }), "Second")
    dropdownList.Parent = dropdownButton

    listLayout = Create("UIListLayout", {
        Padding = UDim.new(0, 2)
    })
    listLayout.Parent = dropdownList

    MakeElement("Padding", 2, 2, 2, 2).Parent = dropdownList
    MakeElement("Corner", 4).Parent = dropdownList
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = dropdownList

    options = {"Default", "Dark", "Light", "Mocha", "Aqua", "Rose", "DeepBlack", "Custom", "Video"}
    selected = "Default"
    toggled = false
    backgroundMode = "Theme"

    for _, opt in ipairs(options) do
        optBtn = AddThemeObject(Create("TextButton", {
            Name = opt,
            Size = UDim2.new(1, 0, 0, 24),
            Text = "",
            ZIndex = 51
        }), "Main")
        optBtn.Parent = dropdownList
        MakeElement("Corner", 4).Parent = optBtn

        optLabel = AddThemeObject(Create("TextLabel", {
            Text = opt,
            Size = UDim2.new(1, -8, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 52
        }), "Text")
        optLabel.Parent = optBtn

        AddConnection(optBtn.MouseButton1Click, function()
            selected = opt
            dropdownText.Text = opt
            staticThemeEnabled = true
            rainbowEnabled = false
            updateRainbowToggle()
            updateStaticThemeToggle()
            toggled = false
            TweenService:Create(dropdownList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            wait(0.2)
            dropdownList.Visible = false
            if opt == "Custom" then
                accentPickerWrapper.Visible = true
                mainPickerWrapper.Visible = true
                videoWrapper.Visible = false
                backgroundMode = "Theme"
                MainWindow.BackgroundTransparency = 0
                SettingsWindow.BackgroundTransparency = 0
                videoBgFrame.Visible = false
                settingsVideoBgFrame.Visible = false
            elseif opt == "Video" then
                accentPickerWrapper.Visible = false
                mainPickerWrapper.Visible = false
                videoWrapper.Visible = true
                backgroundMode = "Video"
                videoBgFrame.Visible = false
                settingsVideoBgFrame.Visible = false
                thumbnailOverlay.Visible = false
                settingsThumbnailOverlay.Visible = false
            else
                accentPickerWrapper.Visible = false
                mainPickerWrapper.Visible = false
                videoWrapper.Visible = false
                backgroundMode = "Theme"
                MainWindow.BackgroundTransparency = 0
                SettingsWindow.BackgroundTransparency = 0
                videoBgFrame.Visible = false
                settingsVideoBgFrame.Visible = false
                OrionLib.SelectedTheme = opt
            end
            ApplyTheme()
            if not transparentEnabled then
                setDefaultTransparency(MainWindow)
                setDefaultTransparency(SettingsWindow)
            end
        end)
    end

    dropdownUpdating = false
    AddConnection(listLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if dropdownUpdating then return end
        dropdownUpdating = true
        dropdownList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 4)
        dropdownUpdating = false
    end)

    AddConnection(dropdownButton.MouseButton1Click, function()
        toggled = not toggled
        dropdownList.Visible = true
        targetH = toggled and (#options * 26) or 0
        TweenService:Create(dropdownList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, targetH)}):Play()
        if not toggled then
            wait(0.2)
            dropdownList.Visible = false
        end
    end)

    function Color3ToHex(c3)
        return string.format("%02X%02X%02X", math.floor(c3.R * 255), math.floor(c3.G * 255), math.floor(c3.B * 255))
    end

    accentColor = Color3.fromRGB(0, 130, 243)
    hue, s, v = accentColor:ToHSV()

    mainColor = Color3.fromRGB(25, 25, 25)
    mainHue, mainS, mainV = mainColor:ToHSV()

    bloomColor = Color3.fromRGB(255, 0, 255)
    bloomHue = 0.833
    bloomS = 1
    bloomV = 1

    OrionLib.Themes.Custom = {}
    for k, v in pairs(OrionLib.Themes.Default) do
        OrionLib.Themes.Custom[k] = v
    end

    accentPickerWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 250)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = accentPickerWrapper
    accentPickerWrapper.Parent = themeTab.Container
    accentPickerWrapper.Visible = false

    accentLabel = AddThemeObject(SetProps(MakeElement("Label", "Accent", 14), {
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 10, 0, 10),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    accentLabel.Parent = accentPickerWrapper

    svBox = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 100),
        Position = UDim2.new(0, 10, 0, 35)
    })
    svBox.Parent = accentPickerWrapper
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = svBox
    MakeElement("Corner", 4).Parent = svBox

    whiteLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.new(1,1,1)
    })
    whiteLayer.Parent = svBox
    MakeElement("Corner", 4).Parent = whiteLayer

    satLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundTransparency = 0,
        BackgroundColor3 = Color3.fromHSV(hue,1,1)
    })
    satLayer.Parent = svBox
    satGrad = Create("UIGradient", {
        Rotation = 0,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 0)
        }),
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromHSV(hue,1,1)),
            ColorSequenceKeypoint.new(1, Color3.fromHSV(hue,1,1))
        })
    })
    satGrad.Parent = satLayer
    MakeElement("Corner", 4).Parent = satLayer

    valLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.new(0,0,0)
    })
    valLayer.Parent = svBox
    valGrad = Create("UIGradient", {
        Rotation = 90,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 0)
        })
    })
    valGrad.Parent = valLayer
    MakeElement("Corner", 4).Parent = valLayer

    svDot = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,10,0,10),
        AnchorPoint = Vector2.new(0.5,0.5),
        BackgroundColor3 = Color3.new(1,1,1),
        ZIndex = 2
    })
    svDot.Parent = svBox
    MakeElement("Corner", 1).Parent = svDot
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = svDot
    svDot.Position = UDim2.new(s, 0, 1-v, 0)

    hueSlider = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 8),
        Position = UDim2.new(0, 10, 0, 145)
    })
    hueSlider.Parent = accentPickerWrapper
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = hueSlider
    MakeElement("Corner", 4).Parent = hueSlider

    hueGrad = Create("UIGradient", {
        Rotation = 0,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
        })
    })
    hueGrad.Parent = hueSlider

    hueDot = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,12,0,12),
        AnchorPoint = Vector2.new(0.5,0.5),
        BackgroundColor3 = Color3.new(1,1,1),
        ZIndex = 2,
        Position = UDim2.new(hue, 0, 0.5, 0)
    })
    hueDot.Parent = hueSlider
    MakeElement("Corner", 1).Parent = hueDot
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = hueDot

    hexWrapper = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 160)
    })
    hexWrapper.Parent = accentPickerWrapper

    hexLabel = AddThemeObject(SetProps(MakeElement("Label", "#" .. Color3ToHex(accentColor), 13), {
        Size = UDim2.new(1, -30, 1, 0),
        Font = Enum.Font.Gotham
    }), "Text")
    hexLabel.Parent = hexWrapper

    copyBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0,20,0,20),
        Position = UDim2.new(1,0,0,0),
        AnchorPoint = Vector2.new(1,0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3926305904"), {
            ImageRectOffset = Vector2.new(484, 364),
            ImageRectSize = Vector2.new(36, 36),
            Size = UDim2.new(0,16,0,16),
            Position = UDim2.new(0.5,-8,0.5,-8)
        }), "Text")
    })
    copyBtn.Parent = hexWrapper

    AddConnection(copyBtn.MouseButton1Click, function()
        setclipboard(hexLabel.Text)
        OrionLib:MakeNotification({
            Name = "Copied",
            Content = "Hex code copied to clipboard!",
            Time = 3
        })
    end)

    rgbWrapper = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 185)
    })
    rgbWrapper.Parent = accentPickerWrapper

    r,g,b = math.floor(accentColor.R*255), math.floor(accentColor.G*255), math.floor(accentColor.B*255)
    rgbLabel = AddThemeObject(SetProps(MakeElement("Label", r..","..g..","..b, 13), {
        Size = UDim2.new(1, -30,1,0),
        Font = Enum.Font.Gotham
    }), "Text")
    rgbLabel.Parent = rgbWrapper

    rgbCopyBtn = copyBtn:Clone()
    rgbCopyBtn.Parent = rgbWrapper

    AddConnection(rgbCopyBtn.MouseButton1Click, function()
        setclipboard(rgbLabel.Text)
        OrionLib:MakeNotification({
            Name = "Copied",
            Content = "RGB code copied to clipboard!",
            Time = 3
        })
    end)

    hitBoxLabel = AddThemeObject(SetProps(MakeElement("Label", "HitBox", 14), {
        Size = UDim2.new(1,0,0,20),
        Position = UDim2.new(0,10,0,210),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    hitBoxLabel.Parent = accentPickerWrapper

    hitBoxSlider = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 8),
        Position = UDim2.new(0, 10, 0, 235),
        BackgroundColor3 = Color3.new(1,1,1)
    })
    hitBoxSlider.Parent = accentPickerWrapper
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = hitBoxSlider
    MakeElement("Corner", 4).Parent = hitBoxSlider

    hitSatLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.fromHSV(bloomHue,1,bloomV)
    })
    hitSatLayer.Parent = hitBoxSlider

    hitSatGrad = Create("UIGradient", {
        Rotation = 0,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0,1),
            NumberSequenceKeypoint.new(1,0)
        }),
        Color = ColorSequence.new(Color3.fromHSV(bloomHue,1,bloomV), Color3.fromHSV(bloomHue,1,bloomV))
    })
    hitSatGrad.Parent = hitSatLayer

    hitDot = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,12,0,12),
        AnchorPoint = Vector2.new(0.5,0.5),
        BackgroundColor3 = Color3.new(1,1,1),
        ZIndex = 2,
        Position = UDim2.new(1, 0, 0.5, 0)
    })
    hitDot.Parent = hitBoxSlider
    MakeElement("Corner", 1).Parent = hitDot
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = hitDot

    svDragging = false
    AddConnection(svBox.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            svDragging = true
            updateSV(input)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if svDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSV(input)
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            svDragging = false
        end
    end)

    function updateSV(input)
        local inputPos = Vector2.new(input.Position.X, input.Position.Y)
        local mousePos = inputPos - svBox.AbsolutePosition
        local x = math.clamp(mousePos.X / svBox.AbsoluteSize.X, 0, 1)
        local y = math.clamp(mousePos.Y / svBox.AbsoluteSize.Y, 0, 1)
        s = x
        v = 1 - y
        svDot.Position = UDim2.new(x, 0, y, 0)
        updateAccentColor()
    end

    hueDragging = false
    AddConnection(hueSlider.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hueDragging = true
            updateHue(input)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if hueDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateHue(input)
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hueDragging = false
        end
    end)

    function updateHue(input)
        local inputPos = Vector2.new(input.Position.X, input.Position.Y)
        local mousePos = inputPos - hueSlider.AbsolutePosition
        local x = math.clamp(mousePos.X / hueSlider.AbsoluteSize.X, 0, 1)
        hue = x
        hueDot.Position = UDim2.new(x, 0, 0.5, 0)
        satLayer.BackgroundColor3 = Color3.fromHSV(hue,1,1)
        satGrad.Color = ColorSequence.new(Color3.fromHSV(hue,1,1), Color3.fromHSV(hue,1,1))
        updateAccentColor()
    end

    function updateAccentColor()
        accentColor = Color3.fromHSV(hue, s, v)
        hexLabel.Text = "#" .. Color3ToHex(accentColor)
        r,g,b = math.floor(accentColor.R*255), math.floor(accentColor.G*255), math.floor(accentColor.B*255)
        rgbLabel.Text = r..","..g..","..b
        OrionLib.Themes.Custom.Stroke = accentColor
        ApplyTheme()
    end

    hitDragging = false
    AddConnection(hitBoxSlider.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hitDragging = true
            updateHit(input)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if hitDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateHit(input)
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            hitDragging = false
        end
    end)

    function updateHit(input)
        local inputPos = Vector2.new(input.Position.X, input.Position.Y)
        local mousePos = inputPos - hitBoxSlider.AbsolutePosition
        local x = math.clamp(mousePos.X / hitBoxSlider.AbsoluteSize.X, 0, 1)
        bloomS = x
        hitDot.Position = UDim2.new(x, 0, 0.5, 0)
        bloomColor = Color3.fromHSV(bloomHue, bloomS, bloomV)
        OrionLib.Themes.Custom.Bloom = bloomColor
        ApplyTheme()
    end

    mainPickerWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 250)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = mainPickerWrapper
    mainPickerWrapper.Parent = themeTab.Container
    mainPickerWrapper.Visible = false

    mainLabel = AddThemeObject(SetProps(MakeElement("Label", "Background", 14), {
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 10, 0, 10),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    mainLabel.Parent = mainPickerWrapper

    mainSvBox = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 100),
        Position = UDim2.new(0, 10, 0, 35)
    })
    mainSvBox.Parent = mainPickerWrapper
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = mainSvBox
    MakeElement("Corner", 4).Parent = mainSvBox

    mainWhiteLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.new(1,1,1)
    })
    mainWhiteLayer.Parent = mainSvBox
    MakeElement("Corner", 4).Parent = mainWhiteLayer

    mainSatLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundTransparency = 0,
        BackgroundColor3 = Color3.fromHSV(mainHue,1,1)
    })
    mainSatLayer.Parent = mainSvBox
    mainSatGrad = Create("UIGradient", {
        Rotation = 0,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 0)
        }),
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromHSV(mainHue,1,1)),
            ColorSequenceKeypoint.new(1, Color3.fromHSV(mainHue,1,1))
        })
    })
    mainSatGrad.Parent = mainSatLayer
    MakeElement("Corner", 4).Parent = mainSatLayer

    mainValLayer = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.new(0,0,0)
    })
    mainValLayer.Parent = mainSvBox
    mainValGrad = Create("UIGradient", {
        Rotation = 90,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 0)
        })
    })
    mainValGrad.Parent = mainValLayer
    MakeElement("Corner", 4).Parent = mainValLayer

    mainSvDot = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,10,0,10),
        AnchorPoint = Vector2.new(0.5,0.5),
        BackgroundColor3 = Color3.new(1,1,1),
        ZIndex = 2
    })
    mainSvDot.Parent = mainSvBox
    MakeElement("Corner", 1).Parent = mainSvDot
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = mainSvDot
    mainSvDot.Position = UDim2.new(mainS, 0, 1-mainV, 0)

    mainHueSlider = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 8),
        Position = UDim2.new(0, 10, 0, 145)
    })
    mainHueSlider.Parent = mainPickerWrapper
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = mainHueSlider
    MakeElement("Corner", 4).Parent = mainHueSlider

    mainHueGrad = Create("UIGradient", {
        Rotation = 0,
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
        })
    })
    mainHueGrad.Parent = mainHueSlider

    mainHueDot = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,12,0,12),
        AnchorPoint = Vector2.new(0.5,0.5),
        BackgroundColor3 = Color3.new(1,1,1),
        ZIndex = 2,
        Position = UDim2.new(mainHue, 0, 0.5, 0)
    })
    mainHueDot.Parent = mainHueSlider
    MakeElement("Corner", 1).Parent = mainHueDot
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = mainHueDot

    mainHexWrapper = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 160)
    })
    mainHexWrapper.Parent = mainPickerWrapper

    mainHexLabel = AddThemeObject(SetProps(MakeElement("Label", "#" .. Color3ToHex(mainColor), 13), {
        Size = UDim2.new(1, -30, 1, 0),
        Font = Enum.Font.Gotham
    }), "Text")
    mainHexLabel.Parent = mainHexWrapper

    mainCopyBtn = copyBtn:Clone()
    mainCopyBtn.Parent = mainHexWrapper

    AddConnection(mainCopyBtn.MouseButton1Click, function()
        setclipboard(mainHexLabel.Text)
        OrionLib:MakeNotification({
            Name = "Copied",
            Content = "Hex code copied to clipboard!",
            Time = 3
        })
    end)

    mainRgbWrapper = SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 185)
    })
    mainRgbWrapper.Parent = mainPickerWrapper

    mainR,mainG,mainB = math.floor(mainColor.R*255), math.floor(mainColor.G*255), math.floor(mainColor.B*255)
    mainRgbLabel = AddThemeObject(SetProps(MakeElement("Label", mainR..","..mainG..","..mainB, 13), {
        Size = UDim2.new(1, -30,1,0),
        Font = Enum.Font.Gotham
    }), "Text")
    mainRgbLabel.Parent = mainRgbWrapper

    mainRgbCopyBtn = copyBtn:Clone()
    mainRgbCopyBtn.Parent = mainRgbWrapper

    AddConnection(mainRgbCopyBtn.MouseButton1Click, function()
        setclipboard(mainRgbLabel.Text)
        OrionLib:MakeNotification({
            Name = "Copied",
            Content = "RGB code copied to clipboard!",
            Time = 3
        })
    end)

    mainSvDragging = false
    AddConnection(mainSvBox.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            mainSvDragging = true
            updateMainSV(input)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if mainSvDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateMainSV(input)
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            mainSvDragging = false
        end
    end)

    function updateMainSV(input)
        local inputPos = Vector2.new(input.Position.X, input.Position.Y)
        local mousePos = inputPos - mainSvBox.AbsolutePosition
        local x = math.clamp(mousePos.X / mainSvBox.AbsoluteSize.X, 0, 1)
        local y = math.clamp(mousePos.Y / mainSvBox.AbsoluteSize.Y, 0, 1)
        mainS = x
        mainV = 1 - y
        mainSvDot.Position = UDim2.new(x, 0, y, 0)
        updateMainColor()
    end

    mainHueDragging = false
    AddConnection(mainHueSlider.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            mainHueDragging = true
            updateMainHue(input)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if mainHueDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateMainHue(input)
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            mainHueDragging = false
        end
    end)

    function updateMainHue(input)
        local inputPos = Vector2.new(input.Position.X, input.Position.Y)
        local mousePos = inputPos - mainHueSlider.AbsolutePosition
        local x = math.clamp(mousePos.X / mainHueSlider.AbsoluteSize.X, 0, 1)
        mainHue = x
        mainHueDot.Position = UDim2.new(x, 0, 0.5, 0)
        mainSatLayer.BackgroundColor3 = Color3.fromHSV(mainHue,1,1)
        mainSatGrad.Color = ColorSequence.new(Color3.fromHSV(mainHue,1,1), Color3.fromHSV(mainHue,1,1))
        updateMainColor()
    end

    function updateMainColor()
        mainColor = Color3.fromHSV(mainHue, mainS, mainV)
        mainHexLabel.Text = "#" .. Color3ToHex(mainColor)
        mainR,mainG,mainB = math.floor(mainColor.R*255), math.floor(mainColor.G*255), math.floor(mainColor.B*255)
        mainRgbLabel.Text = mainR..","..mainG..","..mainB
        OrionLib.Themes.Custom.Main = mainColor
        ApplyTheme()
    end

    videoWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 160)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = videoWrapper
    videoWrapper.Parent = themeTab.Container
    videoWrapper.Visible = false

    videoLabel = AddThemeObject(SetProps(MakeElement("Label", "Play Video Background", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    videoLabel.Parent = videoWrapper

    videoPlayLocationWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -20, 0, 24),
        Position = UDim2.new(0, 10, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = videoPlayLocationWrapper
    videoPlayLocationWrapper.Parent = videoWrapper

    videoPlayLocationButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(1, 0, 1, 0)
    }), "Main")
    videoPlayLocationButton.Parent = videoPlayLocationWrapper

    videoPlayLocationText = AddThemeObject(SetProps(MakeElement("Label", "Both", 13), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamSemibold
    }), "Text")
    videoPlayLocationText.Parent = videoPlayLocationButton

    videoPlayLocationList = AddThemeObject(Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 2),
        Visible = false,
        ScrollBarThickness = 4,
        ZIndex = 50
    }), "Second")
    videoPlayLocationList.Parent = videoPlayLocationButton

    videoPlayListLayout = Create("UIListLayout", {
        Padding = UDim.new(0, 2)
    })
    videoPlayListLayout.Parent = videoPlayLocationList

    MakeElement("Padding", 2, 2, 2, 2).Parent = videoPlayLocationList
    MakeElement("Corner", 4).Parent = videoPlayLocationList
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = videoPlayLocationList

    videoLocationOptions = {"Main Window", "Sub Window", "Both"}
    selectedPlayLocation = "Both"
    videoLocationToggled = false

    for _, opt in ipairs(videoLocationOptions) do
        optBtn = AddThemeObject(Create("TextButton", {
            Name = opt,
            Size = UDim2.new(1, 0, 0, 24),
            Text = "",
            ZIndex = 51
        }), "Main")
        optBtn.Parent = videoPlayLocationList
        MakeElement("Corner", 4).Parent = optBtn

        optLabel = AddThemeObject(Create("TextLabel", {
            Text = opt,
            Size = UDim2.new(1, -8, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 52
        }), "Text")
        optLabel.Parent = optBtn

        AddConnection(optBtn.MouseButton1Click, function()
            selectedPlayLocation = opt
            videoPlayLocationText.Text = opt
            videoLocationToggled = false
            TweenService:Create(videoPlayLocationList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            wait(0.2)
            videoPlayLocationList.Visible = false
            if not transparentEnabled then
                setDefaultTransparency(MainWindow)
                setDefaultTransparency(SettingsWindow)
            end
        end)
    end

    videoPlayDropdownUpdating = false
    AddConnection(videoPlayListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if videoPlayDropdownUpdating then return end
        videoPlayDropdownUpdating = true
        videoPlayLocationList.CanvasSize = UDim2.new(0, 0, 0, videoPlayListLayout.AbsoluteContentSize.Y + 4)
        videoPlayDropdownUpdating = false
    end)

    AddConnection(videoPlayLocationButton.MouseButton1Click, function()
        videoLocationToggled = not videoLocationToggled
        videoPlayLocationList.Visible = true
        targetH = videoLocationToggled and (#videoLocationOptions * 26) or 0
        TweenService:Create(videoPlayLocationList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, targetH)}):Play()
        if not videoLocationToggled then
            wait(0.2)
            videoPlayLocationList.Visible = false
        end
    end)

    videoUrlBox = AddThemeObject(Create("TextBox", {
        Size = UDim2.new(1, -20, 0, 24),
        Position = UDim2.new(0, 10, 0, 70),
        PlaceholderText = "Paste YouTube/GitHub/Roblox Asset ID",
        Font = Enum.Font.GothamBold,
        TextSize = 14
    }), "Main")
    videoUrlBox.Parent = videoWrapper

    videoPlayBtn = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, 120, 0, 24),
        Position = UDim2.new(0, 10, 0, 100)
    }), "Main")
    videoPlayBtn.Parent = videoWrapper

    videoPlayText = AddThemeObject(SetProps(MakeElement("Label", "Download & Play", 13), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamSemibold
    }), "Text")
    videoPlayText.Parent = videoPlayBtn

    videoStatusLabel = AddThemeObject(SetProps(MakeElement("Label", "", 12), {
        Size = UDim2.new(1, -20, 0, 12),
        Position = UDim2.new(0, 10, 0, 130),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    videoStatusLabel.Parent = videoWrapper

    rootFolder = "YouTubePlay"
    videoFolder = "YouTubePlay/Videos"
    downloadedLinksFile = "YouTubePlay/downloaded_links.txt"

    canWrite = writefile and getcustomasset and isfolder and makefolder and isfile and listfiles and delfile

    if canWrite then
        if not isfolder(rootFolder) then makefolder(rootFolder) end
        if not isfolder(videoFolder) then makefolder(videoFolder) end
        if not isfile(downloadedLinksFile) then writefile(downloadedLinksFile, "") end
    end

    videoBgFrame = Instance.new("VideoFrame")
    videoBgFrame.Size = UDim2.new(1, 0, 1, 0)
    videoBgFrame.Position = UDim2.new(0, 0, 0, 0)
    videoBgFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    videoBgFrame.Visible = false
    videoBgFrame.ZIndex = -1
    videoBgFrame.Parent = MainWindow

    settingsVideoBgFrame = Instance.new("VideoFrame")
    settingsVideoBgFrame.Size = UDim2.new(1, 0, 1, 0)
    settingsVideoBgFrame.Position = UDim2.new(0, 0, 0, 0)
    settingsVideoBgFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    settingsVideoBgFrame.Visible = false
    settingsVideoBgFrame.ZIndex = -1
    settingsVideoBgFrame.Parent = SettingsWindow

    thumbnailOverlay = Instance.new("ImageLabel")
    thumbnailOverlay.Size = UDim2.new(1, 0, 1, 0)
    thumbnailOverlay.Position = UDim2.new(0, 0, 0, 0)
    thumbnailOverlay.BackgroundTransparency = 1
    thumbnailOverlay.Image = ""
    thumbnailOverlay.Visible = false
    thumbnailOverlay.ScaleType = Enum.ScaleType.Fit
    thumbnailOverlay.Parent = videoBgFrame

    settingsThumbnailOverlay = Instance.new("ImageLabel")
    settingsThumbnailOverlay.Size = UDim2.new(1, 0, 1, 0)
    settingsThumbnailOverlay.Position = UDim2.new(0, 0, 0, 0)
    settingsThumbnailOverlay.BackgroundTransparency = 1
    settingsThumbnailOverlay.Image = ""
    settingsThumbnailOverlay.Visible = false
    settingsThumbnailOverlay.ScaleType = Enum.ScaleType.Fit
    settingsThumbnailOverlay.Parent = settingsVideoBgFrame

    currentMedia = nil

    function cleanupCurrentMedia()
        if currentMedia then
            if currentMedia:IsA("VideoFrame") then
                currentMedia:Pause()
                currentMedia.Video = ""
            elseif currentMedia:IsA("Sound") then
                currentMedia:Stop()
                currentMedia:Destroy()
            end
            currentMedia = nil
        end
        thumbnailOverlay.Image = ""
        settingsThumbnailOverlay.Image = ""
        videoBgFrame.Visible = false
        settingsVideoBgFrame.Visible = false
        videoBgFrame.Video = ""
        settingsVideoBgFrame.Video = ""
        thumbnailOverlay.Visible = false
        settingsThumbnailOverlay.Visible = false
        if not transparentEnabled then
            MainWindow.BackgroundTransparency = 0
            SettingsWindow.BackgroundTransparency = 0
        end
        updateBlur()
    end

    function logDownloadedLink(url)
        if canWrite and isfile(downloadedLinksFile) then
            local currentContent = readfile(downloadedLinksFile)
            if not currentContent:find(url, 1, true) then
                writefile(downloadedLinksFile, currentContent .. url .. "\n")
            end
        end
    end

    function extractFileName(url)
        return url:match(".+/([^/?#]+)") or url:match(".+/([^/]+)$") or ("mediafile_" .. string.sub(tostring(tick()), -5))
    end

    function detectMediaType(url)
        if url:match("youtu%.be/") or url:match("youtube%.com/watch") then
            return "YOUTUBE"
        elseif url:lower():match("%.mp3$") or url:match("^rbxassetid://%d+$") and url:match("audio") then
            return "MP3"
        elseif url:lower():match("%.mp4$") then
            return "MP4"
        elseif url:match("^rbxassetid://%d+$") then
            return "ROBLOX_ASSET"
        end
        return nil
    end

    function getDirectYouTubeUrl(videoId)
        local command = "https://youtu.be/" .. videoId .. " -f 'bestvideo[height<=360]+bestaudio/best[height<=360]' --get-url"
        local encodedCommand = HttpService:UrlEncode(command)
        local url = "https://ytdlp.online/stream?command=" .. encodedCommand
        local success, response = pcall(function()
            return game:HttpGet(url, true)
        end)
        if success then
            local directUrl = response:match("data: (https://[^\n ]+)")
            if directUrl then
                return directUrl
            end
        end
        return nil, "Failed to get direct video URL from service."
    end

    function setDefaultTransparency(window)
        if backgroundMode ~= "Video" then
            window.BackgroundTransparency = 0
            return
        end
        local isPlayingHere = false
        if window == MainWindow then
            isPlayingHere = (selectedPlayLocation == "Main Window" or selectedPlayLocation == "Both")
        elseif window == SettingsWindow then
            isPlayingHere = (selectedPlayLocation == "Sub Window" or selectedPlayLocation == "Both")
        end
        window.BackgroundTransparency = isPlayingHere and 1 or 0
    end

    function updateBlur()
        local blur = game.Lighting:FindFirstChild("GrokBlur")
        if blurEnabled and currentMedia then
            if not blur then
                blur = Instance.new("BlurEffect")
                blur.Name = "GrokBlur"
                blur.Size = 12
                blur.Parent = game.Lighting
            end
            blur.Enabled = true
        else
            if blur then
                blur:Destroy()
            end
        end
    end

    function playAsset(assetId, mediaTitle, mediaType)
        local playMain = (selectedPlayLocation == "Main Window" or selectedPlayLocation == "Both")
        local playSub = (selectedPlayLocation == "Sub Window" or selectedPlayLocation == "Both")
        if mediaType == "MP3" or mediaType == "ROBLOX_ASSET" and assetId:match("audio") then
            if playMain then
                thumbnailOverlay.Image = "rbxassetid://6034849503"
                thumbnailOverlay.Visible = true
            end
            if playSub then
                settingsThumbnailOverlay.Image = "rbxassetid://6034849503"
                settingsThumbnailOverlay.Visible = true
            end
            videoBgFrame.Visible = false
            settingsVideoBgFrame.Visible = false
            local sound = Instance.new("Sound", game.Players.LocalPlayer)
            sound.Name = "LoadedAudio"
            sound.SoundId = assetId
            sound.Volume = 0.5
            sound.Looped = false
            currentMedia = sound
            sound:Play()
            videoStatusLabel.Text = "Playing audio: " .. mediaTitle
        elseif mediaType == "MP4" or mediaType == "YOUTUBE" then
            thumbnailOverlay.Visible = false
            settingsThumbnailOverlay.Visible = false
            if playMain then
                videoBgFrame.Video = assetId
                videoBgFrame:Play()
                videoBgFrame.Visible = true
                if not transparentEnabled then MainWindow.BackgroundTransparency = 1 end
            else
                videoBgFrame.Visible = false
                if not transparentEnabled then MainWindow.BackgroundTransparency = 0 end
            end
            if playSub then
                settingsVideoBgFrame.Video = assetId
                settingsVideoBgFrame:Play()
                settingsVideoBgFrame.Visible = true
                if not transparentEnabled then SettingsWindow.BackgroundTransparency = 1 end
            else
                settingsVideoBgFrame.Visible = false
                if not transparentEnabled then SettingsWindow.BackgroundTransparency = 0 end
            end
            currentMedia = videoBgFrame
            videoStatusLabel.Text = "Playing video: " .. mediaTitle
        elseif mediaType == "ROBLOX_ASSET" and assetId:match("image") then
            if playMain then
                thumbnailOverlay.Image = assetId
                thumbnailOverlay.Visible = true
            end
            if playSub then
                settingsThumbnailOverlay.Image = assetId
                settingsThumbnailOverlay.Visible = true
            end
            videoBgFrame.Visible = false
            settingsVideoBgFrame.Visible = false
            videoStatusLabel.Text = "Displaying image: " .. mediaTitle
        end
        updateBlur()
    end

    AddConnection(videoPlayBtn.MouseButton1Click, function()
        local url = videoUrlBox.Text:gsub("%s", "")
        if url == "" then
            videoStatusLabel.Text = "Please paste a URL or Asset ID."
            return
        end

        cleanupCurrentMedia()
        videoStatusLabel.Text = "Detecting media type..."
        local mediaType = detectMediaType(url)

        if not mediaType then
            videoStatusLabel.Text = "Unsupported. Use YouTube, GitHub MP3/MP4, or rbxassetid://"
            return
        end

        local mediaTitle = extractFileName(url)
        local savePath = videoFolder .. "/" .. mediaTitle
        local thumbnailUrl = ""

        if isfile(savePath) then
            videoStatusLabel.Text = "Loading from cache: " .. mediaTitle .. "..."
            local success, assetId = pcall(getcustomasset, savePath)
            if success and assetId then
                playAsset(assetId, mediaTitle, mediaType)
                logDownloadedLink(url)
                return
            else
                videoStatusLabel.Text = "Cache corrupted. Re-downloading..."
                pcall(delfile, savePath)
                task.wait(0.5)
            end
        end

        if mediaType == "YOUTUBE" then
            videoStatusLabel.Text = "Fetching YouTube metadata..."
            local videoId = url:match("youtu%.be/([%w-_]+)") or url:match("v=([%w-_]+)")
            if not videoId then
                videoStatusLabel.Text = "Invalid YouTube URL"
                return
            end

            local infoUrl = "https://noembed.com/embed?url=https://youtu.be/" .. videoId
            local success, response = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(infoUrl, true))
            end)

            if not (success and response and response.title) then
                videoStatusLabel.Text = "Failed to get YouTube video info"
                return
            end

            mediaTitle = response.title:gsub("[^%w%s]", ""):gsub("%s", "_")
            savePath = videoFolder .. "/" .. mediaTitle .. ".mp4"
            thumbnailUrl = "https://img.youtube.com/vi/" .. videoId .. "/hqdefault.jpg"

            videoStatusLabel.Text = "Downloading thumbnail..."
            local thumbSuccess, thumbData = pcall(game.HttpGet, game, thumbnailUrl, true)
            if thumbSuccess then
                local thumbPath = videoFolder .. "/" .. mediaTitle .. "_thumb.jpg"
                writefile(thumbPath, thumbData)
                local assetId = getcustomasset(thumbPath)
                if playMain then thumbnailOverlay.Image = assetId thumbnailOverlay.Visible = true end
                if playSub then settingsThumbnailOverlay.Image = assetId settingsThumbnailOverlay.Visible = true end
            end

            videoStatusLabel.Text = "Fetching direct YouTube URL..."
            local directUrl, err = getDirectYouTubeUrl(videoId)
            if not directUrl then
                videoStatusLabel.Text = "Error: " .. err
                thumbnailOverlay.Image = ""
                settingsThumbnailOverlay.Image = ""
                return
            end
            url = directUrl
        elseif mediaType == "MP3" or mediaType == "MP4" then
            mediaTitle = extractFileName(url)
            savePath = videoFolder .. "/" .. mediaTitle
            thumbnailOverlay.Visible = false
            settingsThumbnailOverlay.Visible = false
        elseif mediaType == "ROBLOX_ASSET" then
            if url:match("image") then
                thumbnailOverlay.Image = url
                settingsThumbnailOverlay.Image = url
                thumbnailOverlay.Visible = true
                settingsThumbnailOverlay.Visible = true
            elseif url:match("audio") then
                thumbnailOverlay.Image = "rbxassetid://6034849503"
                settingsThumbnailOverlay.Image = "rbxassetid://6034849503"
                thumbnailOverlay.Visible = true
                settingsThumbnailOverlay.Visible = true
            end
            playAsset(url, "Roblox Asset", mediaType)
            return
        end

        videoStatusLabel.Text = "Downloading: " .. mediaTitle .. "..."
        local mediaSuccess, mediaData = pcall(game.HttpGet, game, url, true)

        if mediaSuccess and mediaData and #mediaData > 100 then
            local writeSuccess = pcall(writefile, savePath, mediaData)
            if not writeSuccess then
                videoStatusLabel.Text = "Error: Failed to save file to disk."
                return
            end

            logDownloadedLink(videoUrlBox.Text)
            local loadSuccess, assetId = pcall(getcustomasset, savePath)
            
            if loadSuccess and assetId then
                playAsset(assetId, mediaTitle, mediaType)
            else
                videoStatusLabel.Text = "Failed to load downloaded media. File may be invalid."
                pcall(delfile, savePath)
            end
        else
            videoStatusLabel.Text = "Failed to download media. Check link or network."
            thumbnailOverlay.Image = ""
            settingsThumbnailOverlay.Image = ""
        end
    end)

    blurWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = blurWrapper
    blurWrapper.Parent = themeTab.Container

    blurDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Blurs the video background.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    blurDescLabel.Parent = blurWrapper

    blurLabel = AddThemeObject(SetProps(MakeElement("Label", "Blur Mode", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    blurLabel.Parent = blurWrapper

    blurButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, elemSize, 0, elemSize),
        Position = UDim2.new(1, -(elemSize + 20), 0.5, -halfElem)
    }), "Main")
    blurButton.Parent = blurWrapper

    blurCheckbox = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    }), "Text")
    blurCheckbox.Parent = blurButton

    blurCheckLabel = AddThemeObject(Create("TextLabel", {
        Text = "",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 16
    }), "Text")
    blurCheckLabel.Parent = blurCheckbox

    blurCorner = MakeElement("Corner", 4)
    blurCorner.Parent = blurButton
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = blurButton

    blurEnabled = false

    function updateBlurToggle()
        if blurEnabled then
            blurCheckLabel.Text = "✓"
            blurButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Stroke
        else
            blurCheckLabel.Text = ""
            blurButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
        end
    end
    updateBlurToggle()

    AddConnection(blurButton.MouseButton1Click, function()
        blurEnabled = not blurEnabled
        updateBlurToggle()
        updateBlur()
    end)

    transparentToggleWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = transparentToggleWrapper
    transparentToggleWrapper.Parent = themeTab.Container

    transparentToggleDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Enable window transparency.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    transparentToggleDescLabel.Parent = transparentToggleWrapper

    transparentToggleLabel = AddThemeObject(SetProps(MakeElement("Label", "Transparent Mode", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    transparentToggleLabel.Parent = transparentToggleWrapper

    transparentButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, elemSize, 0, elemSize),
        Position = UDim2.new(1, -(elemSize + 20), 0.5, -halfElem)
    }), "Main")
    transparentButton.Parent = transparentToggleWrapper

    transparentCheckbox = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    }), "Text")
    transparentCheckbox.Parent = transparentButton

    transparentCheckLabel = AddThemeObject(Create("TextLabel", {
        Text = "",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 16
    }), "Text")
    transparentCheckLabel.Parent = transparentCheckbox

    transparentCorner = MakeElement("Corner", 4)
    transparentCorner.Parent = transparentButton
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = transparentButton

    transparentEnabled = false

    function updateTransparentToggle()
        if transparentEnabled then
            transparentCheckLabel.Text = "✓"
            transparentButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Stroke
        else
            transparentCheckLabel.Text = ""
            transparentButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
        end
    end
    updateTransparentToggle()

    AddConnection(transparentButton.MouseButton1Click, function()
        transparentEnabled = not transparentEnabled
        updateTransparentToggle()
        if transparentEnabled then
            applyTransparent(transValue)
        else
            setDefaultTransparency(MainWindow)
            setDefaultTransparency(SettingsWindow)
        end
    end)

    windowOptionWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = windowOptionWrapper
    windowOptionWrapper.Parent = themeTab.Container

    windowOptionDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Choose window for settings.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    windowOptionDescLabel.Parent = windowOptionWrapper

    windowOptionLabel = AddThemeObject(SetProps(MakeElement("Label", "Window Option", 14), {
        Size = UDim2.new(1, -130, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    windowOptionLabel.Parent = windowOptionWrapper

    windowOptionButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, 120, 0, 24),
        Position = UDim2.new(1, -130, 0.5, -12)
    }), "Main")
    windowOptionButton.Parent = windowOptionWrapper

    windowOptionText = AddThemeObject(SetProps(MakeElement("Label", "Main Window", 13), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamSemibold
    }), "Text")
    windowOptionText.Parent = windowOptionButton

    windowOptionList = AddThemeObject(Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 2),
        Visible = false,
        ScrollBarThickness = 4,
        ZIndex = 50
    }), "Second")
    windowOptionList.Parent = windowOptionButton

    windowListLayout = Create("UIListLayout", {
        Padding = UDim.new(0, 2)
    })
    windowListLayout.Parent = windowOptionList

    MakeElement("Padding", 2, 2, 2, 2).Parent = windowOptionList
    MakeElement("Corner", 4).Parent = windowOptionList
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = windowOptionList

    transparentOptions = {"Main Window", "Sub Window", "Both"}
    selectedTransparentWindow = "Main Window"
    windowToggled = false

    for _, opt in ipairs(transparentOptions) do
        optBtn = AddThemeObject(Create("TextButton", {
            Name = opt,
            Size = UDim2.new(1, 0, 0, 24),
            Text = "",
            ZIndex = 51
        }), "Main")
        optBtn.Parent = windowOptionList
        MakeElement("Corner", 4).Parent = optBtn

        optLabel = AddThemeObject(Create("TextLabel", {
            Text = opt,
            Size = UDim2.new(1, -8, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            BackgroundTransparency = 1,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 52
        }), "Text")
        optLabel.Parent = optBtn

        AddConnection(optBtn.MouseButton1Click, function()
            selectedTransparentWindow = opt
            selectedPlayLocation = opt
            selectedWindow = opt
            windowOptionText.Text = opt
            windowToggled = false
            TweenService:Create(windowOptionList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            wait(0.2)
            windowOptionList.Visible = false
            if transparentEnabled then
                applyTransparent(transValue)
            end
            if selectedWindow == "Main Window" then
                currentResizeTarget = MainWindow
                currentOriginalSize = originalSize
                minHeight = 200
                maxHeight = 800
                minWidth = 300
                maxWidth = 1200
                originalWidth = 615
                originalHeight = 380
            else
                currentResizeTarget = SettingsWindow
                currentOriginalSize = originalSettingsSize
                minHeight = 200
                maxHeight = 600
                minWidth = 300
                maxWidth = 800
                originalWidth = 500
                originalHeight = 400
            end
            minScale = math.max(minWidth / originalWidth, minHeight / originalHeight)
            maxScale = math.min(maxWidth / originalWidth, maxHeight / originalHeight)
            updateResizeText()
            updateResizeSlider()
            if not transparentEnabled then
                setDefaultTransparency(MainWindow)
                setDefaultTransparency(SettingsWindow)
            end
        end)
    end

    windowDropdownUpdating = false
    AddConnection(windowListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if windowDropdownUpdating then return end
        windowDropdownUpdating = true
        windowOptionList.CanvasSize = UDim2.new(0, 0, 0, windowListLayout.AbsoluteContentSize.Y + 4)
        windowDropdownUpdating = false
    end)

    AddConnection(windowOptionButton.MouseButton1Click, function()
        windowToggled = not windowToggled
        windowOptionList.Visible = true
        targetH = windowToggled and (#transparentOptions * 26) or 0
        TweenService:Create(windowOptionList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, targetH)}):Play()
        if not windowToggled then
            wait(0.2)
            windowOptionList.Visible = false
        end
    end)

    transparentSliderWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = transparentSliderWrapper
    transparentSliderWrapper.Parent = themeTab.Container

    transparentSliderDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Adjust transparency level.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    transparentSliderDescLabel.Parent = transparentSliderWrapper

    transparentSliderLabel = AddThemeObject(SetProps(MakeElement("Label", "Transparency", 14), {
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    transparentSliderLabel.Parent = transparentSliderWrapper

    transparentSliderBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0.5, -10, 0, barHeight),
        Position = UDim2.new(0.5, 5, 0.5, -halfBar)
    }), "Second")
    transparentSliderBar.Parent = transparentSliderWrapper

    transparentBarCorner = MakeElement("Corner", barHeight / 2)
    transparentBarCorner.Parent = transparentSliderBar
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = transparentSliderBar

    transparentFillBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0, 0, 1, 0)
    }), "Stroke")
    transparentFillCorner = MakeElement("Corner", barHeight / 2)
    transparentFillCorner.Parent = transparentFillBar
    transparentFillBar.Parent = transparentSliderBar

    transparentKnob = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, knobSize, 0, knobSize),
        Position = UDim2.new(0, -halfKnob, 0.5, -halfKnob),
        AutoButtonColor = false
    }), "Text")
    transparentKnob.Parent = transparentSliderBar

    transparentKnobCorner = MakeElement("Corner", knobSize / 2)
    transparentKnobCorner.Parent = transparentKnob
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = transparentKnob

    transparentValueLabel = AddThemeObject(SetProps(MakeElement("Label", "0%", 12), {
        Size = UDim2.new(0, 40, 1, 0),
        Position = UDim2.new(1, 5, 0, 0),
        BackgroundTransparency = 1
    }), "Text")
    transparentValueLabel.Parent = transparentSliderBar

    transValue = 0
    transparentDragging = false

    AddConnection(transparentKnob.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            transparentDragging = true
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            transparentDragging = false
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if transparentDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local pos = Vector2.new(input.Position.X, input.Position.Y) - transparentSliderBar.AbsolutePosition
            percent = math.clamp(pos.X / transparentSliderBar.AbsoluteSize.X, 0, 1)
            transparentKnob.Position = UDim2.new(percent, -halfKnob, 0.5, -halfKnob)
            transparentFillBar.Size = UDim2.new(percent, 0, 1, 0)
            transValue = percent
            transparentValueLabel.Text = string.format("%d%%", percent * 100)
            if transparentEnabled then
                applyTransparent(transValue)
            end
        end
    end)

    function applyTransparent(value)
        local setMain = (selectedTransparentWindow == "Main Window" or selectedTransparentWindow == "Both")
        local setSub = (selectedTransparentWindow == "Sub Window" or selectedTransparentWindow == "Both")
        if setMain then MainWindow.BackgroundTransparency = value end
        if setSub then SettingsWindow.BackgroundTransparency = value end
    end

    function round(num)
        return math.floor(num + 0.5)
    end

    resizeControls = AddThemeObject(SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = resizeControls
    resizeControls.Parent = themeTab.Container

    resizeList = Create("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        VerticalAlignment = Enum.VerticalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    resizeList.Parent = resizeControls

    minusBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0,30,0,30)
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://18750416283"), {
            Size = UDim2.new(0,24,0,24),
            Position = UDim2.new(0.5,-12,0.5,-12)
        }), "Text")
    })
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = minusBtn
    MakeElement("Corner", 4).Parent = minusBtn
    minusBtn.Parent = resizeControls

    sizeTextbox = AddThemeObject(Create("TextBox", {
        Size = UDim2.new(0,80,0,24),
        Text = originalSize.X.Offset .. "x" .. originalSize.Y.Offset,
        Font = Enum.Font.GothamBold,
        TextSize = 14
    }), "Main")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = sizeTextbox
    MakeElement("Corner", 4).Parent = sizeTextbox
    sizeTextbox.Parent = resizeControls

    plusBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0,30,0,30)
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://134761139059108"), {
            Size = UDim2.new(0,24,0,24),
            Position = UDim2.new(0.5,-12,0.5,-12)
        }), "Text")
    })
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = plusBtn
    MakeElement("Corner", 4).Parent = plusBtn
    plusBtn.Parent = resizeControls

    resizeSliderBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0,150,0, barHeight)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = resizeSliderBar
    MakeElement("Corner", barHeight / 2).Parent = resizeSliderBar
    resizeSliderBar.Parent = resizeControls

    resizeFillBar = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(0.5, 0, 1, 0)
    }), "Stroke")
    MakeElement("Corner", barHeight / 2).Parent = resizeFillBar
    resizeFillBar.Parent = resizeSliderBar

    resizeKnob = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, knobSize, 0, knobSize),
        Position = UDim2.new(0.5, -halfKnob, 0.5, -halfKnob),
        AutoButtonColor = false
    }), "Text")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = resizeKnob
    MakeElement("Corner", knobSize / 2).Parent = resizeKnob
    resizeKnob.Parent = resizeSliderBar

    resetBtn = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0,60,0,30)
    }), "Main")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = resetBtn
    MakeElement("Corner", 4).Parent = resetBtn
    resetBtn.Parent = resizeControls

    resetLabel = AddThemeObject(SetProps(MakeElement("Label", "Reset", 14), {
        Size = UDim2.new(1,0,1,0),
        Font = Enum.Font.GothamBold
    }), "Text")
    resetLabel.Parent = resetBtn

    currentResizeTarget = MainWindow
    currentOriginalSize = originalSize
    minHeight = 200
    maxHeight = 800
    minWidth = 300
    maxWidth = 1200
    originalWidth = originalSize.X.Offset
    originalHeight = originalSize.Y.Offset
    minScale = math.max(minWidth / originalWidth, minHeight / originalHeight)
    maxScale = math.min(maxWidth / originalWidth, maxHeight / originalHeight)

    function updateResizeText()
        currentSize = currentResizeTarget.Size
        sizeTextbox.Text = currentSize.X.Offset .. "x" .. currentSize.Y.Offset
    end

    function updateResizeSlider()
        currentSize = currentResizeTarget.Size
        currentScale = currentSize.Y.Offset / originalHeight
        percent = math.clamp((currentScale - minScale) / (maxScale - minScale), 0, 1)
        resizeKnob.Position = UDim2.new(percent, -halfKnob, 0.5, -halfKnob)
        resizeFillBar.Size = UDim2.new(percent, 0, 1, 0)
    end

    tweenInfoResize = TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

    AddConnection(minusBtn.MouseButton1Click, function()
        currentSize = currentResizeTarget.Size
        currentScale = currentSize.Y.Offset / originalHeight
        newScale = math.clamp(currentScale - 0.05, minScale, maxScale)
        newWidth = round(originalWidth * newScale)
        newHeight = round(originalHeight * newScale)
        newSize = UDim2.new(0, newWidth, 0, newHeight)
        TweenService:Create(currentResizeTarget, tweenInfoResize, {Size = newSize}):Play()
        if selectedWindow == "Main Window" then
            mainWidth = newWidth
            mainHeight = newHeight
        else
            settingsWidth = newWidth
            settingsHeight = newHeight
        end
        updateResizeText()
        updateResizeSlider()
    end)

    AddConnection(plusBtn.MouseButton1Click, function()
        currentSize = currentResizeTarget.Size
        currentScale = currentSize.Y.Offset / originalHeight
        newScale = math.clamp(currentScale + 0.05, minScale, maxScale)
        newWidth = round(originalWidth * newScale)
        newHeight = round(originalHeight * newScale)
        newSize = UDim2.new(0, newWidth, 0, newHeight)
        TweenService:Create(currentResizeTarget, tweenInfoResize, {Size = newSize}):Play()
        if selectedWindow == "Main Window" then
            mainWidth = newWidth
            mainHeight = newHeight
        else
            settingsWidth = newWidth
            settingsHeight = newHeight
        end
        updateResizeText()
        updateResizeSlider()
    end)

    AddConnection(resetBtn.MouseButton1Click, function()
        resetTween = TweenService:Create(currentResizeTarget, tweenInfoResize, {Size = currentOriginalSize}):Play()
        spawn(function()
            resetTween.Completed:Wait()
            if selectedWindow == "Main Window" then
                mainWidth = currentOriginalSize.X.Offset
                mainHeight = currentOriginalSize.Y.Offset
            else
                settingsWidth = currentOriginalSize.X.Offset
                settingsHeight = currentOriginalSize.Y.Offset
            end
        end)
        updateResizeText()
        updateResizeSlider()
    end)

    sliderDragging = false
    AddConnection(resizeKnob.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            sliderDragging = true
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            sliderDragging = false
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if sliderDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local pos = Vector2.new(input.Position.X, input.Position.Y) - resizeSliderBar.AbsolutePosition
            percent = math.clamp(pos.X / resizeSliderBar.AbsoluteSize.X, 0, 1)
            scale = minScale + (maxScale - minScale) * percent
            newWidth = round(originalWidth * scale)
            newHeight = round(originalHeight * scale)
            newSize = UDim2.new(0, newWidth, 0, newHeight)
            TweenService:Create(currentResizeTarget, tweenInfoResize, {Size = newSize}):Play()
            if selectedWindow == "Main Window" then
                mainWidth = newWidth
                mainHeight = newHeight
            else
                settingsWidth = newWidth
                settingsHeight = newHeight
            end
            updateResizeText()
        end
    end)

    AddConnection(sizeTextbox.FocusLost, function(enterPressed)
        if enterPressed then
            text = sizeTextbox.Text
            w, h = text:match("(%d+)x(%d+)")
            if w and h then
                w = math.clamp(tonumber(w), minWidth, maxWidth)
                h = math.clamp(tonumber(h), minHeight, maxHeight)
                newSize = UDim2.new(0, w, 0, h)
                TweenService:Create(currentResizeTarget, tweenInfoResize, {Size = newSize}):Play()
                if selectedWindow == "Main Window" then
                    mainWidth = w
                    mainHeight = h
                else
                    settingsWidth = w
                    settingsHeight = h
                end
                updateResizeText()
                updateResizeSlider()
            end
        end
    end)

    anonymousWrapper = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), {
        Size = UDim2.new(1, -16, 0, 40)
    }), "Second")
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = anonymousWrapper
    anonymousWrapper.Parent = privacyTab.Container

    anonymousDescLabel = AddThemeObject(SetProps(MakeElement("Label", "Hide your username and avatar for privacy.", 12), {
        Size = UDim2.new(1, -50, 0, 12),
        Position = UDim2.new(0, 10, 0, 25),
        Font = Enum.Font.Gotham,
        BackgroundTransparency = 1
    }), "TextDark")
    anonymousDescLabel.Parent = anonymousWrapper

    anonymousLabel = AddThemeObject(SetProps(MakeElement("Label", "Anonymous Mode", 14), {
        Size = UDim2.new(1, -50, 0, 30),
        Position = UDim2.new(0, 10, 0, 5),
        Font = Enum.Font.GothamSemibold
    }), "Text")
    anonymousLabel.Parent = anonymousWrapper

    anonymousButton = AddThemeObject(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0, elemSize, 0, elemSize),
        Position = UDim2.new(1, -(elemSize + 20), 0.5, -halfElem)
    }), "Main")
    anonymousButton.Parent = anonymousWrapper

    anonymousCheckbox = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    }), "Text")
    anonymousCheckbox.Parent = anonymousButton

    anonymousCheckLabel = AddThemeObject(Create("TextLabel", {
        Text = "",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 16
    }), "Text")
    anonymousCheckLabel.Parent = anonymousCheckbox

    anonymousCorner = MakeElement("Corner", 4)
    anonymousCorner.Parent = anonymousButton
    AddThemeObject(MakeElement("Stroke"), "Stroke").Parent = anonymousButton

    function updateAnonymousToggle()
        if anonymous then
            anonymousCheckLabel.Text = "✓"
            anonymousButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Stroke
        else
            anonymousCheckLabel.Text = ""
            anonymousButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main
        end
    end
    updateAnonymousToggle()

    AddConnection(anonymousButton.MouseButton1Click, function()
        anonymous = not anonymous
        updateAnonymousToggle()
        updatePlayerInfo()
    end)

    infoLabel = AddThemeObject(SetProps(MakeElement("Label", "This is the Info tab.\nOrion Library\nBuilt with care.", 14), {
        Size = UDim2.new(1, -20, 0, 100),
        Position = UDim2.new(0, 10, 0, 10),
        TextWrapped = true,
        Font = Enum.Font.GothamSemibold
    }), "TextDark")
    infoLabel.Parent = infoTab.Container

    function openSettingsToTab(tab)
        if not settingsVisible then
            SettingsWindow.Visible = true
            TweenService:Create(SettingsWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Size = UDim2.new(0, settingsWidth, 0, settingsHeight)}):Play()
            settingsVisible = true
        end
        if not sideBarVisible then
            sideBarVisible = true
            TweenService:Create(SettingsSideTabBar, sideTweenInfo, {Size = UDim2.new(0, 150, 1, -40)}):Play()
            TweenService:Create(SettingsContent, sideTweenInfo, {Position = UDim2.new(0, 150, 0, 40), Size = UDim2.new(1, -150, 1, -40)}):Play()
            ToggleSideBtn.Ico.Image = "rbxassetid://3173271667"
            SettingsSideTabBar.Visible = true
        end
        SelectSettingsTab(tab)
    end

    AddConnection(ThemesBtn.MouseButton1Up, function()
        openSettingsToTab(themeTab)
    end)

    AddConnection(PrivacyBtn.MouseButton1Up, function()
        openSettingsToTab(privacyTab)
    end)

    AddConnection(SettingsCloseBtn.MouseButton1Up, function()
        if settingsVisible then
            TweenService:Create(SettingsWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Size = UDim2.new(0, settingsWidth, 0, 0)}):Play()
            wait(0.3)
            SettingsWindow.Visible = false
            settingsVisible = false
        end
    end)

    AddConnection(SettingsMinimizeBtn.MouseButton1Up, function()
        settingsMinimized = not settingsMinimized
        if settingsMinimized then
            SettingsWindow.ClipsDescendants = true
            SettingsSideTabBar.Visible = false
            SettingsTopBarLine.Visible = false
            SettingsMinimizeBtn.Ico.Image = "rbxassetid://7072720870"
            TweenService:Create(SettingsWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, settingsWidth, 0, 40)}):Play()
            wait(0.1)
            SettingsContent.Visible = false
        else
            TweenService:Create(SettingsWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, settingsWidth, 0, settingsHeight)}):Play()
            SettingsMinimizeBtn.Ico.Image = "rbxassetid://7072719338"
            wait(0.02)
            SettingsWindow.ClipsDescendants = false
            SettingsSideTabBar.Visible = true
            SettingsContent.Visible = true
            SettingsTopBarLine.Visible = true
        end
    end)

    ResizeGrip = SetChildren(SetProps(MakeElement("Button"), {
        Parent = MainWindow,
        AnchorPoint = Vector2.new(1,1),
        Position = UDim2.new(1,0,1,0),
        Size = UDim2.new(0,30,0,30),
        BackgroundTransparency = 1,
        ZIndex = 10
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://6153965696"), {
            Size = UDim2.new(0,20,0,20),
            Position = UDim2.new(0.5,-10,0.5,-10)
        }), "Text")
    })

    MakeShineOnHover(ResizeGrip, ResizeGrip:FindFirstChild("ImageLabel"))

    resizing = false
    startPos = nil
    startSize = nil

    AddConnection(ResizeGrip.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = true
            startPos = input.Position
            startSize = MainWindow.Size
            resizeOverlay.BackgroundTransparency = 1
            resizeOverlay.Visible = true
            TweenService:Create(resizeOverlay, TweenInfo.new(0.3), {BackgroundTransparency = 0.5}):Play()
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = false
            local hideTween = TweenService:Create(resizeOverlay, TweenInfo.new(0.3), {BackgroundTransparency = 1})
            hideTween:Play()
            hideTween.Completed:Connect(function()
                resizeOverlay.Visible = false
            end)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            delta = input.Position - startPos
            newWidth = math.clamp(startSize.X.Offset + delta.X, minWidth, maxWidth)
            newHeight = math.clamp(startSize.Y.Offset + delta.Y, minHeight, maxHeight)
            newSize = UDim2.new(0, newWidth, 0, newHeight)
            TweenService:Create(MainWindow, TweenInfo.new(0.1), {Size = newSize}):Play()
            mainWidth = newWidth
            mainHeight = newHeight
        end
    end)

    SettingsResizeGrip = SetChildren(SetProps(MakeElement("Button"), {
        Parent = SettingsWindow,
        AnchorPoint = Vector2.new(1,1),
        Position = UDim2.new(1,0,1,0),
        Size = UDim2.new(0,30,0,30),
        BackgroundTransparency = 1,
        ZIndex = 10
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://6153965696"), {
            Size = UDim2.new(0,20,0,20),
            Position = UDim2.new(0.5,-10,0.5,-10)
        }), "Text")
    })

    MakeShineOnHover(SettingsResizeGrip, SettingsResizeGrip:FindFirstChild("ImageLabel"))

    settingsResizing = false
    settingsStartPos = nil
    settingsStartSize = nil

    AddConnection(SettingsResizeGrip.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            settingsResizing = true
            settingsStartPos = input.Position
            settingsStartSize = SettingsWindow.Size
            settingsResizeOverlay.BackgroundTransparency = 1
            settingsResizeOverlay.Visible = true
            TweenService:Create(settingsResizeOverlay, TweenInfo.new(0.3), {BackgroundTransparency = 0.5}):Play()
        end
    end)

    AddConnection(UserInputService.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            settingsResizing = false
            local hideTween = TweenService:Create(settingsResizeOverlay, TweenInfo.new(0.3), {BackgroundTransparency = 1})
            hideTween:Play()
            hideTween.Completed:Connect(function()
                settingsResizeOverlay.Visible = false
            end)
        end
    end)

    AddConnection(UserInputService.InputChanged, function(input)
        if settingsResizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            delta = input.Position - settingsStartPos
            newWidth = math.clamp(settingsStartSize.X.Offset + delta.X, minWidth, maxWidth)
            newHeight = math.clamp(settingsStartSize.Y.Offset + delta.Y, minHeight, maxHeight)
            newSize = UDim2.new(0, newWidth, 0, newHeight)
            TweenService:Create(SettingsWindow, TweenInfo.new(0.1), {Size = newSize}):Play()
            settingsWidth = newWidth
            settingsHeight = newHeight
        end
    end)

    function addScrollSupport(scrollFrame, isHorizontal)
        local scrollPos = 0
        local scrollSpeed = 80

        local function isMouseOverFrame(frame)
            local mousePos = UserInputService:GetMouseLocation()
            local absPos = frame.AbsolutePosition
            local absSize = frame.AbsoluteSize
            return mousePos.X >= absPos.X and mousePos.X <= absPos.X + absSize.X and
                   mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y + absSize.Y
        end

        AddConnection(UserInputService.InputChanged, function(input)
            if isMouseOverFrame(scrollFrame) or UserInputService.TouchEnabled then
                local max_scroll
                if isHorizontal then
                    max_scroll = math.max(0, scrollFrame.CanvasSize.X.Offset - scrollFrame.AbsoluteSize.X)
                    if input.UserInputType == Enum.UserInputType.MouseWheel then
                        scrollPos = math.clamp(scrollPos - input.Position.Z * scrollSpeed, 0, max_scroll)
                        scrollFrame.CanvasPosition = Vector2.new(scrollPos, 0)
                    elseif input.UserInputType == Enum.UserInputType.Touch and input.UserInputState == Enum.UserInputState.Change then
                        scrollPos = math.clamp(scrollPos - input.Delta.X * 1.5, 0, max_scroll)
                        scrollFrame.CanvasPosition = Vector2.new(scrollPos, 0)
                    end
                else
                    max_scroll = math.max(0, scrollFrame.CanvasSize.Y.Offset - scrollFrame.AbsoluteSize.Y)
                    if input.UserInputType == Enum.UserInputType.MouseWheel then
                        scrollPos = math.clamp(scrollPos - input.Position.Z * scrollSpeed, 0, max_scroll)
                        scrollFrame.CanvasPosition = Vector2.new(0, scrollPos)
                    elseif input.UserInputType == Enum.UserInputType.Touch and input.UserInputState == Enum.UserInputState.Change then
                        scrollPos = math.clamp(scrollPos - input.Delta.Y * 1.5, 0, max_scroll)
                        scrollFrame.CanvasPosition = Vector2.new(0, scrollPos)
                    end
                end
            end
        end)
    end

    addScrollSupport(TabHolder, false)
    addScrollSupport(SettingsSideTabHolder, false)
    addScrollSupport(themeTab.Container, false)
    addScrollSupport(privacyTab.Container, false)
    addScrollSupport(infoTab.Container, false)
    addScrollSupport(TopTabHolder, true)

    resizeOverlay = Create("Frame", {
        Parent = MainWindow,
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.fromRGB(0,0,0),
        BackgroundTransparency = 0.5,
        Visible = false,
        ZIndex = 100
    })

    resizeImage = Create("ImageLabel", {
        Parent = resizeOverlay,
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5,0,0.5,0),
        Size = UDim2.new(0.5,0,0.5,0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://97880448391331",
        ScaleType = Enum.ScaleType.Fit
    })

    settingsResizeOverlay = Create("Frame", {
        Parent = SettingsWindow,
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.fromRGB(0,0,0),
        BackgroundTransparency = 0.5,
        Visible = false,
        ZIndex = 100
    })

    settingsResizeImage = Create("ImageLabel", {
        Parent = settingsResizeOverlay,
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5,0,0.5,0),
        Size = UDim2.new(0.5,0,0.5,0),
        BackgroundTransparency = 1,
        Image = "rbxassetid://97880448391331",
        ScaleType = Enum.ScaleType.Fit
    })

    if WindowConfig.playid and WindowConfig.playid ~= "" then
        local sound = Instance.new("Sound")
        sound.SoundId = WindowConfig.playid
        sound.Parent = Orion
        sound:Play()
    end

    local HapticService = game:GetService("HapticService")
    if WindowConfig.Vibrate.Enabled then
        spawn(function()
            if HapticService:IsVibrationSupported(Enum.UserInputType.Gamepad1) then
                HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, 1)
                task.wait(WindowConfig.Vibrate.Duration)
                HapticService:SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, 0)
            elseif HapticService:IsVibrationSupported(Enum.UserInputType.Touch) then
                HapticService:SetMotor(Enum.UserInputType.Touch, Enum.VibrationMotor.Large, 1)
                task.wait(WindowConfig.Vibrate.Duration)
                HapticService:SetMotor(Enum.UserInputType.Touch, Enum.VibrationMotor.Large, 0)
            end
        end)
    end


local HttpService = game:GetService("HttpService")

local function LoadSequence()
	local s, e = pcall(function()
		MainWindow.Visible = false

		local IntroHolder = Create("Frame", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			Parent = Orion
		})

		local IntroCanvas = Create("CanvasGroup", {
			GroupTransparency = 1,
			Parent = IntroHolder
		})

		local IntroScale = Create("UIScale", {
			Scale = 0.8,
			Parent = IntroHolder
		})

		local IntroList = Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 8),
			Parent = IntroHolder,
		})

		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Size = UDim2.new(0, 32, 0, 32),
			Parent = IntroHolder
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 24), {
			Size = UDim2.new(0,0,0,32),
			AutomaticSize = Enum.AutomaticSize.X,
			Font = Enum.Font.GothamBlack,
			TextYAlignment = Enum.TextYAlignment.Center,
			Parent = IntroHolder
		})

		local tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

		TweenService:Create(IntroScale, tweenInfo, {Scale = 1}):Play()
		TweenService:Create(IntroCanvas, tweenInfo, {GroupTransparency = 0}):Play()

		task.wait(tweenInfo.Time + 1.5)

		local outTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
		TweenService:Create(IntroScale, outTweenInfo, {Scale = 1.2}):Play()
		TweenService:Create(IntroCanvas, outTweenInfo, {GroupTransparency = 1}):Play()

		task.wait(outTweenInfo.Time)
		MainWindow.Visible = true
		UnlockMouse(true)
		if IntroHolder and IntroHolder.Parent then IntroHolder:Destroy() end
	end)
	if not s then
		warn("OrionLib Error: ", e)
		MainWindow.Visible = true
		UnlockMouse(true)
	end
end

MainWindow.Visible = false

local function proceedToLoad()
	if WindowConfig.DiscordEnabled and WindowConfig.DiscordInvite and writefile and isfile and not isfile("NewLibraryNotification1.txt") then
		local InviteCode = WindowConfig.DiscordInvite
		local http_req = (syn and syn.request) or (http and http.request) or http_request
		if http_req then
			http_req({
				Url = "http://127.0.0.1:6463/rpc?v=1",
				Method = "POST",
				Headers = {
					["Content-Type"] = "application/json",
					["Origin"] = "https://discord.com"
				},
				Body = HttpService:JSONEncode({
					cmd = "INVITE_BROWSER",
					args = {code = InviteCode},
					nonce = HttpService:GenerateGUID(false)
				})
			})
		end
		OrionLib:MakeNotification({
			Name = "Discord Invite",
			Content = "Joining Discord server...",
			Time = 5
		})
		writefile("NewLibraryNotification1.txt", "true")
	end

	if WindowConfig.IntroEnabled then
		LoadSequence()
	else
		MainWindow.Visible = true
		UnlockMouse(true)
	end
end

	local function ShowInitialWarning(onConfirm)
		local blur = Create("BlurEffect", { Size = 0, Parent = game:GetService("Lighting") })
	
		local WarningContainer = Create("Frame", {
			Name = "WarningContainer",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			ZIndex = 99999,
			Parent = Orion
		})
	
		local WarningFrame = Create("Frame", {
			Name = "WarningFrame",
			Size = UDim2.new(0, 480, 0, 260),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(30, 30, 38),
			BackgroundTransparency = 0.2,
			BorderSizePixel = 0,
			ClipsDescendants = true,
			Parent = WarningContainer,
		})
	
		Create("UIScale", { Scale = 0.7, Parent = WarningFrame })
		local frameStroke = Create("UIStroke", { Thickness = 2, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Parent = WarningFrame })
		Create("UICorner", { CornerRadius = UDim.new(0, 12), Parent = WarningFrame })
		Create("UIGradient", {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 60)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 30))
			}),
			Rotation = 90,
			Parent = WarningFrame
		})
	
		local WarningHeader = Create("Frame", {
			Name = "WarningHeader",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			Parent = WarningFrame
		})
		MakeDraggable(WarningHeader, WarningFrame)
	
		local WarningImage = Create("ImageLabel", {
			Name = "WarningImage",
			Image = "rbxassetid://10411342089",
			Size = UDim2.new(0, 64, 0, 64),
			Position = UDim2.new(0.5, 0, 0, 30),
			AnchorPoint = Vector2.new(0.5, 0),
			BackgroundTransparency = 1,
			Parent = WarningHeader
		})
	
		local TitleLabel = Create("TextLabel", {
			Text = "<b>Warning from Verbal Hub Security System</b>",
			Font = Enum.Font.GothamBold,
			TextSize = 18,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			RichText = true,
			TextXAlignment = Enum.TextXAlignment.Center,
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -20, 0, 22),
			Position = UDim2.new(0.5, 0, 0, 105),
			AnchorPoint = Vector2.new(0.5, 0),
			Parent = WarningHeader
		})
		Create("UIStroke", { Thickness = 2, Color = Color3.fromRGB(255,255,255), Transparency = 0.5, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Parent = TitleLabel })
	
		local BodyLabel = Create("TextLabel", {
			Text = "Be careful when running scripts from unknown developers. Some scripts may attempt to steal your items or compromise your account. <b>Always verify the source.</b>",
			Font = Enum.Font.GothamSemibold,
			TextSize = 15,
			RichText = true,
			TextColor3 = Color3.fromRGB(220, 220, 220),
			TextXAlignment = Enum.TextXAlignment.Center,
			TextYAlignment = Enum.TextYAlignment.Top,
			TextWrapped = true,
			LineHeight = 1.2,
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -40, 0, 60),
			Position = UDim2.new(0.5, 0, 0, 135),
			AnchorPoint = Vector2.new(0.5, 0),
			Parent = WarningHeader
		})
	
		local OkayButton = Create("TextButton", {
			Name = "OkayButton",
			Text = "",
			Size = UDim2.new(1, -40, 0, 40),
			Position = UDim2.new(0.5, 0, 1, -20),
			AnchorPoint = Vector2.new(0.5, 1),
			AutoButtonColor = false,
			BackgroundColor3 = Color3.fromRGB(80, 50, 180),
			Parent = WarningHeader
		})
	
		local OkayLabel = Create("TextLabel", {
			Text = "<b>I Understand, Continue</b>",
			Font = Enum.Font.GothamBold,
			TextColor3 = Color3.fromRGB(255,255,255),
			RichText = true,
			TextSize = 16,
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Parent = OkayButton
		})
		Create("UIStroke", { Thickness = 2, Color = Color3.fromRGB(255,255,255), Transparency = 0.6, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Parent = OkayLabel })
		Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = OkayButton })
		local okayStroke = Create("UIStroke", { Thickness = 1.5, Parent = OkayButton })
	
		local renderSteppedConn
		renderSteppedConn = RunService.RenderStepped:Connect(function()
			local hue = tick() * 0.1 % 1
			local color = Color3.fromHSV(hue, 0.9, 1)
			frameStroke.Color = color
			okayStroke.Color = color
		end)
		
		local tweenInfoIn = TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		TweenService:Create(blur, tweenInfoIn, { Size = 12 }):Play()
		TweenService:Create(WarningFrame.UIScale, tweenInfoIn, { Scale = 1 }):Play()
	
		local okayBaseColor = OkayButton.BackgroundColor3
		OkayButton.MouseEnter:Connect(function()
			TweenService:Create(OkayButton, TweenInfo.new(0.2), { BackgroundColor3 = okayBaseColor:Lerp(Color3.new(1,1,1), 0.3) }):Play()
		end)
		OkayButton.MouseLeave:Connect(function()
			TweenService:Create(OkayButton, TweenInfo.new(0.2), { BackgroundColor3 = okayBaseColor }):Play()
		end)
	
		local clickConn
		clickConn = OkayButton.MouseButton1Click:Connect(function()
			clickConn:Disconnect()
			renderSteppedConn:Disconnect()
			local tweenInfoOut = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
			TweenService:Create(blur, tweenInfoOut, { Size = 0 }):Play()
			TweenService:Create(WarningFrame.UIScale, tweenInfoOut, { Scale = 0.7 }):Play()
			TweenService:Create(WarningFrame, tweenInfoOut, { BackgroundTransparency = 1 }):Play()
			
			task.delay(tweenInfoOut.Time, function()
				if blur and blur.Parent then blur:Destroy() end
				if WarningContainer and WarningContainer.Parent then WarningContainer:Destroy() end
				if onConfirm then onConfirm() end
			end)
		end)
	end
function ShowKeySystem(onConfirm)
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")

    local player = Players.LocalPlayer
    local keySettings = WindowConfig.SearchBar or {}
    keySettings.CorrectKey = keySettings.CorrectKey or {}

    local blur = Create("BlurEffect", { Size = 0, Parent = game:GetService("Lighting") })

    local KeyContainer = Create("Frame", {
        Name = "KeyContainer",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ZIndex = 99999,
        Parent = Orion
    })

    local KeyFrame = Create("Frame", {
        Name = "KeyFrame",
        Size = UDim2.new(0, 480, 0, 400),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = KeyContainer
    })

    -- UI Scaling for smaller screens
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local finalScale = 1.0
    if viewportSize.X < 520 or viewportSize.Y < 420 then
        finalScale = math.min(viewportSize.X / 520, viewportSize.Y / 420)
    end
    
    local uiScale = Create("UIScale", { Scale = 0.8 * finalScale, Parent = KeyFrame })

    -- Styling
    AddThemeObject(Create("UIStroke", { Thickness = 1, Color = Color3.fromRGB(80, 80, 90), ApplyStrokeMode = Enum.ApplyStrokeMode.Border }), "Stroke").Parent = KeyFrame
    Create("UICorner", { CornerRadius = UDim.new(0, 8) }).Parent = KeyFrame
    
    -- Header and Draggability
    local HeaderFrame = Create("Frame", {
        Name = "HeaderFrame",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(45, 45, 55),
        BackgroundTransparency = 0.2,
        Parent = KeyFrame
    })
    MakeDraggable(HeaderFrame, KeyFrame)

    -- Window Controls (Minimize, Close)
    local isMinimized = false
    local originalSize = KeyFrame.Size
    local MinimizedSize = UDim2.new(0, 250, 0, 40)

    local MinimizeButton = Create("TextButton", { Name = "MinimizeButton", Text = "_", TextSize = 22, TextColor3 = Color3.new(1,1,1), Font = Enum.Font.GothamBold, Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -50, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, AutoButtonColor = false, Parent = HeaderFrame })
    local CloseButton = Create("TextButton", { Name = "CloseButton", Text = "X", TextSize = 18, TextColor3 = Color3.new(1,1,1), Font = Enum.Font.GothamBold, Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -15, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5), BackgroundColor3 = Color3.fromRGB(220, 60, 60), AutoButtonColor = false, Parent = HeaderFrame}, {Create("UICorner", {CornerRadius = UDim.new(0, 6)})})
    local SecretGameButton = Create("TextButton", { Name = "SecretGameButton", Text = "⭐", Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -85, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5), BackgroundTransparency = 1, TextSize = 24, AutoButtonColor = false, Parent = HeaderFrame })
    local HelpButton = Create("TextButton", { Name = "HelpButton", Text = "?", Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(0, 15, 0.5, 0), AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(150, 200, 255), TextSize = 28, Font = Enum.Font.GothamBold, AutoButtonColor = false, Parent = HeaderFrame })

    -- Content Frames for different views
    local contentSize = UDim2.new(1, 0, 1, -40)
    local contentPosition = UDim2.new(0, 0, 0, 40)

    local MainContentFrame = Create("Frame", { Name = "MainContentFrame", Size = contentSize, Position = contentPosition, BackgroundTransparency = 1, Parent = KeyFrame, Visible = true })
    local GameFrame = Create("Frame", { Name = "GameFrame", Size = contentSize, Position = contentPosition, BackgroundColor3 = Color3.fromRGB(5, 2, 10), BackgroundTransparency = 0, Visible = false, ClipsDescendants = true, Parent = KeyFrame })
    local HelpFrame = Create("Frame", { Name = "HelpFrame", Size = contentSize, Position = contentPosition, BackgroundColor3 = Color3.fromRGB(45, 45, 55), BackgroundTransparency = 0.2, Visible = false, ClipsDescendants = true, ZIndex = 11, Parent = KeyFrame })

    -- Window Control Logic
    MinimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        MainContentFrame.Visible = not isMinimized and not GameFrame.Visible and not HelpFrame.Visible
        GameFrame.Visible = not isMinimized and GameFrame.Visible
        HelpFrame.Visible = not isMinimized and HelpFrame.Visible
        TweenService:Create(KeyFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Size = isMinimized and MinimizedSize or originalSize}):Play()
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        local tweenInfoOut = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
        TweenService:Create(blur, tweenInfoOut, { Size = 0 }):Play()
        TweenService:Create(uiScale, tweenInfoOut, { Scale = 0.8 * finalScale }):Play()
        TweenService:Create(KeyFrame, tweenInfoOut, { BackgroundTransparency = 1 }):Play()
        task.delay(tweenInfoOut.Time, function()
            if KeyContainer and KeyContainer.Parent then KeyContainer:Destroy() end
        end)
    end)
    
    --[[ SECRET MINIGAME ]]--
    do
        Create("UICorner", { CornerRadius = UDim.new(0, 8) }).Parent = GameFrame
        local GameBackground = Create("Frame", { Name = "GameBackground", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, ZIndex = 1, Parent = GameFrame })
        local LightningFlash = Create("Frame", { Name = "LightningFlash", Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1, ZIndex = 3, Parent = GameBackground })
        
        local function createNebulae()
            for i = 1, 3 do
                local nebula = Create("Frame", { Size = UDim2.new(0, math.random(200, 400), 0, math.random(200, 400)), Position = UDim2.new(math.random(), 0, math.random(), 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, BorderSizePixel = 0, Parent = GameBackground, ZIndex = 1 })
                Create("UIGradient", { Transparency = NumberSequence.new({ NumberSequenceKeypoint.new(0, 0.8), NumberSequenceKeypoint.new(0.5, 0.9), NumberSequenceKeypoint.new(1, 1) }), Color = ColorSequence.new({ ColorSequenceKeypoint.new(0, Color3.fromHSV(math.random(), 0.8, 1)), ColorSequenceKeypoint.new(1, Color3.fromHSV(math.random(), 0.7, 0.5)) }), Parent = nebula })
            end
        end

        local function createLayeredRain()
            local rainLayers = { {count = 100, speed = {0.8, 1.2}, size = {1, 10}, transparency = {0.7, 0.8}}, {count = 70, speed = {0.4, 0.7}, size = {2, 15}, transparency = {0.5, 0.6}}, {count = 40, speed = {0.2, 0.3}, size = {2, 20}, transparency = {0.3, 0.4}} }
            for _, layer in ipairs(rainLayers) do
                for i = 1, layer.count do
                    local rainDrop = Create("Frame", { AnchorPoint = Vector2.new(0.5, 0.5), Size = UDim2.new(0, layer.size[1], 0, math.random(layer.size[1]*5, layer.size[2])), Position = UDim2.new(math.random(), 0, math.random(), 0), BackgroundColor3 = Color3.fromRGB(120, 170, 255), BackgroundTransparency = math.random(layer.transparency[1] * 10, layer.transparency[2] * 10) / 10, BorderSizePixel = 0, Parent = GameBackground, ZIndex = 2 })
                    local duration = math.random(layer.speed[1] * 10, layer.speed[2] * 10) / 10
                    task.spawn(function()
                        while rainDrop.Parent do
                            rainDrop.Position = UDim2.new(math.random(), 0, -0.2, 0)
                            local newX = rainDrop.Position.X.Scale - 0.15
                            TweenService:Create(rainDrop, TweenInfo.new(duration, Enum.EasingStyle.Linear), {Position = UDim2.new(newX, 0, 1.2, 0)}):Play()
                            task.wait(duration)
                        end
                    end)
                end
            end
        end

        createNebulae(); createLayeredRain()

        local gameRunning = false
        local gameConfig = {}
        local gameItems = {
            positive = { {char="⭐", points=1, size=40, color=Color3.fromRGB(255, 255, 100), type="points"}, {char="💎", points=5, size=38, color=Color3.fromRGB(150, 255, 255), type="points"}, {char="🛸", points=10, size=50, color=Color3.fromRGB(150, 255, 150), type="points"} },
            negative = { {char="💣", points=-10, size=45, color=Color3.fromRGB(255, 100, 100), type="points"} },
            utility = { {char="⏱️", value=3, size=40, color=Color3.fromRGB(220, 220, 100), type="time"} }
        }
        _G.gameRunning = gameRunning
        local Points, HighScore, currentTime = 0, 0, 0
        local timerConnection, cursorConnection, lightningCoroutine

        local GameUIParent = Create("Frame", { Name = "GameUIParent", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, ZIndex = 5, Parent = GameFrame })
        local PointsLabel = AddThemeObject(SetProps(MakeElement("Label", "Points: 0", 24), { Size = UDim2.new(0.4, 0, 0, 40), Position = UDim2.new(0.05, 0, 0, 10), Font = Enum.Font.GothamBold, TextStrokeTransparency = 0.5, TextXAlignment = Enum.TextXAlignment.Left, Parent = GameUIParent }), "Text")
        local TimerLabel = AddThemeObject(SetProps(MakeElement("Label", "Time: 0", 24), { Size = UDim2.new(0.4, 0, 0, 40), Position = UDim2.new(0.95, 0, 0, 10), AnchorPoint = Vector2.new(1, 0), Font = Enum.Font.GothamBold, TextStrokeTransparency = 0.5, TextXAlignment = Enum.TextXAlignment.Right, Parent = GameUIParent }), "Text")
        
        local BackButton = AddThemeObject(Create("TextButton", { Name = "BackButton", Text = "", Size = UDim2.new(0, 100, 0, 35), Position = UDim2.new(0.5, 0, 1, -20), AnchorPoint = Vector2.new(0.5, 1), AutoButtonColor = false, BackgroundColor3 = Color3.fromRGB(255, 80, 80), ZIndex = 6 }), "Second")
        SetChildren(BackButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Back", 16), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); BackButton.Parent = GameFrame
        _G.GameBackButton = BackButton
        
        local ModeSelectFrame = Create("Frame", { Name = "ModeSelectFrame", Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(20, 20, 30), BackgroundTransparency = 0.2, Visible = false, Parent = GameFrame, ZIndex = 10 })
        local ModeTitle = AddThemeObject(SetProps(MakeElement("Label", "Select Difficulty", 32), { Size = UDim2.new(1, 0, 0, 50), Position = UDim2.new(0.5, 0, 0.2, 0), AnchorPoint = Vector2.new(0.5, 0.5), Font = Enum.Font.GothamBold, Parent = ModeSelectFrame }), "Text")
        local EasyButton = AddThemeObject(Create("TextButton", { Name = "EasyButton", Size = UDim2.new(0, 180, 0, 50), Position = UDim2.new(0.5, 0, 0.5, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(80, 180, 80) }), "Second")
        SetChildren(EasyButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Easy", 20), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); EasyButton.Parent = ModeSelectFrame
        local HardcoreButton = AddThemeObject(Create("TextButton", { Name = "HardcoreButton", Size = UDim2.new(0, 180, 0, 50), Position = UDim2.new(0.5, 0, 0.7, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(200, 80, 80) }), "Second")
        SetChildren(HardcoreButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Hardcore", 20), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); HardcoreButton.Parent = ModeSelectFrame

        local GameOverFrame = Create("Frame", { Name = "GameOverFrame", Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(20, 20, 30), BackgroundTransparency = 0.2, Visible = false, ZIndex = 10, Parent = GameFrame })
        local GameOverTitle = AddThemeObject(SetProps(MakeElement("Label", "Game Over", 40), { Size = UDim2.new(1, 0, 0, 50), Position = UDim2.new(0.5, 0, 0.2, 0), AnchorPoint = Vector2.new(0.5, 0.5), Font = Enum.Font.GothamBold, Parent = GameOverFrame }), "Text")
        local FinalScoreLabel = AddThemeObject(SetProps(MakeElement("Label", "Score: 0", 22), { Size = UDim2.new(1, 0, 0, 30), Position = UDim2.new(0.5, 0, 0.35, 0), AnchorPoint = Vector2.new(0.5, 0.5), Font = Enum.Font.GothamSemibold, Parent = GameOverFrame }), "Text")
        local HighScoreLabel = AddThemeObject(SetProps(MakeElement("Label", "High Score: 0", 22), { Size = UDim2.new(1, 0, 0, 30), Position = UDim2.new(0.5, 0, 0.45, 0), AnchorPoint = Vector2.new(0.5, 0.5), Font = Enum.Font.GothamSemibold, Parent = GameOverFrame }), "Text")
        local PlayAgainButton = AddThemeObject(Create("TextButton", { Name = "PlayAgain", Size = UDim2.new(0, 150, 0, 45), Position = UDim2.new(0.5, 0, 0.65, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(80, 180, 80) }), "Second")
        SetChildren(PlayAgainButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Play Again", 18), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); PlayAgainButton.Parent = GameOverFrame
        _G.ModeSelectFrame = ModeSelectFrame
        _G.GameOverFrame = GameOverFrame

        local function popEffect(object, color)
            if not object or not object.Parent then return end
            local popTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
            TweenService:Create(object, popTweenInfo, { TextSize = object.TextSize * 1.5, TextTransparency = 1, TextColor3 = color or object.TextColor3, Rotation = math.random(-45, 45) }):Play()
            task.delay(0.3, function() if object and object.Parent then object:Destroy() end end)
        end
        
        local function textPopEffect(label, newText, color)
            local originalSize = label.TextSize; local originalColor = label.TextColor3
            label.Text = newText; label.TextColor3 = color
            local t1 = TweenService:Create(label, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out), { TextSize = originalSize * 1.3 })
            local t2 = TweenService:Create(label, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out), { TextSize = originalSize, TextColor3 = originalColor })
            t1:Play(); t1.Completed:Connect(function() t2:Play() end)
        end
        
        local function createCursorTrail()
            cursorConnection = UserInputService.InputChanged:Connect(function(input)
                if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and GameFrame.Visible then
                    local pos = input.Position
                    local particle = Create("Frame", { Position = UDim2.fromOffset(pos.X, pos.Y), Size = UDim2.new(0, math.random(4,8), 0, math.random(4,8)), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromHSV(tick() % 5, 0.8, 1), BorderSizePixel = 0, ZIndex = 99999, Parent = KeyContainer }, {Create("UICorner", {CornerRadius = UDim.new(1,0)})})
                    TweenService:Create(particle, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {Size = UDim2.new(), BackgroundTransparency = 1}):Play()
                    task.delay(0.5, function() if particle and particle.Parent then particle:Destroy() end end)
                end
            end)
        end

        function _G.endGame()
            _G.gameRunning = false
            if timerConnection then timerConnection:Disconnect(); timerConnection = nil end
            if cursorConnection then cursorConnection:Disconnect(); cursorConnection = nil end
            if lightningCoroutine then task.cancel(lightningCoroutine); lightningCoroutine = nil end
            if Points > HighScore then HighScore = Points end
            FinalScoreLabel.Text = "Score: " .. Points
            HighScoreLabel.Text = "High Score: " .. HighScore
            GameOverFrame.Visible = true
            for _, child in ipairs(GameUIParent:GetChildren()) do if child:IsA("TextButton") and child.Name == "ClickableItem" then popEffect(child, Color3.fromRGB(255, 100, 100)) end end
        end

        local function startGame(config)
            gameConfig = config
            ModeSelectFrame.Visible = false; GameOverFrame.Visible = false
            Points = 0; PointsLabel.Text = "Points: 0"
            currentTime = gameConfig.time; TimerLabel.Text = "Time: " .. currentTime
            _G.gameRunning = true; createCursorTrail()

            lightningCoroutine = task.spawn(function()
                while _G.gameRunning do
                    task.wait(math.random(5, 15))
                    if _G.gameRunning then
                        LightningFlash.BackgroundTransparency = 1
                        local t1 = TweenService:Create(LightningFlash, TweenInfo.new(0.05, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundTransparency = 0.2 })
                        local t2 = TweenService:Create(LightningFlash, TweenInfo.new(0.8, Enum.EasingStyle.Quint, Enum.EasingDirection.In), { BackgroundTransparency = 1 })
                        t1:Play(); t1.Completed:Wait(); t2:Play()
                    end
                end
            end)

            task.spawn(function()
                local spawnRate = gameConfig.spawnRate
                while _G.gameRunning do
                    local itemToSpawn; local rand = math.random()
                    if rand < gameConfig.itemChance.negative then itemToSpawn = gameItems.negative[math.random(#gameItems.negative)]
                    elseif rand < gameConfig.itemChance.negative + gameConfig.itemChance.utility then itemToSpawn = gameItems.utility[math.random(#gameItems.utility)]
                    else itemToSpawn = gameItems.positive[math.random(#gameItems.positive)]
                    end
                    
                    local itemButton = Create("TextButton", { Name = "ClickableItem", Text = itemToSpawn.char, Size = UDim2.new(0, itemToSpawn.size, 0, itemToSpawn.size), Position = UDim2.new(math.random(5, 95) / 100, 0, math.random(15, 85) / 100, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextSize = itemToSpawn.size - 5, TextColor3 = itemToSpawn.color, Font = Enum.Font.GothamBold, Parent = GameUIParent })
                    itemButton.MouseButton1Click:Connect(function()
                        if not itemButton.Parent then return end
                        if itemToSpawn.type == "points" then
                            Points = Points + itemToSpawn.points
                            PointsLabel.Text = "Points: " .. Points
                            textPopEffect(PointsLabel, PointsLabel.Text, itemToSpawn.color)
                        elseif itemToSpawn.type == "time" then
                            currentTime = currentTime + itemToSpawn.value
                            textPopEffect(TimerLabel, "Time: "..math.ceil(currentTime).." (+"..itemToSpawn.value..")", itemToSpawn.color)
                        end
                        popEffect(itemButton, itemToSpawn.color)
                    end)
                    
                    task.delay(math.random(gameConfig.itemLife[1]*10, gameConfig.itemLife[2]*10)/10, function() if itemButton.Parent then popEffect(itemButton) end end)
                    
                    task.wait(spawnRate)
                    if spawnRate > gameConfig.minSpawn then spawnRate = spawnRate * gameConfig.rampUp end
                end
            end)

            timerConnection = RunService.Heartbeat:Connect(function(dt)
                if _G.gameRunning then
                    currentTime = currentTime - dt
                    if currentTime <= 0 then TimerLabel.Text = "Time: 0"; _G.endGame()
                    else TimerLabel.Text = "Time: " .. math.ceil(currentTime) end
                end
            end)
        end
        
        PlayAgainButton.MouseButton1Click:Connect(function() GameOverFrame.Visible = false; ModeSelectFrame.Visible = true end)
        
        EasyButton.MouseButton1Click:Connect(function()
            startGame({ time = 45, spawnRate = 0.7, minSpawn = 0.2, rampUp = 0.99, itemLife = {3, 5}, itemChance = {positive = 0.8, negative = 0.1, utility = 0.1} })
        end)
        
        HardcoreButton.MouseButton1Click:Connect(function()
            startGame({ time = 20, spawnRate = 0.4, minSpawn = 0.08, rampUp = 0.97, itemLife = {1.5, 2.5}, itemChance = {positive = 0.55, negative = 0.35, utility = 0.1} })
        end)
    end

    --[[ HELP FRAME ]]--
    do
        Create("UICorner", { CornerRadius = UDim.new(0, 8) }).Parent = HelpFrame
        local HelpCloseButton = Create("TextButton", { Name = "HelpCloseButton", Text = "X", TextSize = 20, TextColor3 = Color3.new(1,1,1), Font = Enum.Font.GothamBold, Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -10, 0, 10), AnchorPoint = Vector2.new(1, 0), BackgroundColor3 = Color3.fromRGB(255, 80, 80), ZIndex = 12, Parent = HelpFrame }, {Create("UICorner")})
        _G.HelpCloseButton = HelpCloseButton
        local HelpScroll = Create("ScrollingFrame", { Size = UDim2.new(1, -20, 1, -50), Position = UDim2.new(0.5, 0, 0.5, 10), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, BorderSizePixel = 0, CanvasSize = UDim2.new(0, 0, 0, 0), Parent = HelpFrame, ScrollingDirection = Enum.ScrollingDirection.Y })
        local HelpListLayout = Create("UIListLayout", { Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder, FillDirection = Enum.FillDirection.Vertical, HorizontalAlignment = Enum.HorizontalAlignment.Center, Parent = HelpScroll })
        
        local function addHelpText(text, size, color, font, alignment)
            local label = Create("TextLabel", { Text = text, TextSize = size, TextColor3 = color, Font = font, TextXAlignment = alignment, TextWrapped = true, BackgroundTransparency = 1, Size = UDim2.new(1, -10, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = HelpScroll })
            return label
        end
        
        local function populateHelpFrame()
            for _,v in ipairs(HelpScroll:GetChildren()) do if v:IsA("TextLabel") then v:Destroy() end end
            addHelpText("How to get a Key", 24, Color3.new(1,1,1), Enum.Font.GothamBold, Enum.TextXAlignment.Center)
            local helpContent = { {"Option 1: Linkvertise", {"1. Click 'Free Access with Ads'.", "2. Complete the required steps (e.g., Discover articles).", "3. Close the new tab when finished.", "4. Copy the key."}}, {"Option 2: LoopLab", {"1. Complete the main action on the page.", "2. Wait for the timer and click 'Continue'.", "3. Copy the key from the final destination."}}, {"Option 3: PlatoBoost", {"1. Complete all required actions.", "2. You will be automatically redirected.", "3. Copy the key from the new page."}}, {"Option 4: PandaDevelopment", {"1. Click the 'Get Key' button.", "2. Follow the on-screen instructions carefully.", "3. Copy your key."}}, {"Option 5: Luarmor", {"1. Verify you are human (Captcha).", "2. Proceed through all the steps shown.", "3. Wait for the 'Continue' button to unlock.", "4. Copy the key from the final page."}}, }
            for _, content in ipairs(helpContent) do
                addHelpText(content[1], 18, Color3.fromRGB(150, 200, 255), Enum.Font.GothamBold, Enum.TextXAlignment.Left)
                for _, step in ipairs(content[2]) do addHelpText(step, 14, Color3.new(1,1,1), Enum.Font.Gotham, Enum.TextXAlignment.Left) end
            end
            addHelpText("If you need more help:", 18, Color3.fromRGB(150, 200, 255), Enum.Font.GothamBold, Enum.TextXAlignment.Center)
            addHelpText("copy this link and join our discord server:", 14, Color3.new(1,1,1), Enum.Font.Gotham, Enum.TextXAlignment.Center)
            addHelpText("https://discord.gg/j2xyP8zwNt", 14, Color3.fromRGB(100,150,255), Enum.Font.GothamSemibold, Enum.TextXAlignment.Center)
            addHelpText("made by verbal hub By Itjose4 on dc", 16, Color3.new(1,1,1), Enum.Font.GothamBold, Enum.TextXAlignment.Center).LayoutOrder = 99
            
            task.wait()
            HelpScroll.CanvasSize = UDim2.new(0, 0, 0, HelpListLayout.AbsoluteContentSize.Y)
        end; populateHelpFrame()
    end
    
    do
        local success, content = pcall(Players.GetUserThumbnailAsync, Players, player.UserId, Enum.ThumbnailType.AvatarBust, Enum.ThumbnailSize.Size420x420)
        if success then
            local PlayerThumbnail = Create("ImageLabel", { Name = "PlayerThumbnail", Size = UDim2.new(0, 100, 0, 100), Position = UDim2.new(0.5, 0, 0, 25), AnchorPoint = Vector2.new(0.5, 0), BackgroundTransparency = 1, Image = content, Parent = MainContentFrame })
            Create("UICorner", { CornerRadius = UDim.new(1, 0) }).Parent = PlayerThumbnail
            AddThemeObject(Create("UIStroke", { Thickness = 1, ApplyStrokeMode = Enum.ApplyStrokeMode.Border }), "Stroke").Parent = PlayerThumbnail
        end

        local TitleLabel = AddThemeObject(SetProps(MakeElement("Label", keySettings.KeySettingsTitle or "Key System", 22), { Size = UDim2.new(1, 0, 0, 30), Position = UDim2.new(0, 0, 0, 140), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center, Parent = MainContentFrame }), "Text")
        local SubtitleLabel = AddThemeObject(SetProps(MakeElement("Label", keySettings.KeySettingsSubtitle or "Please enter the key to continue", 16), { Size = UDim2.new(1, 0, 0, 20), Position = UDim2.new(0, 0, 0, 170), Font = Enum.Font.GothamSemibold, TextColor3 = Color3.fromRGB(180, 180, 180), TextXAlignment = Enum.TextXAlignment.Center, Parent = MainContentFrame }), "TextDark")
        
        local KeyTextboxContainer = Create("Frame", { Name = "KeyTextboxContainer", Size = UDim2.new(1, -80, 0, 50), Position = UDim2.new(0.5, 0, 0.5, 30), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Parent = MainContentFrame })
        local KeyTextbox = Create("TextBox", { Name = "KeyTextbox", Size = UDim2.new(1, 0, 1, -5), Position = UDim2.new(0.5, 0, 0.5, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Font = Enum.Font.GothamBold, TextSize = 20, TextColor3 = Color3.new(1, 1, 1), PlaceholderText = "Paste Key Here...", PlaceholderColor3 = Color3.fromRGB(150, 150, 150), ClearTextOnFocus = false, TextXAlignment = Enum.TextXAlignment.Center, Parent = KeyTextboxContainer })
        
        local rainbowGradient = Create("UIGradient", { Color = ColorSequence.new({ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 127)), ColorSequenceKeypoint.new(0.25, Color3.fromRGB(255, 127, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 127)), ColorSequenceKeypoint.new(0.75, Color3.fromRGB(0, 127, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 127))}), Rotation = 0, Parent = KeyTextbox })
        task.spawn(function() while rainbowGradient.Parent do TweenService:Create(rainbowGradient, TweenInfo.new(2, Enum.EasingStyle.Linear), { Rotation = rainbowGradient.Rotation + 360 }):Play(); task.wait(2) end end)

        local Underline = Create("Frame", { Name = "Underline", Size = UDim2.new(1, 0, 0, 2), Position = UDim2.new(0, 0, 1, -2), BackgroundColor3 = Color3.fromRGB(120, 120, 130), BorderSizePixel = 0, Parent = KeyTextboxContainer })
        local NoteLabel = AddThemeObject(SetProps(MakeElement("Label", keySettings.KeySettingsNote or "", 12), { Size = UDim2.new(1, -40, 0, 40), Position = UDim2.new(0.5, 0, 1, -105), AnchorPoint = Vector2.new(0.5, 0), Font = Enum.Font.Gotham, TextColor3 = Color3.fromRGB(180, 180, 180), TextXAlignment = Enum.TextXAlignment.Center, TextWrapped = true, Parent = MainContentFrame }), "TextDark")
        local ButtonHolder = Create("Frame", { Size = UDim2.new(1, -80, 0, 45), Position = UDim2.new(0.5, 0, 1, -55), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, Parent = MainContentFrame }, { Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10) }) })
        
        local ValidateButton = AddThemeObject(Create("TextButton", { Name = "ValidateButton", Text = "", Size = UDim2.new(0.5, -5, 1, 0), AutoButtonColor = false, BackgroundColor3 = Color3.fromRGB(60, 120, 220) }), "Second")
        SetChildren(ValidateButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Check Key", 16), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); ValidateButton.Parent = ButtonHolder
        
        local CopyLinkButton = AddThemeObject(Create("TextButton", { Name = "CopyLinkButton", Text = "", Size = UDim2.new(0.5, -5, 1, 0), AutoButtonColor = false, BackgroundColor3 = Color3.fromRGB(60, 120, 220) }), "Second")
        SetChildren(CopyLinkButton, { MakeElement("Corner", 0, 6), AddThemeObject(SetProps(MakeElement("Label", "Copy Key Link", 16), { Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold }), "Text") }); CopyLinkButton.Parent = ButtonHolder
        
        AddConnection(ValidateButton.MouseEnter, function() TweenService:Create(ValidateButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(80, 140, 240) }):Play() end)
        AddConnection(ValidateButton.MouseLeave, function() TweenService:Create(ValidateButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(60, 120, 220) }):Play() end)
        AddConnection(CopyLinkButton.MouseEnter, function() TweenService:Create(CopyLinkButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(80, 140, 240) }):Play() end)
        AddConnection(CopyLinkButton.MouseLeave, function() TweenService:Create(CopyLinkButton, TweenInfo.new(0.2), { BackgroundColor3 = Color3.fromRGB(60, 120, 220) }):Play() end)

        --[[ MODIFIED: Key validation logic is now more streamlined ]]--
        AddConnection(ValidateButton.MouseButton1Click, function()
            local enteredKey = KeyTextbox.Text
            local keyList = keySettings.CorrectKey or keySettings.KeySettingsKey or {}
            local correct = false
            for _, key in ipairs(keyList) do
                if enteredKey == key then
                    correct = true
                    break
                end
            end

            if correct then
                -- If key is correct, save it and fade out the UI before loading the main script.
                if keySettings.KeySettingsSaveKey and writefile then
                    pcall(writefile, WindowConfig.ConfigFolder .. "/" .. (keySettings.KeySettingsFileName or "Key") .. ".key", enteredKey)
                end
                
                OrionLib:MakeNotification({ Name = "Key System", Content = "Correct key! Loading...", Time = 2 })

                local tweenInfoOut = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
                TweenService:Create(blur, tweenInfoOut, { Size = 0 }):Play()
                TweenService:Create(uiScale, tweenInfoOut, { Scale = 0.8 * finalScale }):Play()
                TweenService:Create(KeyFrame, tweenInfoOut, { BackgroundTransparency = 1 }):Play()
                
                -- After fade out, destroy the UI and run the 'onConfirm' callback to load Orion.
                task.delay(tweenInfoOut.Time, function()
                    if KeyContainer and KeyContainer.Parent then KeyContainer:Destroy() end
                    if onConfirm then onConfirm() end
                end)
            else
                -- If key is incorrect, show a notification and shake the window.
                OrionLib:MakeNotification({ Name = "Key System", Content = "Incorrect key.", Time = 3 })
                local originalPos = KeyFrame.Position
                task.spawn(function()
                    local tInfo = TweenInfo.new(0.06)
                    local t1 = TweenService:Create(KeyFrame, tInfo, { Position = originalPos + UDim2.fromOffset(10, 0) })
                    local t2 = TweenService:Create(KeyFrame, tInfo, { Position = originalPos - UDim2.fromOffset(10, 0) })
                    local t3 = TweenService:Create(KeyFrame, tInfo, { Position = originalPos })
                    t1:Play(); t1.Completed:Wait(); t2:Play(); t2.Completed:Wait(); t3:Play()
                end)
            end
        end)

        AddConnection(CopyLinkButton.MouseButton1Click, function()
            if keySettings.KeyLink and #keySettings.KeyLink > 0 and keySettings.KeyLink[1] ~= "" and setclipboard then
                setclipboard(keySettings.KeyLink[1])
                OrionLib:MakeNotification({ Name = "Key System", Content = "Key link copied to clipboard.", Time = 3 })
            else
                OrionLib:MakeNotification({ Name = "Key System", Content = "No key link available.", Time = 3 })
            end
        end)
    end
    
    local madeByLabel = Create("TextLabel", { Name = "MadeByLabel", Size = UDim2.new(1, 0, 0, 20), Position = UDim2.new(0.5, 0, 1, -5), AnchorPoint = Vector2.new(0.5, 1), Font = Enum.Font.Gotham, Text = "", TextColor3 = Color3.fromRGB(200, 200, 200), TextSize = 14, TextTransparency = 0, BackgroundTransparency = 1, Parent = KeyFrame, ZIndex = 2 })
    
    -- View switching functions
    local function showKeyView()
        if _G.gameRunning then _G.endGame() end
        MainContentFrame.Visible = true
        GameFrame.Visible = false
        HelpFrame.Visible = false
        madeByLabel.Visible = true
    end
    
    local function showGameView()
        MainContentFrame.Visible = false
        GameFrame.Visible = true
        HelpFrame.Visible = false
        madeByLabel.Visible = false
        _G.ModeSelectFrame.Visible = true
        _G.GameOverFrame.Visible = false
    end

    local function showHelpView()
        if _G.gameRunning then _G.endGame() end
        MainContentFrame.Visible = false
        GameFrame.Visible = false
        HelpFrame.Visible = true
        madeByLabel.Visible = false
    end
    
    SecretGameButton.MouseButton1Click:Connect(showGameView)
    HelpButton.MouseButton1Click:Connect(showHelpView)
    _G.GameBackButton.MouseButton1Click:Connect(showKeyView)
    _G.HelpCloseButton.MouseButton1Click:Connect(showKeyView)
    
    local function typewrite(label, text, duration, onComplete)
        task.spawn(function()
            for i = 1, #text do label.Text = string.sub(text, 1, i); task.wait(duration / #text) end
            if onComplete then onComplete() end
        end)
    end

    -- Initial fade-in animation
    local tweenInfoIn = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    TweenService:Create(blur, tweenInfoIn, { Size = 16 }):Play()
    TweenService:Create(uiScale, tweenInfoIn, { Scale = finalScale }):Play()
    TweenService:Create(KeyFrame, tweenInfoIn, { BackgroundTransparency = 0.1 }):Play()
    
    task.wait(tweenInfoIn.Time)

    -- Animated "Made by" text
    task.spawn(function()
        local fullText = "made by verbal hub itsjose4"
        local typeDuration = 1.5; local waitDuration = 4; local popDuration = 0.5
        while madeByLabel.Parent do
            madeByLabel.Text = ""; madeByLabel.TextSize = 14; madeByLabel.TextTransparency = 0
            if madeByLabel.Visible then
                typewrite(madeByLabel, fullText, typeDuration, function()
                    task.wait(waitDuration)
                    local popTween = TweenInfo.new(popDuration, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                    TweenService:Create(madeByLabel, popTween, {TextSize = 34, TextTransparency = 1}):Play()
                end)
            end
            task.wait(typeDuration + waitDuration + popDuration)
        end
    end)
end

-- This function is called by the key system upon success.
-- It's assumed that 'proceedToLoad' is defined elsewhere and loads the main library.
local function beginLoading()
    if typeof(proceedToLoad) == "function" then
        if math.random(1, 3) == 1 and typeof(ShowInitialWarning) == "function" then
            ShowInitialWarning(proceedToLoad)
        else
            proceedToLoad()
        end
    end
end

-- Entry point: Check for a saved key, otherwise show the key system UI.
if WindowConfig.SearchBar and WindowConfig.SearchBar.KeySystem then
    local keySettings = WindowConfig.SearchBar
    local keyFile = WindowConfig.ConfigFolder .. "/" .. (keySettings.KeySettingsFileName or "Key") .. ".key"
    local keyVerified = false

    if keySettings.KeySettingsSaveKey and isfile and readfile and isfile(keyFile) then
        local savedKey = readfile(keyFile)
        local keyList = keySettings.CorrectKey or keySettings.KeySettingsKey
        for _, key in ipairs(keyList) do
            if savedKey == key then keyVerified = true; break end
        end
    end

    if keyVerified then
        beginLoading()
    else
        ShowKeySystem(beginLoading)
    end
else
    beginLoading()
end


	local currentTopTabForCreation = nil
	local legacyTabGroup = nil

	local function GetElements(ItemParent)
		local ElementFunction = {}

		local function CreateLockOverlay(parent)
			return Create("Frame", {
				Name = "LockOverlay",
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundColor3 = Color3.new(0, 0, 0),
				BackgroundTransparency = 0.6,
				ZIndex = 50,
				Parent = parent,
			}, {
				MakeElement("Corner", 0, 5),
				Create("ImageLabel", {
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(0.5, -15, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5),
					Image = "rbxassetid://5103222410",
					ImageColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 1,
				}),
				Create("TextLabel", {
					Size = UDim2.new(1, -50, 1, 0),
					Position = UDim2.new(0.5, -10, 0.5, 0),
					AnchorPoint = Vector2.new(0, 0.5),
					Text = "This element is locked.",
					Font = Enum.Font.GothamSemibold,
					TextColor3 = Color3.fromRGB(240, 240, 240),
					TextXAlignment = Enum.TextXAlignment.Left,
					TextSize = 12,
					BackgroundTransparency = 1
				})
			})
		end
		
		local function SetupElement(Config, Frame, ClickablePart, ReturnedObject)
			local lockOverlay
			local originalTransparency = Frame.BackgroundTransparency
		
			function ReturnedObject:Lock()
				if lockOverlay then return end
				Config.Locked = true
				if ClickablePart and ClickablePart:IsA("GuiButton") then ClickablePart.Active = false end
				if ClickablePart and ClickablePart:IsA("TextBox") then ClickablePart.Editable = false end
				TweenService:Create(Frame, TweenInfo.new(0.2), { BackgroundTransparency = 0.8 }):Play()
				lockOverlay = CreateLockOverlay(Frame)
			end
		
			function ReturnedObject:Unlock()
				if not lockOverlay then return end
				Config.Locked = false
				if ClickablePart and ClickablePart:IsA("GuiButton") then ClickablePart.Active = true end
				if ClickablePart and ClickablePart:IsA("TextBox") then ClickablePart.Editable = true end
				AddThemeObject(Frame, "Second")
				if lockOverlay then
					lockOverlay:Destroy()
					lockOverlay = nil
				end
			end
		
			if Config.Locked then
				ReturnedObject:Lock()
			end
			
			if Config.Image then
				local contentHolder = Frame:FindFirstChild("ContentHolder")
				if contentHolder then
					local elementImage = Create("ImageLabel", {
						Name = "ElementImage",
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(0, 12, 0.5, 0),
						AnchorPoint = Vector2.new(0, 0.5),
						BackgroundTransparency = 1,
						Image = Config.Image,
						Parent = Frame
					})
					contentHolder.Position = UDim2.new(0, 38, 0, 0)
					contentHolder.Size = UDim2.new(1, -45, 1, 0)
				end
			end
		end

		function ElementFunction:AddSection(SectionConfig)
			SectionConfig = SectionConfig or {}
			SectionConfig.Name = SectionConfig.Name or "Section"
	
			local SectionLabel = AddThemeObject(SetProps(MakeElement("Label", ("- "..SectionConfig.Name.." -"), 14), {
				Size = UDim2.new(1, 0, 0, 20),
				Font = Enum.Font.GothamSemibold,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Center,
				Parent = ItemParent
			}), "TextDark")
	
			return {}
		end
		function ElementFunction:AddLabel(Text)
			local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 30),
				BackgroundTransparency = 0.7,
				Parent = ItemParent
			}), {
				AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
					Size = UDim2.new(1, -12, 1, 0),
					Position = UDim2.new(0, 12, 0, 0),
					Font = Enum.Font.GothamBold,
					Name = "Content"
				}), "Text"),
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Second")

			MakeShineOnHover(LabelFrame, LabelFrame.Content)

			local LabelFunction = {}
			function LabelFunction:Set(ToChange)
				if LabelFrame and LabelFrame.Content then
					LabelFrame.Content.Text = ToChange
				end
			end
			return LabelFunction
		end
	local highlighter = {}
local keywords = {
    lua = {
        "and", "break", "or", "else", "elseif", "if", "then", "until", "repeat", "while", "do", "for", "in", "end",
        "local", "return", "function", "export",
    },
    rbx = {
        "game", "workspace", "script", "math", "string", "table", "task", "wait", "select", "next", "Enum",
        "tick", "assert", "shared", "loadstring", "tonumber", "tostring", "type",
        "typeof", "unpack", "Instance", "CFrame", "Vector3", "Vector2", "Color3", "UDim", "UDim2", "Ray", "BrickColor",
        "OverlapParams", "RaycastParams", "Axes", "Random", "Region3", "Rect", "TweenInfo",
        "collectgarbage", "not", "utf8", "pcall", "xpcall", "_G", "setmetatable", "getmetatable", "os", "pairs", "ipairs"
    },
    operators = {
        "#", "+", "-", "*", "%", "/", "^", "=", "~", "=", "<", ">",
    }
}

local colors = {
    numbers = Color3.fromHex("#FAB387"),
    boolean = Color3.fromHex("#FAB387"),
    operator = Color3.fromHex("#94E2D5"),
    lua = Color3.fromHex("#CBA6F7"),
    rbx = Color3.fromHex("#F38BA8"),
    str = Color3.fromHex("#A6E3A1"),
    comment = Color3.fromHex("#9399B2"),
    null = Color3.fromHex("#F38BA8"),
    call = Color3.fromHex("#89B4FA"),    
    self_call = Color3.fromHex("#89B4FA"),
    local_property = Color3.fromHex("#CBA6F7"),
}

local function createKeywordSet(keywords)
    local keywordSet = {}
    for _, keyword in ipairs(keywords) do
        keywordSet[keyword] = true
    end
    return keywordSet
end

local luaSet = createKeywordSet(keywords.lua)
local rbxSet = createKeywordSet(keywords.rbx)
local operatorsSet = createKeywordSet(keywords.operators)

local function getHighlight(tokens, index)
    local token = tokens[index]

    if colors[token .. "_color"] then
        return colors[token .. "_color"]
    end

    if tonumber(token) then
        return colors.numbers
    elseif token == "nil" then
        return colors.null
    elseif token:sub(1, 2) == "--" then
        return colors.comment
    elseif operatorsSet[token] then
        return colors.operator
    elseif luaSet[token] then
        return colors.lua
    elseif rbxSet[token] then
        return colors.rbx
    elseif token:sub(1, 1) == "\"" or token:sub(1, 1) == "\'" then
        return colors.str
    elseif token == "true" or token == "false" then
        return colors.boolean
    end

    if tokens[index + 1] == "(" then
        if tokens[index - 1] == ":" then
            return colors.self_call
        end
        return colors.call
    end

    if tokens[index - 1] == "." then
        if tokens[index - 2] == "Enum" then
            return colors.rbx
        end
        return colors.local_property
    end
end

function highlighter.run(source)
    local tokens = {}
    local currentToken = ""
    
    local inString = false
    local inComment = false
    local commentPersist = false
    
    for i = 1, #source do
        local character = source:sub(i, i)
        
        if inComment then
            if character == "\n" and not commentPersist then
                table.insert(tokens, currentToken)
                table.insert(tokens, character)
                currentToken = ""
                inComment = false
            elseif source:sub(i - 1, i) == "]]" and commentPersist then
				currentToken = currentToken .. "]"
				table.insert(tokens, currentToken)
                currentToken = ""
                inComment = false
                commentPersist = false
            else
                currentToken = currentToken .. character
            end
        elseif inString then
            if character == inString and source:sub(i-1, i-1) ~= "\\" or character == "\n" then
                currentToken = currentToken .. character
                inString = false
            else
                currentToken = currentToken .. character
            end
        else
            if source:sub(i, i + 1) == "--" then
                table.insert(tokens, currentToken)
                currentToken = "-"
                inComment = true
                commentPersist = source:sub(i + 2, i + 3) == "[["
            elseif character == "\"" or character == "\'" then
                table.insert(tokens, currentToken)
                currentToken = character
                inString = character
            elseif operatorsSet[character] then
                table.insert(tokens, currentToken)
                table.insert(tokens, character)
                currentToken = ""
            elseif character:match("[%w_]") then
                currentToken = currentToken .. character
            else
                table.insert(tokens, currentToken)
                table.insert(tokens, character)
                currentToken = ""
            end
        end
    end
    
    table.insert(tokens, currentToken)

    local highlighted = {}
    
    for i, token in ipairs(tokens) do
        local highlight = getHighlight(tokens, i)

        if highlight then
            local syntax = string.format("<font color=\"#%s\">%s</font>", highlight:ToHex(), token:gsub("<", "&lt;"):gsub(">", "&gt;"))
            table.insert(highlighted, syntax)
        else
            table.insert(highlighted, token)
        end
    end

    return table.concat(highlighted)
end

function ElementFunction:AddCode(Text, Content)
    local config = type(Text) == "table" and Text or {Name=Text, Content=Content}
    
    config.Name = config.Name or config.Title or "Code"
    config.Content = config.Content or config.Desc or config.Code or ""
    config.Language = config.Language or "luau"
    
    local CodeFrame = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(40, 44, 52), 0, 8), {
        Size = UDim2.new(1, 0, 0, 40),
        AutomaticSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 0.1,
        Parent = ItemParent,
        ClipsDescendants = true
    }), "Second")
    
    local isMinimized = false
    
    local children = {
        AddThemeObject(SetProps(MakeElement("Label", config.Name, 14), {
            Size = UDim2.new(1, -80, 0, 16),
            Position = UDim2.new(0, 12, 0, 12),
            Name = "Title",
            TextXAlignment = Enum.TextXAlignment.Left,
            TextColor3 = Color3.fromRGB(255, 255, 255)
        }), "Text"),
        
        Create("ScrollingFrame", {
            Size = UDim2.new(1, -24, 0, 0),
            Position = UDim2.new(0, 12, 0, 36),
            BackgroundColor3 = Color3.fromRGB(30, 30, 30),
            BackgroundTransparency = 0.3,
            ScrollBarThickness = 8,
            AutomaticSize = Enum.AutomaticSize.Y,
            Name = "CodeContainer"
        }, {
            Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
            Create("UIPadding", {
                PaddingLeft = UDim.new(0, 12),
                PaddingRight = UDim.new(0, 12),
                PaddingTop = UDim.new(0, 8),
                PaddingBottom = UDim.new(0, 4)
            }),
            
            AddThemeObject(SetProps(MakeElement("Label", "", 12), {
                Size = UDim2.new(1, -24, 0, 0),
                Position = UDim2.new(0, 0, 0, 0),
                Name = "CodeContent",
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y,
                TextXAlignment = Enum.TextXAlignment.Left,
                RichText = true,
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(220, 220, 220)
            }), "TextDark")
        }),
        
        AddThemeObject(MakeElement("Stroke"), "Stroke"),
        Create("UIPadding", {PaddingBottom=UDim.new(0,8)}),
        
        Create("TextButton", {
            Size = UDim2.new(0, 32, 0, 24),
            Position = UDim2.new(1, -70, 0, 8),
            BackgroundColor3 = Color3.fromRGB(70, 130, 220),
            BackgroundTransparency = 0,
            Name = "CopyButton",
            Text = "",
            BorderSizePixel = 0
        }, {
            Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
            Create("ImageLabel", {
                Size = UDim2.new(0, 14, 0, 14),
                Position = UDim2.new(0.5, -7, 0.5, -7),
                Image = "rbxassetid://96265482350413",
                BackgroundTransparency = 1,
                ImageColor3 = Color3.fromRGB(255, 255, 255)
            }),
            Create("UIStroke", {
                Color = Color3.fromRGB(255, 255, 255),
                Transparency = 0.7,
                Thickness = 1
            })
        }),
        
        Create("TextButton", {
            Size = UDim2.new(0, 32, 0, 24),
            Position = UDim2.new(1, -36, 0, 8),
            BackgroundColor3 = Color3.fromRGB(100, 100, 100),
            BackgroundTransparency = 0,
            Name = "MinimizeButton",
            Text = "",
            BorderSizePixel = 0
        }, {
            Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
            Create("ImageLabel", {
                Size = UDim2.new(0, 14, 0, 14),
                Position = UDim2.new(0.5, -7, 0.5, -7),
                Image = "rbxassetid://9087431519",
                BackgroundTransparency = 1,
                ImageColor3 = Color3.fromRGB(255, 255, 255),
                Name = "MinimizeIcon"
            }),
            Create("UIStroke", {
                Color = Color3.fromRGB(255, 255, 255),
                Transparency = 0.7,
                Thickness = 1
            })
        })
    }
    
    SetChildren(CodeFrame, children)
    MakeShineOnHover(CodeFrame, CodeFrame.Title)
    
    local function updateCodeDisplay()
        local highlightedCode = highlighter.run(config.Content)
        local codeLines = {}
        for line in string.gmatch(highlightedCode, "[^\n]+") do
            table.insert(codeLines, line)
        end
        
        local formattedCode = ""
        for i, line in ipairs(codeLines) do
            local lineNumber = string.format("<font color=\"#6C7086\">%2d</font>", i)
            formattedCode = formattedCode .. lineNumber .. "  " .. line
            if i < #codeLines then
                formattedCode = formattedCode .. "\n"
            end
        end
        
        CodeFrame.CodeContainer.CodeContent.Text = formattedCode
    end
    
    updateCodeDisplay()
    
    CodeFrame.CopyButton.MouseButton1Click:Connect(function()
        local success = pcall(function()
            if setclipboard then
                setclipboard(config.Content)
            elseif syn and syn.write_clipboard then
                syn.write_clipboard(config.Content)
            elseif Clipboard and Clipboard.set then
                Clipboard.set(config.Content)
            else
                return false
            end
            return true
        end)
        
        if success then
            CodeFrame.CopyButton.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
            CodeFrame.CopyButton.ImageLabel.Image = "rbxassetid://14562122532"
            task.spawn(function()
                task.wait(2)
                CodeFrame.CopyButton.BackgroundColor3 = Color3.fromRGB(70, 130, 220)
                CodeFrame.CopyButton.ImageLabel.Image = "rbxassetid://96265482350413"
            end)
        end
    end)
    
    CodeFrame.MinimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        if isMinimized then
            CodeFrame.CodeContainer.Visible = false
            CodeFrame.Size = UDim2.new(1, 0, 0, 40)
            CodeFrame.MinimizeButton.MinimizeIcon.Image = "rbxassetid://13530555599"
            CodeFrame.MinimizeButton.BackgroundColor3 = Color3.fromRGB(220, 100, 70)
        else
            CodeFrame.CodeContainer.Visible = true
            CodeFrame.Size = UDim2.new(1, 0, 0, 40)
            CodeFrame.AutomaticSize = Enum.AutomaticSize.Y
            CodeFrame.MinimizeButton.MinimizeIcon.Image = "rbxassetid://9087431519"
            CodeFrame.MinimizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        end
    end)
    
    local CodeAPI = {}
    
    function CodeAPI:SetCode(Code)
        config.Content = Code
        updateCodeDisplay()
        return self
    end
    
    function CodeAPI:SetTitle(Title)
        config.Name = Title
        CodeFrame.Title.Text = Title
        return self
    end
    
    function CodeAPI:SetVisible(Visible)
        CodeFrame.Visible = Visible
        return self
    end
    
    function CodeAPI:AddParagraph(text)
        local paragraphFrame = Create("Frame", {
            Size = UDim2.new(1, -24, 0, 0),
            Position = UDim2.new(0, 12, 1, 8),
            BackgroundTransparency = 1,
            AutomaticSize = Enum.AutomaticSize.Y,
            Parent = CodeFrame
        }, {
            Create("UIPadding", {
                PaddingLeft = UDim.new(0, 8),
                PaddingRight = UDim.new(0, 8),
                PaddingTop = UDim.new(0, 6),
                PaddingBottom = UDim.new(0, 6)
            }),
            
            AddThemeObject(SetProps(MakeElement("Label", text, 12), {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 0),
                Name = "ParagraphText",
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y,
                TextXAlignment = Enum.TextXAlignment.Left,
                RichText = false,
                TextColor3 = Color3.fromRGB(200, 200, 200)
            }), "Text")
        })
        
        return self
    end
    
    function CodeAPI:Destroy()
        CodeFrame:Destroy()
    end
    
    return CodeAPI
end
function ElementFunction:AddParagraph(Text, Content)
    local config = type(Text) == "table" and Text or {Name=Text, Content=Content}
    
    local defaults = {
        Name = "Text",
        Content = "Content",
        Title = nil,
        Desc = nil,
        image = false,
        Image = nil,
        ImageId = nil,
        ImageSize = 26,
        ImagePosition = "left",
        ImageCorner = true,
        ImageTransparency = 0,
        Thumbnail = nil,
        ThumbnailSize = 120,
        ThumbnailPosition = "top",
        UserProfile = nil,
        Color = "White",
        TextOffset = 0,
        IsButtons = false,
        Hover = false,
        Locked = false,
        custom = false,
        texticon = false,
        name = {},
        color = "red"
    }
    for k,v in pairs(defaults) do
        if config[k] == nil then config[k] = v end
    end
    config.Name = config.Title or config.Name
    config.Content = config.Content or config.Desc

    local function GetImageUrl(imageData, isUserProfile)
        if not imageData then return "" end
        
        if isUserProfile then
            if type(imageData) == "string" and imageData:match("^%d+$") then
                return "https://www.roblox.com/headshot-thumbnail/image?userId="..imageData.."&width=200&height=200&format=png"
            elseif type(imageData) == "number" then
                return "https://www.roblox.com/headshot-thumbnail/image?userId="..tostring(imageData).."&width=200&height=200&format=png"
            end
        end
        
        if type(imageData) == "string" then
            if imageData:match("^https?://") then
                return imageData
            elseif imageData:match("^gh/") then
                return "https://raw.githubusercontent.com/"..string.sub(imageData, 4)
            elseif imageData:match("^%d+$") then
                return "rbxassetid://" .. imageData
            else
                return imageData
            end
        elseif type(imageData) == "number" then
            return "rbxassetid://" .. tostring(imageData)
        end
        
        return ""
    end

    local function GetColorValue(colorInput)
        if type(colorInput) == "string" then
            local colors = {
                Red = Color3.fromRGB(239, 68, 68),
                Green = Color3.fromRGB(34, 197, 94),
                Blue = Color3.fromRGB(59, 130, 246),
                Yellow = Color3.fromRGB(234, 179, 8),
                Purple = Color3.fromRGB(168, 85, 247),
                Orange = Color3.fromRGB(249, 115, 22),
                Pink = Color3.fromRGB(236, 72, 153),
                Cyan = Color3.fromRGB(6, 182, 212),
                White = Color3.fromRGB(255, 255, 255)
            }
            return colors[colorInput] or Color3.fromRGB(255, 255, 255)
        elseif typeof(colorInput) == "Color3" then
            return colorInput
        end
        return Color3.fromRGB(255, 255, 255)
    end

    local function GetHexColor(colorInput)
        local color = GetColorValue(colorInput)
        return string.format("rgb(%d,%d,%d)", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255))
    end

    local function AnimateRainbowBackground(frame)
        if not frame or not frame:IsA("Frame") then
            return
        end

        task.spawn(function()
            local success = pcall(function()
                local hue = math.random()
                local speed = 0.01
                local updateInterval = 0.05

                while frame.Parent and task.wait(updateInterval) do
                    hue = (hue + speed) % 1
                    if frame and frame.Parent then
                        frame.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                    else
                        break
                    end
                end
            end)
        end)
    end

    local function AnimateRainbowDescription(textLabelInstance, baseTextParam, descriptionContentParam)
        if not textLabelInstance or not textLabelInstance:IsA("TextLabel") or not descriptionContentParam or descriptionContentParam == "" then
            return
        end
        task.spawn(function()
            local success_pcall = pcall(function()
                local hue = math.random()
                local speed = 0.015
                local updateInterval = 0.06
                local prefixText = baseTextParam .. "\n    "
                while textLabelInstance.Parent and task.wait(updateInterval) do
                    hue = (hue + speed) % 1
                    local color3Value = Color3.fromHSV(hue, 1, 1)
                    local colorString = string.format("rgb(%d,%d,%d)", math.floor(color3Value.R * 255), math.floor(color3Value.G * 255), math.floor(color3Value.B * 255))
                    if textLabelInstance and textLabelInstance.Parent then
                        textLabelInstance.Text = prefixText .. "<font color='" .. colorString .. "'>" .. descriptionContentParam .. "</font>"
                    else
                        break
                    end
                end
            end)
        end)
    end

    local function GetUserInfo(userId)
        if not userId then return nil, nil end
        
        local userIdString = tostring(userId)
        local success, result = pcall(function()
            return game:GetService("Players"):GetUserInfoByIdAsync(tonumber(userIdString))
        end)
        
        if success and result then
            return result.Username, result.DisplayName
        end
        return nil, nil
    end

    local ParagraphFrame = AddThemeObject(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255,255,255), 0, 5), {
        Size = UDim2.new(1, 0, 0, 30),
        AutomaticSize = Enum.AutomaticSize.Y,
        BackgroundTransparency = 0.7,
        Parent = ItemParent,
        ClipsDescendants = true
    }), "Second")

    local children = {}
    local contentYOffset = 26
    local titleXOffset = 12
    local hasImage = config.image == true and (config.Image or config.ImageId or config.UserProfile)

    if hasImage then
        local imageUrl = ""
        
        if config.UserProfile then
            imageUrl = GetImageUrl(config.UserProfile, true)
        elseif config.Image then
            imageUrl = GetImageUrl(config.Image, false)
        elseif config.ImageId then
            imageUrl = GetImageUrl(config.ImageId, false)
        end

        local thumbConfig = {
            IconSize = config.ImageSize,
            BorderSize = 4,
            ContainerPadding = 10,
            GlowAsset = "rbxassetid://4996891970",
            Rounding = {
                Background = 12,
                Image = 8,
            }
        }

        local avatarContainerHeight = thumbConfig.IconSize + (thumbConfig.BorderSize * 2)

        local avatarContainer = Instance.new("Frame")
        avatarContainer.Name = "AvatarContainer"
        avatarContainer.Size = UDim2.new(0, avatarContainerHeight, 0, avatarContainerHeight)
        avatarContainer.Position = UDim2.new(0, thumbConfig.ContainerPadding, 0, 24)
        avatarContainer.BackgroundTransparency = 1
        avatarContainer.ZIndex = 2

        local avatarBg = Instance.new("Frame")
        avatarBg.Name = "AvatarBackground"
        avatarBg.Size = UDim2.new(1, 0, 1, 0)
        avatarBg.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        avatarBg.BorderSizePixel = 0
        avatarBg.Parent = avatarContainer

        if config.custom then
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, thumbConfig.Rounding.Background)
            corner.Parent = avatarBg
            AnimateRainbowBackground(avatarBg)
        else
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(config.UserProfile and 1 or 0.2, 0)
            corner.Parent = avatarBg
        end

        local icon = Instance.new("ImageLabel")
        icon.Name = "Avatar"
        icon.Image = imageUrl
        icon.Size = UDim2.new(0, thumbConfig.IconSize, 0, thumbConfig.IconSize)
        icon.Position = UDim2.new(0.5, -thumbConfig.IconSize/2, 0.5, -thumbConfig.IconSize/2)
        icon.BackgroundTransparency = 1
        icon.ZIndex = avatarBg.ZIndex + 2
        icon.Parent = avatarBg

        local imageCorner = Instance.new("UICorner")
        imageCorner.CornerRadius = UDim.new(0, thumbConfig.Rounding.Image)
        imageCorner.Parent = icon

        table.insert(children, avatarContainer)
        contentYOffset = contentYOffset + avatarContainerHeight + 8
        titleXOffset = thumbConfig.ContainerPadding + avatarContainerHeight + thumbConfig.ContainerPadding
    end

    local titleText = config.Name or "Text"
    local finalTitleText = titleText

    if config.UserProfile then
        local username, displayName = GetUserInfo(config.UserProfile)
        if username and displayName then
            finalTitleText = displayName .. " (@" .. username .. ")"
        elseif username then
            finalTitleText = username
        end
    end

    if config.texticon and config.name and type(config.name) == "table" and #config.name > 0 then
        local iconText = ""
        for _, iconName in ipairs(config.name) do
            iconText = iconText .. " <font color='" .. GetHexColor(config.color) .. "'>" .. tostring(iconName) .. "</font>"
        end
        finalTitleText = finalTitleText .. iconText
    end

    local titleLabel = AddThemeObject(SetProps(MakeElement("Label", finalTitleText, 15), {
        Size = UDim2.new(1, -(titleXOffset + 12), 0, 14),
        Position = UDim2.new(0, titleXOffset, 0, 10),
        Font = Enum.Font.GothamBold,
        Name = "Title",
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true
    }), "Text")

    table.insert(children, titleLabel)

    if config.Thumbnail then
        local thumbnail = Create("ImageLabel", {
            Name = "Thumbnail",
            Size = UDim2.new(1, -24, 0, config.ThumbnailSize),
            Position = UDim2.new(0, 12, 0, contentYOffset),
            BackgroundTransparency = 1,
            Image = GetImageUrl(config.Thumbnail, false),
            ScaleType = Enum.ScaleType.Crop
        })
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = thumbnail
        })
        table.insert(children, thumbnail)
        contentYOffset = contentYOffset + config.ThumbnailSize + 8
    end

    local contentLabel = AddThemeObject(SetProps(MakeElement("Label", config.Content, config.custom and 16 or 13), {
        Size = UDim2.new(1, -(titleXOffset + 12), 0, 0),
        Position = UDim2.new(0, titleXOffset, 0, contentYOffset),
        Font = config.custom and Enum.Font.GothamBold or Enum.Font.GothamSemibold,
        Name = "Content",
        TextWrapped = true,
        AutomaticSize = Enum.AutomaticSize.Y,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true
    }), "TextDark")

    if config.custom then
        AnimateRainbowDescription(contentLabel, "", config.Content)
    end

    table.insert(children, contentLabel)

    if config.Color and config.Color ~= "White" then
        local colorFrame = Create("Frame", {
            Name = "ColorFrame",
            Size = UDim2.new(0, 4, 1, -20),
            Position = UDim2.new(0, 0, 0, 10),
            BackgroundColor3 = GetColorValue(config.Color),
            BorderSizePixel = 0
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 2),
            Parent = colorFrame
        })
        
        table.insert(children, colorFrame)
    end

    table.insert(children, AddThemeObject(MakeElement("Stroke"), "Stroke"))
    table.insert(children, Create("UIPadding", {PaddingBottom=UDim.new(0,10)}))

    SetChildren(ParagraphFrame, children)
    MakeShineOnHover(ParagraphFrame, titleLabel)
    MakeShineOnHover(ParagraphFrame, contentLabel)

    local ParagraphAPI = {}
    
    function ParagraphAPI:Set(Content)
        if contentLabel then
            if config.custom then
                AnimateRainbowDescription(contentLabel, "", Content)
            else
                contentLabel.Text = Content
            end
        end
        return self
    end
    
    function ParagraphAPI:SetTitle(Title)
        if titleLabel then
            local newTitle = Title
            
            if config.UserProfile then
                local username, displayName = GetUserInfo(config.UserProfile)
                if username and displayName then
                    newTitle = displayName .. " (@" .. username .. ")"
                elseif username then
                    newTitle = username
                end
            end
            
            if config.texticon and config.name and type(config.name) == "table" and #config.name > 0 then
                local iconText = ""
                for _, iconName in ipairs(config.name) do
                    iconText = iconText .. " <font color='" .. GetHexColor(config.color) .. "'>" .. tostring(iconName) .. "</font>"
                end
                newTitle = newTitle .. iconText
            end
            
            titleLabel.Text = newTitle
        end
        return self
    end
    
    function ParagraphAPI:SetImage(Image)
        if ParagraphFrame:FindFirstChild("AvatarContainer") then
            local container = ParagraphFrame.AvatarContainer
            if container:FindFirstChild("AvatarBackground") and container.AvatarBackground:FindFirstChild("Avatar") then
                container.AvatarBackground.Avatar.Image = GetImageUrl(Image, false)
            end
        end
        return self
    end
    
    function ParagraphAPI:SetUserProfile(UserId)
        if ParagraphFrame:FindFirstChild("AvatarContainer") then
            local container = ParagraphFrame.AvatarContainer
            if container:FindFirstChild("AvatarBackground") and container.AvatarBackground:FindFirstChild("Avatar") then
                container.AvatarBackground.Avatar.Image = GetImageUrl(UserId, true)
            end
        end
        return self
    end
    
    function ParagraphAPI:SetThumbnail(Thumbnail)
        if ParagraphFrame:FindFirstChild("Thumbnail") then
            ParagraphFrame.Thumbnail.Image = GetImageUrl(Thumbnail, false)
        end
        return self
    end
    
    function ParagraphAPI:SetVisible(Visible)
        ParagraphFrame.Visible = Visible
        return self
    end
    
    function ParagraphAPI:SetColor(Color)
        if ParagraphFrame:FindFirstChild("ColorFrame") then
            ParagraphFrame.ColorFrame.BackgroundColor3 = GetColorValue(Color)
        end
        return self
    end
    
    function ParagraphAPI:Destroy()
        if ParagraphFrame then
            ParagraphFrame:Destroy()
        end
    end

    return ParagraphAPI
end
		function ElementFunction:AddButton(ButtonConfig)
			ButtonConfig = ButtonConfig or {}
			ButtonConfig.Name = ButtonConfig.Name or "Button"
			ButtonConfig.Callback = ButtonConfig.Callback or function() end
			ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://10489703350"
			ButtonConfig.Locked = ButtonConfig.Locked or false
			ButtonConfig.Image = ButtonConfig.Image or nil

			local Button = {}

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local Stroke = AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
			local NeonGlow = Create("UIStroke", {
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				Color = Color3.fromRGB(255,0,150),
				Thickness = 4,
				Transparency = 1,
				Enabled = false
			})

			local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1,0,1,0), BackgroundTransparency=1 })

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content",
				Parent = contentHolder,
			}), "Text")

			local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 33),
				Parent = ItemParent,
				ClipsDescendants = true,
			}), {
				contentHolder,
				AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(1, -30, 0, 7),
				}), "TextDark"),
				Stroke,
				NeonGlow,
				Click
			}), "Second")
			contentHolder.Parent = ButtonFrame
			
			Button.Wrapper = ButtonFrame; Button.Name = ButtonConfig.Name; Button.Type = "Button"
			table.insert(OrionLib.AllElements, Button)
			SetupElement(ButtonConfig, ButtonFrame, Click, Button)

			MakeShineOnHover(Click, contentLabel)

			AddConnection(RunService.RenderStepped, function()
				local t = tick()
				local hue = (t * 0.2) % 1
				NeonGlow.Color = Color3.fromHSV(hue, 1, 1)
			end)


			AddConnection(Click.MouseEnter, function()
				if ButtonConfig.Locked then return end
				local hoverColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { BackgroundColor3 = hoverColor }):Play()
				NeonGlow.Enabled = true
				TweenService:Create(NeonGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Transparency = 0.5 }):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				if ButtonConfig.Locked then return end
				local defaultColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
				TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { BackgroundColor3 = defaultColor }):Play()
				local tween = TweenService:Create(NeonGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Transparency = 1 })
				tween.Completed:Connect(function() NeonGlow.Enabled = false end)
				tween:Play()
			end)

			AddConnection(Click.MouseButton1Down, function()
				if ButtonConfig.Locked then return end
				local pressedColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(0,0,0), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), { BackgroundColor3 = pressedColor }):Play()
				TweenService:Create(NeonGlow, TweenInfo.new(0.1), { Transparency = 0.2 }):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				if ButtonConfig.Locked then return end
				local hoverColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), { BackgroundColor3 = hoverColor }):Play()
				TweenService:Create(NeonGlow, TweenInfo.new(0.2), { Transparency = 0.5 }):Play()
				task.spawn(ButtonConfig.Callback)
			end)


			function Button:Set(ButtonText)
				if ButtonFrame and ButtonFrame.Content then
					ButtonFrame.Content.Text = ButtonText
				end
			end

			return Button
		end
		function ElementFunction:AddToggle(ToggleConfig)
	ToggleConfig = ToggleConfig or {}
	ToggleConfig.Name = ToggleConfig.Name or "Toggle"
	ToggleConfig.Default = ToggleConfig.Default or false
	ToggleConfig.Callback = ToggleConfig.Callback or function() end
	ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(130, 80, 220)
	ToggleConfig.Flag = ToggleConfig.Flag or nil
	ToggleConfig.Save = ToggleConfig.Save or false
	ToggleConfig.Locked = ToggleConfig.Locked or false
	ToggleConfig.Image = ToggleConfig.Image or nil
	ToggleConfig.Checkbox = ToggleConfig.Checkbox or false -- New: Use checkbox instead of toggle
	ToggleConfig.ImageIcon = ToggleConfig.ImageIcon or false -- New: Show image when enabled
	ToggleConfig.ImageId = ToggleConfig.ImageId or "rbxassetid://3944680095" -- New: Image ID to display

	local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"}

	local Click = SetProps(MakeElement("Button"), {
		Size = UDim2.new(1, 0, 1, 0)
	})

	local toggleElement

	-- Create checkbox or toggle based on config
	if ToggleConfig.Checkbox then
		-- Checkbox version
		toggleElement = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
			Size = UDim2.new(0, 24, 0, 24),
			Position = UDim2.new(1, -24, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5)
		}), {
			SetProps(MakeElement("Stroke"), {
				Color = ToggleConfig.Color,
				Name = "Stroke",
				Transparency = 0.5
			})
		})

		-- Add image icon if enabled
		if ToggleConfig.ImageIcon then
			local imageIcon = SetProps(MakeElement("Image", ToggleConfig.ImageId), {
				Size = UDim2.new(0, 20, 0, 20),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Name = "ImageIcon",
				ImageTransparency = 1
			})
			imageIcon.Parent = toggleElement
		else
			-- Default checkmark icon
			local checkIcon = SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
				Size = UDim2.new(0, 20, 0, 20),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Name = "CheckIcon",
				ImageTransparency = 1
			})
			checkIcon.Parent = toggleElement
		end
	else
		-- Toggle pill version
		toggleElement = SetChildren(SetProps(MakeElement("RoundFrame", nil, 1, 0), {
			Size = UDim2.new(0, 38, 0, 20),
			Position = UDim2.new(1, -24, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5)
		}), {
			SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 0), {
				Name = "Knob",
				Size = UDim2.new(0, 16, 0, 16),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0, 10, 0.5, 0)
			})
		})

		-- Add image icon to knob if enabled
		if ToggleConfig.ImageIcon then
			local imageIcon = SetProps(MakeElement("Image", ToggleConfig.ImageId), {
				Size = UDim2.new(0, 12, 0, 12),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				ImageColor3 = Color3.fromRGB(0, 0, 0),
				Name = "ImageIcon",
				ImageTransparency = 1
			})
			imageIcon.Parent = toggleElement.Knob
		end
	end
	
	local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1, -50, 1, 0), Position = UDim2.new(0,0,0,0), BackgroundTransparency=1 })

	local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
		Size = UDim2.new(1, 0, 1, 0),
		Position = UDim2.new(0, 12, 0, 0),
		Font = Enum.Font.GothamBold,
		Name = "Content",
		Parent = contentHolder,
	}), "Text")

	local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
		Size = UDim2.new(1, 0, 0, 38),
		Parent = ItemParent
	}), {
		contentHolder,
		AddThemeObject(MakeElement("Stroke"), "Stroke"),
		ToggleConfig.Checkbox and AddThemeObject(toggleElement, "Second") or AddThemeObject(toggleElement, "Divider"),
		Click
	}), "Second")
	contentHolder.Parent = ToggleFrame
	
	Toggle.Wrapper = ToggleFrame; Toggle.Name = ToggleConfig.Name; Toggle.Type = "Toggle"
	table.insert(OrionLib.AllElements, Toggle)
	SetupElement(ToggleConfig, ToggleFrame, Click, Toggle)

	MakeShineOnHover(Click, contentLabel)

	function Toggle:Set(Value)
		Toggle.Value = Value
		
		if ToggleConfig.Checkbox then
			-- Checkbox behavior
			local bgColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Divider
			local strokeColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Stroke
			
			TweenService:Create(toggleElement, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = bgColor}):Play()
			TweenService:Create(toggleElement.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = strokeColor}):Play()
			
			-- Handle icon visibility
			local icon = ToggleConfig.ImageIcon and toggleElement:FindFirstChild("ImageIcon") or toggleElement:FindFirstChild("CheckIcon")
			if icon then
				local iconTransparency = Toggle.Value and 0 or 1
				local iconSize = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)
				TweenService:Create(icon, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
					ImageTransparency = iconTransparency, 
					Size = iconSize
				}):Play()
			end
		else
			-- Toggle pill behavior
			local pillColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Divider
			local knobPosition = Toggle.Value and UDim2.new(0, 28, 0.5, 0) or UDim2.new(0, 10, 0.5, 0)

			TweenService:Create(toggleElement, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = pillColor}):Play()
			TweenService:Create(toggleElement.Knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = knobPosition}):Play()
			
			-- Handle image icon in knob
			if ToggleConfig.ImageIcon then
				local imageIcon = toggleElement.Knob:FindFirstChild("ImageIcon")
				if imageIcon then
					local iconTransparency = Toggle.Value and 0 or 1
					TweenService:Create(imageIcon, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {ImageTransparency = iconTransparency}):Play()
				end
			end
		end

		pcall(ToggleConfig.Callback, Toggle.Value)
	end

	Toggle:Set(Toggle.Value)

	AddConnection(Click.MouseEnter, function()
		if ToggleConfig.Locked then return end
		local hoverColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.1)
		TweenService:Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
	end)

	AddConnection(Click.MouseLeave, function()
		if ToggleConfig.Locked then return end
		local defaultColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
		TweenService:Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = defaultColor}):Play()
	end)

	AddConnection(Click.MouseButton1Down, function()
		if ToggleConfig.Locked then return end
		local pressedColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(0,0,0), 0.1)
		TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = pressedColor}):Play()
	end)

	AddConnection(Click.MouseButton1Up, function()
		if ToggleConfig.Locked then return end
		local hoverColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.1)
		TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
		if OrionLib.SaveCfg and ToggleConfig.Save then pcall(SaveCfg, game.GameId) end
		Toggle:Set(not Toggle.Value)
	end)

	if ToggleConfig.Flag then
		OrionLib.Flags[ToggleConfig.Flag] = Toggle
	end
	return Toggle
end
		function ElementFunction:AddSlider(SliderConfig)
			SliderConfig = SliderConfig or {}
			SliderConfig.Name = SliderConfig.Name or "Slider"
			SliderConfig.Min = SliderConfig.Min or 0
			SliderConfig.Max = SliderConfig.Max or 100
			SliderConfig.Increment = SliderConfig.Increment or 1
			SliderConfig.Default = SliderConfig.Default or 50
			SliderConfig.Callback = SliderConfig.Callback or function() end
			SliderConfig.ValueName = SliderConfig.ValueName or ""
			SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(150, 50, 220)
			SliderConfig.Flag = SliderConfig.Flag or nil
			SliderConfig.Save = SliderConfig.Save or false
			SliderConfig.Locked = SliderConfig.Locked or false
			SliderConfig.Image = SliderConfig.Image or nil
			SliderConfig.input = SliderConfig.input or false

			local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"}
			local Dragging = false
			local SliderKnob
			local KnobValueText
			local FillValueTextLabel

			FillValueTextLabel = SetProps(MakeElement("Label", "", 12), {
				Name = "FillValueText",
				Size = UDim2.new(1, -10, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Center,
				BackgroundTransparency = 1,
			})
			AddThemeObject(FillValueTextLabel, "Text")
			FillValueTextLabel.TextTransparency = 0

			local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
				Name = "SliderDrag",
				Size = UDim2.fromScale(0, 0),
				ClipsDescendants = true,
				ZIndex = 2
			}), {
				Create("UIGradient"),
				FillValueTextLabel
			})

			local dragGradient = SliderDrag.UIGradient
			AddConnection(RunService.RenderStepped, function()
				local t = tick()
				local color1 = Color3.fromHSV((t * 0.2) % 1, 1, 1)
				local color2 = Color3.fromHSV((t * 0.2 + 0.1) % 1, 1, 1)
				dragGradient.Color = ColorSequence.new(color1, color2)
				dragGradient.Rotation = 90
			end)


			local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
				Name = "SliderBar",
				Size = UDim2.new(1, -24, 0, 26),
				Position = UDim2.new(0, 12, 0, 30),
				BackgroundTransparency = 0.9,
				ZIndex = 1
			}), {
				AddThemeObject(SetProps(MakeElement("Stroke"), {
					Transparency = 0.5
				}), "Stroke"),
				SliderDrag
			})

			SliderKnob = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), {
				Name = "SliderKnob",
				Size = UDim2.new(0, 12, 0, 22),
				BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0,0,0.5,0),
				ZIndex = SliderBar.ZIndex + 2,
				Parent = SliderBar,
			}),{
				AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
			}), "Text")

			KnobValueText = AddThemeObject(SetProps(MakeElement("Label", "", 12), {
				Name = "KnobValueText",
				Size = UDim2.new(0, 60, 0, 16),
				AnchorPoint = Vector2.new(0.5, 1),
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Bottom,
				Font = Enum.Font.GothamBold,
				ZIndex = SliderBar.ZIndex + 3,
				BackgroundTransparency = 1,
				Parent = SliderBar
			}), "Text")
			KnobValueText.TextTransparency = 0
			
			local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1, -12, 0, 14), Position=UDim2.new(0,12,0,10), BackgroundTransparency=1 })

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
				Size = UDim2.new(1, (SliderConfig.input and -70 or 0), 1, 0),
				Position = UDim2.new(0, 0, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content",
			}), "Text")

			local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
				Size = UDim2.new(1, 0, 0, 65),
				Parent = ItemParent
			}), {
				contentHolder,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				SliderBar
			}), "Second")
			contentHolder.Parent = SliderFrame
			contentLabel.Parent = contentHolder
			
			Slider.Wrapper = SliderFrame; Slider.Name = SliderConfig.Name; Slider.Type = "Slider"
			table.insert(OrionLib.AllElements, Slider)
			SetupElement(SliderConfig, SliderFrame, SliderBar, Slider)

			if SliderConfig.input then
				local InputBox = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(0, 60, 0, 20),
					Position = UDim2.new(1, 0, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5),
					Font = Enum.Font.GothamSemibold,
					Text = tostring(Slider.Value),
					TextSize = 13,
					TextXAlignment = Enum.TextXAlignment.Center,
					ClearTextOnFocus = false,
					Parent = contentHolder,
				}), "Main")
				SetChildren(InputBox, {AddThemeObject(MakeElement("Stroke"), "Stroke"), MakeElement("Corner", 0, 4)})
				Slider.InputBox = InputBox

				AddConnection(InputBox.FocusLost, function(enterPressed)
					if SliderConfig.Locked then InputBox.Text = tostring(Slider.Value); return end
					local num = tonumber(InputBox.Text)
					if num then
						Slider:Set(num)
						if OrionLib.SaveCfg and SliderConfig.Save then pcall(SaveCfg, game.GameId) end
					else
						InputBox.Text = tostring(Slider.Value)
					end
				end)

				local previousInputText = InputBox.Text
				AddConnection(InputBox:GetPropertyChangedSignal("Text"), function()
					if SliderConfig.Locked then InputBox.Text = previousInputText; return end
					local text = InputBox.Text
					if text:match("^[-%d]*%.?[%d]*$") then
						previousInputText = text
					else
						local pos = InputBox.CursorPosition
						InputBox.Text = previousInputText
						InputBox.CursorPosition = math.min(pos, #previousInputText + 1)
					end
				end)
			end

			MakeShineOnHover(SliderFrame, contentLabel)
			MakeShineOnHover(SliderBar, KnobValueText)
			MakeShineOnHover(SliderDrag, FillValueTextLabel)

			local knobOriginalSize = SliderKnob.Size
			local knobPressedSize = UDim2.new(knobOriginalSize.X.Scale, knobOriginalSize.X.Offset + 2, knobOriginalSize.Y.Scale, knobOriginalSize.Y.Offset + 2)


			AddConnection(SliderBar.InputBegan, function(Input)
				if SliderConfig.Locked then return end
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					Dragging = true
					TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobPressedSize}):Play()

					local interactionPos = Input.Position
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						interactionPos = UserInputService:GetMouseLocation()
					end
					local relativeX = interactionPos.X - SliderBar.AbsolutePosition.X
					local SizeScale = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
					Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
					if OrionLib.SaveCfg and SliderConfig.Save then pcall(SaveCfg, game.GameId) end
				end
			end)
			AddConnection(SliderBar.InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					Dragging = false
					TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobOriginalSize}):Play()
					if OrionLib.SaveCfg and SliderConfig.Save then pcall(SaveCfg, game.GameId) end
				end
			end)

			AddConnection(UserInputService.InputChanged, function(Input)
				if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
					local interactionPos = Input.Position
					if Input.UserInputType == Enum.UserInputType.MouseMovement then
						interactionPos = UserInputService:GetMouseLocation()
					end
					local SizeScale = math.clamp((interactionPos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
					Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
				end
			end)

			function Slider:Set(Value)
				self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
				local percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
				if SliderConfig.Max == SliderConfig.Min then percentage = 0 end

				local tweenInfo = TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

				TweenService:Create(SliderDrag, tweenInfo, {Size = UDim2.fromScale(percentage, 1)}):Play()
				if SliderKnob then
					TweenService:Create(SliderKnob, tweenInfo, {Position = UDim2.new(percentage, 0, 0.5, 0)}):Play()
				end

				local displayValue = tostring(self.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")

				if KnobValueText then
					KnobValueText.Text = displayValue
					KnobValueText.Position = UDim2.new(percentage, 0, 0, -5)
				end

				if FillValueTextLabel then
					FillValueTextLabel.Text = displayValue
				end

				if self.InputBox then
					self.InputBox.Text = tostring(self.Value)
				end

				pcall(SliderConfig.Callback, self.Value)
			end

			Slider:Set(Slider.Value)
			if SliderConfig.Flag then
				OrionLib.Flags[SliderConfig.Flag] = Slider
			end
			return Slider
		end
	function ElementFunction:AddDropdown(DropdownConfig)
    DropdownConfig = DropdownConfig or {}
    DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
    DropdownConfig.Options = DropdownConfig.Options or {}
    DropdownConfig.Default = DropdownConfig.Default or ""
    DropdownConfig.Callback = DropdownConfig.Callback or function() end
    DropdownConfig.Flag = DropdownConfig.Flag or nil
    DropdownConfig.Save = DropdownConfig.Save or false
    DropdownConfig.Locked = DropdownConfig.Locked or false
    DropdownConfig.Image = DropdownConfig.Image or nil
    DropdownConfig.Search = DropdownConfig.Search or false
    DropdownConfig.MultiSelect = DropdownConfig.MultiSelect or false
    DropdownConfig.Fill = DropdownConfig.Fill or false
    DropdownConfig.FillColor = DropdownConfig.FillColor or "Red"
    DropdownConfig.FillTransparency = DropdownConfig.FillTransparency or 0.5
    DropdownConfig.Outline = DropdownConfig.Outline or false
    DropdownConfig.OutlineColor = DropdownConfig.OutlineColor or "Green"

    local colorMap = {
        Red = Color3.fromRGB(255, 100, 100),
        Green = Color3.fromRGB(100, 255, 100),
        Blue = Color3.fromRGB(100, 100, 255),
        Yellow = Color3.fromRGB(255, 255, 100),
        Purple = Color3.fromRGB(200, 100, 255),
        Orange = Color3.fromRGB(255, 150, 50)
    }

    local finalFillColor
    if type(DropdownConfig.FillColor) == "Color3" then
        finalFillColor = DropdownConfig.FillColor
    else
        finalFillColor = colorMap[tostring(DropdownConfig.FillColor)] or Color3.fromRGB(255, 100, 100)
    end

    local Dropdown = {
        Value = DropdownConfig.Default, 
        Options = DropdownConfig.Options, 
        Buttons = {}, 
        Toggled = false, 
        Type = "Dropdown", 
        Save = DropdownConfig.Save,
        MultiSelect = DropdownConfig.MultiSelect,
        SelectedValues = DropdownConfig.MultiSelect and {} or nil
    }
    
    local MaxElements = 5
    
    local searchBox
    local searchContainer
    
    local DropdownContainer = AddThemeObject(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
        Position = UDim2.new(0, 0, 0, 38),
        Size = UDim2.new(1, 0, 1, -38),
        ClipsDescendants = true,
        BackgroundTransparency = 1,
    }), "Second")

    local DropdownList = MakeElement("List", 0, 4)
    DropdownList.Parent = DropdownContainer

    local DropdownPadding = MakeElement("Padding", 4,4,4,4)
    DropdownPadding.Parent = DropdownContainer

    if DropdownConfig.Search then
        searchContainer = Create("Frame", {
            Name = "SearchContainer",
            Size = UDim2.new(1, 0, 0, 32),
            BackgroundTransparency = 1,
            Parent = DropdownContainer,
            Visible = false,
            LayoutOrder = -1,
        })
        searchBox = Create("TextBox", {
            Size = UDim2.new(1, -8, 1, -8),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = OrionLib.Themes.Default.Main,
            TextColor3 = OrionLib.Themes.Default.Text,
            PlaceholderText = "Search",
            PlaceholderColor3 = OrionLib.Themes.Default.TextDark,
            Font = Enum.Font.GothamSemibold,
            TextSize = 13,
            ClearTextOnFocus = false,
            Parent = searchContainer
        })
        Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = searchBox })
        AddThemeObject(Create("UIStroke", { Thickness = 1.2 }), "Stroke").Parent = searchBox
    end

    local Click = SetProps(MakeElement("Button"), {
        Size = UDim2.new(1, 0, 1, 0)
    })

    local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1, -12, 1, 0), Position=UDim2.new(0,12,0,0), BackgroundTransparency=1 })

    local contentLabel = AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Name = "Content",
        Parent = contentHolder
    }), "Text")
    
    local selectedLabel = AddThemeObject(SetProps(MakeElement("Label", Dropdown.MultiSelect and "Select options" or "Selected", 13), {
        Size = UDim2.new(1, -40, 1, 0),
        Font = Enum.Font.Gotham,
        Name = "Selected",
        TextXAlignment = Enum.TextXAlignment.Right
    }), "TextDark")

    local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
        Size = UDim2.new(1, 0, 0, 38),
        Parent = ItemParent,
        ClipsDescendants = true
    }), {
        DropdownContainer,
        SetProps(SetChildren(MakeElement("TFrame"), {
            contentHolder,
            AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
                Size = UDim2.new(0, 20, 0, 20),
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(1, -30, 0.5, 0),
                ImageColor3 = Color3.fromRGB(240, 240, 240),
                Name = "Ico"
            }), "TextDark"),
            selectedLabel,
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 1, -1),
                Name = "Line",
                Visible = false
            }), "Stroke"),
            Click
        }), {
            Size = UDim2.new(1, 0, 0, 38),
            ClipsDescendants = true,
            Name = "F"
        }),
        AddThemeObject(MakeElement("Stroke"), "Stroke"),
        MakeElement("Corner")
    }), "Second")
    contentHolder.Parent = DropdownFrame.F
    
    Dropdown.Wrapper = DropdownFrame; Dropdown.Name = DropdownConfig.Name; Dropdown.Type = "Dropdown"
    table.insert(OrionLib.AllElements, Dropdown)
    SetupElement(DropdownConfig, DropdownFrame, Click, Dropdown)

    MakeShineOnHover(Click, contentLabel)
    MakeShineOnHover(Click, selectedLabel)

    DropdownContainer.Parent = DropdownFrame

    AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if DropdownContainer and DropdownList then
            DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + (searchContainer and searchContainer.AbsoluteSize.Y or 0))
        end
    end)

    local function AddOptions(Options)
        for _, optionData in pairs(Options) do
            local optionName, optionImage
            if type(optionData) == "table" then
                optionName = optionData.Name
                optionImage = optionData.Image
            else
                optionName = tostring(optionData)
            end

            local optionBtn = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
                Size = UDim2.new(1, 0, 0, 28),
                Parent = DropdownContainer,
                BackgroundColor3 = OrionLib.Themes.Default.Main,
                BackgroundTransparency = 1
            }), {
                MakeElement("Corner", 0, 4)
            }), "Main")
            
            local title
            if optionImage then
                Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 6), Parent = optionBtn })
                Create("UIPadding", { PaddingLeft = UDim.new(0, 8), Parent = optionBtn })
                Create("ImageLabel", {
                    Name = "OptionImage",
                    Image = optionImage,
                    Size = UDim2.new(0, 18, 0, 18),
                    BackgroundTransparency = 1
                })
                title = AddThemeObject(SetProps(MakeElement("Label", optionName, 13), {
                    Name = "Title", TextTransparency = 0.4
                }), "Text")
            else
                title = AddThemeObject(SetProps(MakeElement("Label", optionName, 13), {
                    Name = "Title", Size = UDim2.new(1,-16,1,0), Position = UDim2.new(0,8,0,0), TextTransparency = 0.4
                }), "Text")
            end
            title.Parent = optionBtn

            local selectionStroke
            if DropdownConfig.Outline then
                selectionStroke = Create("UIStroke", {
                    Name = "SelectionStroke", ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                    Color = colorMap[DropdownConfig.OutlineColor] or Color3.fromRGB(0, 255, 127),
                    Thickness = 1.5,
                    Transparency = 1, Enabled = false, Parent = optionBtn
                })
            end

            local checkmark
            if Dropdown.MultiSelect then
                checkmark = Create("ImageLabel", {
                    Name = "Checkmark",
                    Image = "rbxassetid://7072718332",
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(1, -24, 0.5, -8),
                    AnchorPoint = Vector2.new(1, 0.5),
                    BackgroundTransparency = 1,
                    ImageTransparency = 1,
                    Parent = optionBtn
                })
            end

            MakeShineOnHover(optionBtn, title)

            AddConnection(optionBtn.MouseEnter, function()
                TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
            end)

            AddConnection(optionBtn.MouseLeave, function()
                if not Dropdown.MultiSelect and Dropdown.Value ~= optionName then
                    TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0.4}):Play()
                elseif Dropdown.MultiSelect and not Dropdown.SelectedValues[optionName] then
                    TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0.4}):Play()
                end
            end)

            AddConnection(optionBtn.MouseButton1Click, function()
                if Dropdown.MultiSelect then
                    Dropdown.SelectedValues[optionName] = not Dropdown.SelectedValues[optionName]
                    
                    if checkmark then
                        TweenService:Create(checkmark, TweenInfo.new(0.2), {
                            ImageTransparency = Dropdown.SelectedValues[optionName] and 0 or 1
                        }):Play()
                    end
                    
                    -- Apply fill color logic for selected items
                    if Dropdown.SelectedValues[optionName] then
                        if DropdownConfig.Fill then
                            optionBtn.BackgroundColor3 = finalFillColor
                            optionBtn.BackgroundTransparency = tonumber(DropdownConfig.FillTransparency) or 0.5
                        end
                        if DropdownConfig.Outline and selectionStroke then
                            selectionStroke.Enabled = true
                            TweenService:Create(selectionStroke, TweenInfo.new(0.2), {Transparency = 0}):Play()
                        end
                        TweenService:Create(title, TweenInfo.new(0.2), {TextTransparency = 0}):Play()
                    else
                        optionBtn.BackgroundColor3 = OrionLib.Themes.Default.Main
                        optionBtn.BackgroundTransparency = 1
                        if DropdownConfig.Outline and selectionStroke then
                            TweenService:Create(selectionStroke, TweenInfo.new(0.2), {Transparency = 1}):Play()
                        end
                        TweenService:Create(title, TweenInfo.new(0.2), {TextTransparency = 0.4}):Play()
                    end
                    
                    local selectedCount = 0
                    for _,v in pairs(Dropdown.SelectedValues) do
                        if v then
                           selectedCount = selectedCount + 1
                        end
                    end
                    selectedLabel.Text = selectedCount > 0 and ("Selected: "..selectedCount) or "Select options"
                    
                    local selected = {}
                    for k, v in pairs(Dropdown.SelectedValues) do
                        if v then table.insert(selected, k) end
                    end
                    pcall(DropdownConfig.Callback, selected)
                else
                    Dropdown:Set(optionName)
                    if OrionLib.SaveCfg and DropdownConfig.Save then pcall(SaveCfg, game.GameId) end
                end
            end)

            Dropdown.Buttons[optionName] = optionBtn
        end
    end

    function Dropdown:Refresh(Options, Delete)
        if Delete then
            for _,v in pairs(Dropdown.Buttons) do
                if v and v.Parent then pcall(function() v:Destroy() end) end
            end
            table.clear(Dropdown.Options)
            table.clear(Dropdown.Buttons)
            if self.MultiSelect then
                table.clear(self.SelectedValues)
                selectedLabel.Text = "Select options"
            end
        end
        Dropdown.Options = Options or {}
        AddOptions(Dropdown.Options)
    end

    function Dropdown:Set(Value)
        if self.MultiSelect then
            table.clear(self.SelectedValues)
            if type(Value) == "table" then
                for _, v in ipairs(Value) do
                    self.SelectedValues[v] = true
                end
            end
            
            for optKey, optButton in pairs(self.Buttons) do
                local isSelected = self.SelectedValues[optKey]
                local stroke = optButton:FindFirstChild("SelectionStroke")
                local title = optButton:FindFirstChild("Title")
                local checkmark = optButton:FindFirstChild("Checkmark")
                
                if stroke then
                    stroke.Enabled = true
                    TweenService:Create(stroke, TweenInfo.new(0.2), {Transparency = isSelected and 0 or 1}):Play()
                end
                if title then
                    TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = isSelected and 0 or 0.4}):Play()
                end
                if checkmark then
                    TweenService:Create(checkmark, TweenInfo.new(0.2), {ImageTransparency = isSelected and 0 or 1}):Play()
                end
                
                -- Apply fill color for selected items
                if isSelected then
                    if DropdownConfig.Fill then
                        optButton.BackgroundColor3 = finalFillColor
                        optButton.BackgroundTransparency = tonumber(DropdownConfig.FillTransparency) or 0.5
                    end
                else
                    optButton.BackgroundColor3 = OrionLib.Themes.Default.Main
                    optButton.BackgroundTransparency = 1
                end
            end
            
            local selectedCount = 0
            for _,v in pairs(self.SelectedValues) do
                if v then
                    selectedCount = selectedCount + 1
                end
            end
            selectedLabel.Text = selectedCount > 0 and ("Selected: "..selectedCount) or "Select options"
            
            local selected = {}
            for k, v in pairs(self.SelectedValues) do
                if v then table.insert(selected, k) end
            end
            pcall(DropdownConfig.Callback, selected)
        else
            local found = false
            for _, opt in ipairs(Dropdown.Options) do
                local optName = type(opt) == "table" and opt.Name or opt
                if optName == Value then
                    found = true
                    break
                end
            end
            if not found then
                if #Dropdown.Options > 0 then
                    Dropdown.Value = type(Dropdown.Options[1]) == "table" and Dropdown.Options[1].Name or Dropdown.Options[1]
                else
                    Dropdown.Value = "..."
                end
            else
                Dropdown.Value = Value
            end

            if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Selected then
                DropdownFrame.F.Selected.Text = Dropdown.Value
            end

            for optKey, optButton in pairs(Dropdown.Buttons) do
                local isSelected = (optKey == Dropdown.Value)
                local stroke = optButton:FindFirstChild("SelectionStroke")
                local title = optButton:FindFirstChild("Title")

                if stroke then
                    stroke.Enabled = true
                    TweenService:Create(stroke, TweenInfo.new(0.2), {Transparency = isSelected and 0 or 1}):Play()
                end
                if title then
                    TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = isSelected and 0 or 0.4}):Play()
                end
                
                if isSelected and DropdownConfig.Fill then
                    optButton.BackgroundColor3 = finalFillColor
                    optButton.BackgroundTransparency = tonumber(DropdownConfig.FillTransparency) or 0.5
                elseif not isSelected then
                    optButton.BackgroundColor3 = OrionLib.Themes.Default.Main
                    optButton.BackgroundTransparency = 1
                end
            end

            pcall(DropdownConfig.Callback, Dropdown.Value)
        end
    end

    function Dropdown:UpdateAppearance()
        task.spawn(function()
            task.wait(0.15)
            for label, button in pairs(self.Buttons or {}) do
                local isSelected = self.MultiSelect and self.SelectedValues[label] or (self.Value == label)
                
                if button then
                    if isSelected then
                        if DropdownConfig.Fill then
                            button.BackgroundColor3 = finalFillColor
                            button.BackgroundTransparency = tonumber(DropdownConfig.FillTransparency) or 0.5
                        end
                        if DropdownConfig.Outline then
                            local stroke = button:FindFirstChild("SelectionStroke")
                            if stroke then
                                stroke.Enabled = true
                                stroke.Transparency = 0
                            end
                        end
                    else
                        button.BackgroundColor3 = OrionLib.Themes.Default.Main
                        button.BackgroundTransparency = 1
                        if DropdownConfig.Outline then
                            local stroke = button:FindFirstChild("SelectionStroke")
                            if stroke then
                                stroke.Enabled = false
                                stroke.Transparency = 1
                            end
                        end
                    end
                end
            end
        end)
    end

    AddConnection(Click.MouseButton1Click, function()
        if DropdownConfig.Locked then return end
        Dropdown.Toggled = not Dropdown.Toggled
        if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Line then
            DropdownFrame.F.Line.Visible = Dropdown.Toggled
        end
        if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Ico then
            TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{Rotation = Dropdown.Toggled and 180 or 0}):Play()
        end
        
        if searchContainer then searchContainer.Visible = Dropdown.Toggled end

        local targetHeight
        if Dropdown.Toggled then
            local searchHeight = searchContainer and 32 or 0
            local visibleButtons = {}
            for _, button in pairs(Dropdown.Buttons) do
                if button.Visible then
                    table.insert(visibleButtons, button)
                end
            end
            
            local contentHeight = #visibleButtons * 28 + (#visibleButtons > 1 and (#visibleButtons - 1) * 4 or 0)
            local paddingOffset = #visibleButtons > 0 and 8 or 0

            if #visibleButtons > MaxElements then
                targetHeight = 38 + (MaxElements * 28) + ((MaxElements - 1) * 4) + paddingOffset + searchHeight
            else
                targetHeight = 38 + contentHeight + paddingOffset + searchHeight
            end
            if #visibleButtons == 0 then targetHeight = 38 + searchHeight + paddingOffset end
        else
            targetHeight = 38
        end
        if DropdownFrame then
            TweenService:Create(DropdownFrame,TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
        end
    end)
    
    if searchBox then
        AddConnection(searchBox:GetPropertyChangedSignal("Text"), function()
            local query = searchBox.Text:lower()
            for name, button in pairs(Dropdown.Buttons) do
                button.Visible = (query == "" or name:lower():find(query, 1, true))
            end
        end)
    end

    Dropdown:Refresh(Dropdown.Options, false)
    if Dropdown.MultiSelect then
        if type(DropdownConfig.Default) == "table" then
            Dropdown:Set(DropdownConfig.Default)
        end
    else
        Dropdown:Set(DropdownConfig.Default)
    end
    if DropdownConfig.Flag then
        OrionLib.Flags[DropdownConfig.Flag] = Dropdown
    end
    return Dropdown
end
		function ElementFunction:AddBind(BindConfig)
			BindConfig = BindConfig or {}
			BindConfig.Name = BindConfig.Name or "Bind"
			BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
			BindConfig.Hold = BindConfig.Hold or false
			BindConfig.Callback = BindConfig.Callback or function() end
			BindConfig.Flag = BindConfig.Flag or nil
			BindConfig.Save = BindConfig.Save or false
			BindConfig.Locked = BindConfig.Locked or false
			BindConfig.Image = BindConfig.Image or nil

			local Bind = {Value = BindConfig.Default, Binding = false, Type = "Bind", Save = BindConfig.Save}
			local Holding = false

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local valueLabel = AddThemeObject(SetProps(MakeElement("Label", "", 14), {
				Size = UDim2.new(1, 0, 1, 0),
				Font = Enum.Font.GothamBold,
				TextXAlignment = Enum.TextXAlignment.Center,
				Name = "Value"
			}), "Text")

			local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
				Size = UDim2.new(0, 24, 0, 24),
				Position = UDim2.new(1, -12, 0.5, 0),
				AnchorPoint = Vector2.new(1, 0.5)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				valueLabel
			}), "Main")
			
			local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1, -12, 1, 0), Position=UDim2.new(0,12,0,0), BackgroundTransparency=1 })

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
				Size = UDim2.new(1, 0, 1, 0),
				Position = UDim2.new(0, 0, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content",
				Parent = contentHolder,
			}), "Text")

			local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38),
				Parent = ItemParent
			}), {
				contentHolder,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				BindBox,
				Click
			}), "Second")
			contentHolder.Parent = BindFrame
			
			Bind.Wrapper = BindFrame; Bind.Name = BindConfig.Name; Bind.Type = "Bind"
			table.insert(OrionLib.AllElements, Bind)
			SetupElement(BindConfig, BindFrame, Click, Bind)

			MakeShineOnHover(Click, contentLabel)
			MakeShineOnHover(Click, valueLabel)

			AddConnection(BindBox.Value:GetPropertyChangedSignal("TextBounds"), function()
				if BindBox and BindBox.Value then
					TweenService:Create(BindBox, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)}):Play()
				end
			end)

			AddConnection(Click.InputEnded, function(Input)
				if BindConfig.Locked then return end
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					if Bind.Binding then return end
					Bind.Binding = true
					if BindBox and BindBox.Value then BindBox.Value.Text = "..." end
				end
			end)

			local CurrentInputBeganConnection
			AddConnection(UserInputService.InputBegan, function(Input)
				if UserInputService:GetFocusedTextBox() then return end

				local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name

				if keyName == Bind.Value and not Bind.Binding then
					if BindConfig.Hold then
						Holding = true
						pcall(BindConfig.Callback, Holding)
					else
						pcall(BindConfig.Callback)
					end
				elseif Bind.Binding then
					local CapturedKey
					if not CheckKey(BlacklistedKeys, Input.KeyCode) and Input.KeyCode ~= Enum.KeyCode.Unknown then
						CapturedKey = Input.KeyCode.Name
					elseif CheckKey(WhitelistedMouse, Input.UserInputType) then
						CapturedKey = Input.UserInputType.Name
					end

					if CapturedKey then
						Bind:Set(CapturedKey)
						if OrionLib.SaveCfg and BindConfig.Save then pcall(SaveCfg, game.GameId) end
					else
						Bind:Set(Bind.Value)
					end
					Bind.Binding = false
				end
			end)

			AddConnection(UserInputService.InputEnded, function(Input)
				local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name
				if keyName == Bind.Value then
					if BindConfig.Hold and Holding then
						Holding = false
						pcall(BindConfig.Callback, Holding)
					end
				end
			end)


			AddConnection(Click.MouseEnter, function()
				if BindConfig.Locked then return end
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				if BindConfig.Locked then return end
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				if BindConfig.Locked then return end
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
			end)

			AddConnection(Click.MouseButton1Down, function()
				if BindConfig.Locked then return end
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(0,0,0), 0.1)}):Play()
			end)

			function Bind:Set(Key)
				Bind.Binding = false
				Bind.Value = (type(Key) == "EnumItem" and Key.Name) or (type(Key) == "string" and Key) or "None"
				if BindBox and BindBox.Value then BindBox.Value.Text = Bind.Value end
				task.wait()
				if BindBox and BindBox.Value and BindBox.Value.TextBounds.X > 0 then
					TweenService:Create(BindBox, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)}):Play()
				end
			end

			Bind:Set(BindConfig.Default)
			if BindConfig.Flag then
				OrionLib.Flags[BindConfig.Flag] = Bind
			end
			return Bind
		end
function ElementFunction:AddTextbox(TextboxConfig)
	local TweenService = game:GetService("TweenService")
	local HttpService = game:GetService("HttpService")
	local UserInputService = game:GetService("UserInputService")
	local CoreGui = game:GetService("CoreGui")
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local HttpRequest = (syn and syn.request) or (http and http.request) or (http_request) or (flux and flux.request) or request

	TextboxConfig = TextboxConfig or {}
	TextboxConfig.Name = TextboxConfig.Name or "AI Assistant"
	TextboxConfig.Default = TextboxConfig.Default or ""
	TextboxConfig.Ai = TextboxConfig.Ai or false
	TextboxConfig.Gui = TextboxConfig.Gui or false

	local Textbox = {
		Value = TextboxConfig.Default,
		Type = "Textbox"
	}

	if not TextboxConfig.Ai then
		local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
			Size = UDim2.new(1, 0, 0, 38),
			Parent = ItemParent
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			Create("UIPadding", {
				PaddingTop = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5),
				PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10)
			})
		}), "Second")
		local contentHolder = Create("Frame", {
			Name = "ContentHolder", Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1, Parent = TextboxFrame
		})
		Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Parent = contentHolder
		})
		AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
			Size = UDim2.new(1, -110, 1, 0), Font = Enum.Font.GothamBold,
			TextXAlignment = Enum.TextXAlignment.Left, Parent = contentHolder
		}), "Text")
		local TextboxActual = AddThemeObject(Create("TextBox", {
			Size = UDim2.new(0, 100, 0, 28), BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255), PlaceholderColor3 = Color3.fromRGB(210, 210, 210),
			PlaceholderText = "Input", Font = Enum.Font.GothamSemibold,
			TextXAlignment = Enum.TextXAlignment.Center, TextSize = 14,
			Text = tostring(Textbox.Value), ClearTextOnFocus = false,
			Parent = contentHolder
		}), "Text")
		TextboxActual.FocusLost:Connect(function(enterPressed)
			Textbox.Value = TextboxActual.Text
			if TextboxConfig.Callback then pcall(TextboxConfig.Callback, Textbox.Value, enterPressed) end
		end)
		Textbox.Wrapper = TextboxFrame
		Textbox.Name = TextboxConfig.Name
		table.insert(OrionLib.AllElements, Textbox)
		return Textbox
	end

	local API_URL = "https://openrouter.ai/api/v1/chat/completions"
	local API_KEY = "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"
	local AI_MODEL = "google/gemma-2-9b-it:free"

	local aiBubble = Create("Frame", {
		Size = UDim2.new(1, 0, 0, 320),
		BackgroundColor3 = Color3.fromRGB(18, 19, 24),
		BorderSizePixel = 0,
		ClipsDescendants = true,
		Active = true,
		Parent = ItemParent
	})
	Create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = aiBubble })
	Create("UIStroke", { Color = Color3.fromRGB(50, 52, 62), Thickness = 2, Parent = aiBubble })
	Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Parent = aiBubble })

	local topBar = Create("Frame", {
		LayoutOrder = 1,
		Size = UDim2.new(1, 0, 0, 30),
		BackgroundColor3 = Color3.fromRGB(28, 29, 36),
		BorderSizePixel = 0,
		Active = true,
		Parent = aiBubble
	})

	Create("TextLabel", {
		Size = UDim2.new(1, -100, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		BackgroundTransparency = 1,
		TextColor3 = Color3.fromRGB(230, 230, 230),
		Font = Enum.Font.GothamBold,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		Text = TextboxConfig.Name,
		Parent = topBar
	})

	local topBarButtons = Create("Frame", {
		Size = UDim2.new(0, 95, 1, 0),
		Position = UDim2.new(1, -5, 0, 0),
		AnchorPoint = Vector2.new(1, 0),
		BackgroundTransparency = 1,
		Parent = topBar
	})
	Create("UIListLayout", {
		FillDirection = Enum.FillDirection.Horizontal,
		HorizontalAlignment = Enum.HorizontalAlignment.Right,
		VerticalAlignment = Enum.VerticalAlignment.Center,
		Padding = UDim.new(0, 5),
		Parent = topBarButtons
	})

	local isMinimized = false
	local guiModeScreenGui = nil
	local isInGuiMode = false
	local preMinimizeHeight = 320

	local function makeAIMoveable(trigger, gui)
		local dragging = false
		local dragStart, startPos
		trigger.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging, dragStart, startPos = true, input.Position, gui.Position
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if dragging then
				local delta = input.Position - dragStart
				gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			end
		end)
		UserInputService.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = false
			end
		end)
	end
	makeAIMoveable(topBar, aiBubble)

	if TextboxConfig.Gui then
		local GuiModeButton = Create("ImageButton", {
			Size = UDim2.new(0, 20, 0, 20),
			Image = "rbxassetid://126347222554873",
			BackgroundTransparency = 1,
			Parent = topBarButtons
		})
		GuiModeButton.MouseButton1Click:Connect(function()
			isInGuiMode = not isInGuiMode
			if isInGuiMode then
				GuiModeButton.Image = "rbxassetid://3120637534"
				guiModeScreenGui = Create("ScreenGui", {
					Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Global,
					DisplayOrder = 2147483646, ResetOnSpawn = false
				})
				aiBubble.Parent = guiModeScreenGui
				aiBubble.Position = UDim2.fromScale(0.5, 0.5)
				aiBubble.AnchorPoint = Vector2.new(0.5, 0.5)
				if isMinimized then
					aiBubble.Size = UDim2.fromOffset(500, 30)
				else
					aiBubble.Size = UDim2.fromOffset(500, preMinimizeHeight)
				end
			else
				GuiModeButton.Image = "rbxassetid://126347222554873"
				aiBubble.Parent = ItemParent
				aiBubble.Position = UDim2.fromScale(0, 0)
				aiBubble.AnchorPoint = Vector2.new(0, 0)
				if isMinimized then
					aiBubble.Size = UDim2.new(1, 0, 0, 30)
				else
					aiBubble.Size = UDim2.new(1, 0, 0, preMinimizeHeight)
				end
				if guiModeScreenGui then
					guiModeScreenGui:Destroy()
					guiModeScreenGui = nil
				end
			end
		end)
	end
	
	local minimizeButton = Create("ImageButton", {
		Size = UDim2.new(0, 20, 0, 20),
		Image = "rbxassetid://15396333997",
		BackgroundTransparency = 1,
		Parent = topBarButtons
	})

	local closeButton = Create("TextButton", {
		Size = UDim2.new(0, 20, 0, 20),
		BackgroundColor3 = Color3.fromRGB(239, 68, 68),
		BackgroundTransparency = 0.5,
		Font = Enum.Font.GothamBold,
		Text = "X",
		TextSize = 12,
		TextColor3 = Color3.new(1, 1, 1),
		Parent = topBarButtons
	})
	Create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = closeButton })
	
	closeButton.MouseEnter:Connect(function() TweenService:Create(closeButton, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play() end)
	closeButton.MouseLeave:Connect(function() TweenService:Create(closeButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play() end)
	closeButton.MouseButton1Click:Connect(function()
		if guiModeScreenGui then guiModeScreenGui:Destroy() end
		aiBubble:Destroy()
	end)

	local tabContainer = Create("Frame", {
		LayoutOrder = 2,
		Size = UDim2.new(1, 0, 0, 35),
		BackgroundTransparency = 1,
		Parent = aiBubble
	})
	Create("UIPadding", { PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5), Parent = tabContainer })

	local tabScrollFrame = Create("ScrollingFrame", {
		Size = UDim2.new(1, -35, 1, 0),
		Position = UDim2.fromScale(0, 0),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		ScrollBarThickness = 3,
		ScrollBarImageColor3 = Color3.fromRGB(88, 101, 242),
		ScrollingDirection = Enum.ScrollingDirection.X,
		Parent = tabContainer
	})
	local tabLayout = Create("UIListLayout", {
		FillDirection = Enum.FillDirection.Horizontal,
		VerticalAlignment = Enum.VerticalAlignment.Center,
		Padding = UDim.new(0, 5),
		Parent = tabScrollFrame
	})
	tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		tabScrollFrame.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X, 0, 0)
	end)

	local addTabButton = Create("TextButton", {
		Size = UDim2.new(0, 26, 0, 26),
		Position = UDim2.new(1, 0, 0.5, 0),
		AnchorPoint = Vector2.new(1, 0.5),
		Font = Enum.Font.GothamBold, Text = "+", TextSize = 20,
		TextColor3 = Color3.fromRGB(200, 200, 200), BackgroundColor3 = Color3.fromRGB(50, 40, 45),
		Parent = tabContainer
	})
	Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = addTabButton })
	
	local chatSessionsContainer = Create("Frame", {
		LayoutOrder = 3,
		Size = UDim2.new(1, 0, 1, -150),
		BackgroundTransparency = 1,
		ClipsDescendants = true,
		Parent = aiBubble
	})

	local controlsContainer = Create("Frame", {
		LayoutOrder = 4,
		Size = UDim2.new(1, 0, 0, 85),
		BackgroundTransparency = 1,
		Parent = aiBubble
	})
	Create("UIListLayout", { Padding = UDim.new(0, 5), SortOrder = Enum.SortOrder.LayoutOrder, Parent = controlsContainer })
	Create("UIPadding", { PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5), Parent = controlsContainer })

	local inputFrame = Create("Frame", {
		LayoutOrder = 1,
		Size = UDim2.new(1, 0, 0, 35),
		BackgroundTransparency = 1,
		Parent = controlsContainer
	})

	local aiTextBox = Create("TextBox", {
		Size = UDim2.new(1, -45, 1, 0),
		BackgroundColor3 = Color3.fromRGB(30, 31, 38),
		Font = Enum.Font.Gotham,
		TextSize = 12,
		PlaceholderText = "Ask me anything...",
		TextColor3 = Color3.fromRGB(220, 220, 220),
		Parent = inputFrame
	})
	Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = aiTextBox })
	Create("UIPadding", { PaddingLeft = UDim.new(0, 10), Parent = aiTextBox })

	local sendButton = Create("ImageButton", {
		Size = UDim2.new(0, 35, 1, 0),
		Position = UDim2.new(1, 0, 0, 0),
		AnchorPoint = Vector2.new(1, 0),
		BackgroundColor3 = Color3.fromRGB(88, 101, 242),
		Image = "rbxassetid://6034849723",
		ImageColor3 = Color3.new(1,1,1),
		AutoButtonColor = true,
		Parent = inputFrame
	})
	Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = sendButton })
	
	local bottomButtonsFrame = Create("Frame", {
		LayoutOrder = 2,
		Size = UDim2.new(1, 0, 0, 30),
		BackgroundTransparency = 1,
		Parent = controlsContainer
	})
	Create("UIListLayout", {
		FillDirection = Enum.FillDirection.Horizontal,
		VerticalAlignment = Enum.VerticalAlignment.Center,
		Padding = UDim.new(0, 10),
		Parent = bottomButtonsFrame
	})
	
	local function createBottomButton(text, imageId)
		local btn = Create("TextButton", {
			AutomaticSize = Enum.AutomaticSize.X,
			Size = UDim2.new(0, 0, 1, -8),
			Text = "",
			BackgroundColor3 = Color3.fromRGB(43, 45, 53),
			Parent = bottomButtonsFrame
		})
		Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
		Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			Padding = UDim.new(0, 6),
			Parent = btn
		})
		Create("UIPadding", { PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), Parent = btn })
		Create("ImageLabel", {
			Size = UDim2.fromOffset(14, 14),
			Image = imageId,
			BackgroundTransparency = 1,
			Parent = btn
		})
		Create("TextLabel", {
			AutomaticSize = Enum.AutomaticSize.X,
			Size = UDim2.new(0, 0, 1, 0),
			Text = text,
			Font = Enum.Font.GothamBold,
			TextSize = 11,
			TextColor3 = Color3.fromRGB(200, 200, 200),
			BackgroundTransparency = 1,
			Parent = btn
		})
		return btn
	end

	local guidesButton = createBottomButton("Guides", "rbxassetid://120347551836061")
	local promptsButton = createBottomButton("Prompts", "rbxassetid://93522081013627")
	
	local chatTabs = {}
	local activeTabId = nil
	local tabCounter = 0
	local isAwaitingResponse = false

	local sendSound = Create("Sound", workspace)
	sendSound.SoundId = "rbxassetid://87437544236708"
	sendSound.Volume = 0.8
	
	local autoResponseApis = {
		{ name = "Facts", url = "https://uselessfacts.jsph.pl/random.json?language=en", parse = function(d) return d and d.text end },
		{ name = "Advice", url = "https://api.adviceslip.com/advice", parse = function(d) return d and d.slip and d.slip.advice end },
		{ name = "Jokes", url = "https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=single", parse = function(d) return d and d.joke end }
	}

	local function addMessageToLog(tabId, author, content)
		local tabData = chatTabs[tabId]
		if not tabData then return end
		if author ~= "AI" or not content:find("Thinking...") then
			table.insert(tabData.messages, {
				role = (author == "You" and "user" or "assistant"),
				content = content
			})
		end
		
		local messageFrame = Create("Frame", {
			Name = "MessageFrame", AutomaticSize = Enum.AutomaticSize.Y,
			Size = UDim2.fromScale(1, 0), BackgroundTransparency = 1, Parent = tabData.scrollFrame
		})
		Create("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 2), Parent = messageFrame })
		
		Create("TextLabel", {
			Text = author, Font = Enum.Font.GothamBold, TextSize = 13,
			TextColor3 = (author == "You") and Color3.fromRGB(130, 180, 255) or Color3.fromRGB(130, 255, 180),
			TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 15), Parent = messageFrame
		})
		
		local contentLabel = Create("TextLabel", {
			Text = content, Font = Enum.Font.Gotham, TextSize = 12,
			TextColor3 = Color3.fromRGB(220, 220, 220), TextWrapped = true,
			AutomaticSize = Enum.AutomaticSize.Y, Size = UDim2.fromScale(1, 0),
			RichText = true, TextXAlignment = Enum.TextXAlignment.Left, BackgroundTransparency = 1, Parent = messageFrame
		})
		
		task.wait()
		tabData.scrollFrame.CanvasSize = UDim2.new(0, 0, 0, tabData.layout.AbsoluteContentSize.Y + 10)
		tabData.scrollFrame.CanvasPosition = Vector2.new(0, tabData.scrollFrame.CanvasSize.Y.Offset)
		return contentLabel
	end

	local function askAI(tabId, prompt)
		isAwaitingResponse = true
		sendButton.AutoButtonColor = false
		sendButton.ImageColor3 = Color3.fromRGB(150,150,150)
		local thinkingLabel = addMessageToLog(tabId, "AI", "Thinking...")
		
		task.spawn(function()
			local system_prompt = [[
You are a dual-mode AI assistant in a Roblox game. You must first determine the user's intent.
1. **COMMAND INTENT**: If the user's request is a command to be executed (e.g., "fly", "speed 100", "spin me", "kill me", "bring player X"), generate ONLY the necessary and complete Roblox Lua script to perform that action. The script MUST be enclosed in a Lua markdown block (```lua ... ```). Do NOT add any other text, explanation, or conversation outside the code block. Ensure the script is functional and self-contained. For temporary effects like "spin", make the script automatically stop after a few seconds.
2. **CONVERSATIONAL INTENT**: If the user's request is a general question, a request for information (like "what is 1+1?", "what time is it?"), or a simple conversational statement, you MUST respond naturally as a helpful assistant. Do NOT generate any code in this case. Just provide a text-based answer.
Analyze the prompt and choose one of the two modes.
]]
			local messagesForAPI = { {role = "system", content = system_prompt} }
			for _, msg in ipairs(chatTabs[tabId].messages) do
				table.insert(messagesForAPI, msg)
			end
			
			local success, result = pcall(HttpRequest, { Url = API_URL, Method = "POST", Headers = {["Content-Type"] = "application/json", ["Authorization"] = "Bearer " .. API_KEY }, Body = HttpService:JSONEncode({ model = AI_MODEL, messages = messagesForAPI }) })
			
			if thinkingLabel and thinkingLabel.Parent then thinkingLabel.Parent:Destroy() end
			
			local responseText = "Error: Could not connect to AI service."
			if success and result.Body then
				local decodeSuccess, data = pcall(HttpService.JSONDecode, HttpService, result.Body)
				if decodeSuccess and data.choices and #data.choices > 0 then
					responseText = data.choices[1].message.content
				end
			end
			
			local script_code = responseText:match("```lua\n(.-)\n```") or responseText:match("```\n(.-)\n```")
			if script_code then
				addMessageToLog(tabId, "AI", "Called tool: execute_script")
				local func, err = loadstring(script_code)
				if func then
					local execSuccess, execErr = pcall(func)
					if not execSuccess then
						addMessageToLog(tabId, "AI", "Execution error: " .. tostring(execErr))
					end
				else
					addMessageToLog(tabId, "AI", "Compilation error: " .. tostring(err))
				end
			else
				addMessageToLog(tabId, "AI", responseText)
			end
			
			isAwaitingResponse = false
			sendButton.AutoButtonColor = true
			sendButton.ImageColor3 = Color3.new(1,1,1)
		end)
	end

	local function send()
		local prompt = aiTextBox.Text
		if prompt and #prompt > 0 and not isAwaitingResponse and activeTabId then
			sendSound:Play()
			aiTextBox.Text = ""
			addMessageToLog(activeTabId, "You", prompt)
			askAI(activeTabId, prompt)
		end
	end

	sendButton.MouseButton1Click:Connect(send)
	aiTextBox.FocusLost:Connect(function(enter) if enter then send() end end)

	local createNewTab
	local function switchTab(tabId)
		if not chatTabs[tabId] then return end
		activeTabId = tabId
		for id, data in pairs(chatTabs) do
			local is_active = (id == tabId)
			data.chatFrame.Visible = is_active
			data.tabButton.BackgroundColor3 = is_active and Color3.fromRGB(50, 40, 45) or Color3.fromRGB(30, 20, 25)
		end
	end

	createNewTab = function(tabName)
		tabCounter = tabCounter + 1
		local tabId = "tab_" .. tabCounter
		tabName = tabName or "Chat " .. tabCounter
		
		local chatFrame = Create("Frame", {
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Visible = false,
			Parent = chatSessionsContainer
		})
		
		local scroll = Create("ScrollingFrame", {
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1, BorderSizePixel = 0,
			ScrollBarThickness = 3, ScrollBarImageColor3 = Color3.fromRGB(180, 40, 90),
			Parent = chatFrame
		})
		local listLayout = Create("UIListLayout", {
			Padding = UDim.new(0, 10), SortOrder = Enum.SortOrder.LayoutOrder, Parent = scroll
		})

		local tabButton = Create("Frame", {
			AutomaticSize = Enum.AutomaticSize.X,
			Size = UDim2.new(0, 0, 1, -4),
			BackgroundColor3 = Color3.fromRGB(30, 20, 25),
			Parent = tabScrollFrame
		})
		Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = tabButton })
		Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 5), Parent = tabButton })
		Create("UIPadding", { PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), Parent = tabButton })

		local tabLabel = Create("TextButton", {
			AutomaticSize = Enum.AutomaticSize.X, Size = UDim2.new(0,0,1,0),
			Text = tabName, Font = Enum.Font.Gotham, TextSize = 13,
			TextColor3 = Color3.fromRGB(200, 200, 200), BackgroundTransparency = 1, Parent = tabButton
		})

		local closeTab = Create("TextButton", {
			Size = UDim2.fromOffset(16, 16),
			Text = "X", Font = Enum.Font.GothamBold, TextSize = 12,
			TextColor3 = Color3.fromRGB(180, 180, 180), BackgroundTransparency = 1, Parent = tabButton
		})

		chatTabs[tabId] = {
			name = tabName, messages = {}, chatFrame = chatFrame,
			scrollFrame = scroll, layout = listLayout, tabButton = tabButton
		}
		
		tabLabel.MouseButton1Click:Connect(function() switchTab(tabId) end)

		closeTab.MouseButton1Click:Connect(function()
			local tabData = chatTabs[tabId]
			if tabData then
				tabData.chatFrame:Destroy()
				tabData.tabButton:Destroy()
				chatTabs[tabId] = nil
				
				if activeTabId == tabId then
					activeTabId = nil
					local nextTab, _ = next(chatTabs)
					if nextTab then
						switchTab(nextTab)
					else
						createNewTab()
					end
				end
			end
		end)
		
		switchTab(tabId)
	end
	
	addTabButton.MouseButton1Click:Connect(function() createNewTab() end)
	
	promptsButton.MouseButton1Click:Connect(function()
		if promptsButton:FindFirstChild("PromptMenu") then
			promptsButton:FindFirstChild("PromptMenu"):Destroy()
			return
		end
		
		local promptMenu = Create("Frame", {
			Name = "PromptMenu",
			Size = UDim2.new(0, 150, 0, 0),
			Position = UDim2.new(0, 0, 0, -10),
			AnchorPoint = Vector2.new(0, 1),
			BackgroundColor3 = Color3.fromRGB(45, 30, 35),
			Parent = promptsButton
		})
		Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = promptMenu })
		local menuLayout = Create("UIListLayout", { Padding = UDim.new(0, 5), Parent = promptMenu })
		Create("UIPadding", { PaddingTop = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5), PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5), Parent = promptMenu })

		local samplePrompts = {"fly", "speed 200", "god mode", "spin me", "kill me"}
		for _, promptText in ipairs(samplePrompts) do
			local pBtn = Create("TextButton", {
				Size = UDim2.new(1, 0, 0, 25),
				Text = promptText,
				Font = Enum.Font.Gotham,
				TextSize = 12,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				BackgroundTransparency = 1,
				Parent = promptMenu
			})
			pBtn.MouseButton1Click:Connect(function()
				aiTextBox.Text = promptText
				promptMenu:Destroy()
			end)
		end
		task.wait()
		promptMenu.Size = UDim2.new(0, 150, 0, menuLayout.AbsoluteContentSize.Y + 10)
	end)
	
	minimizeButton.MouseButton1Click:Connect(function()
		isMinimized = not isMinimized
		local bodyElements = {chatSessionsContainer, controlsContainer, tabContainer}
		local targetSize
		if isMinimized then
			preMinimizeHeight = aiBubble.AbsoluteSize.Y
			targetSize = isInGuiMode and UDim2.fromOffset(aiBubble.AbsoluteSize.X, 30) or UDim2.new(1, 0, 0, 30)
			for _,v in ipairs(bodyElements) do v.Visible = false end
		else
			targetSize = isInGuiMode and UDim2.fromOffset(aiBubble.AbsoluteSize.X, preMinimizeHeight) or UDim2.new(1, 0, 0, preMinimizeHeight)
			for _,v in ipairs(bodyElements) do v.Visible = true end
		end
		TweenService:Create(aiBubble, TweenInfo.new(0.3), {Size = targetSize}):Play()
	end)

	for _, apiData in ipairs(autoResponseApis) do
		local apiButton = createBottomButton(apiData.name, "rbxassetid://18349889388")
		apiButton.MouseButton1Click:Connect(function()
			if not activeTabId or isAwaitingResponse then return end
			local tabData = chatTabs[activeTabId]
			task.spawn(function()
				local success, result = pcall(HttpRequest, { Url = apiData.url })
				if success and result.Body then
					local decodeSuccess, data = pcall(HttpService.JSONDecode, HttpService, result.Body)
					if decodeSuccess then
						local content = apiData.parse(data)
						if content then
							addMessageToLog(activeTabId, "AI", "<b>" .. apiData.name .. ":</b> " .. content)
						end
					end
				end
			end)
		end)
	end

	createNewTab()

	Textbox.Wrapper = aiBubble
	Textbox.Name = TextboxConfig.Name
	table.insert(OrionLib.AllElements, Textbox)
	return Textbox
end
		function ElementFunction:AddColorpicker(ColorpickerConfig)
			ColorpickerConfig = ColorpickerConfig or {}
			ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
			ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
			ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
			ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
			ColorpickerConfig.Save = ColorpickerConfig.Save or false
			ColorpickerConfig.Locked = ColorpickerConfig.Locked or false
			ColorpickerConfig.Image = ColorpickerConfig.Image or nil

			local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}
			local ColorH, ColorS, ColorV = Color3.toHSV(ColorpickerConfig.Default)
			local draggingColor, draggingHue = false, false

			local ColorSelection = Create("ImageLabel", {
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.fromScale(ColorS, 1 - ColorV),
				ScaleType = Enum.ScaleType.Fit,
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=4805639000",
				ZIndex = 3
			})

			local HueSelection = Create("ImageLabel", {
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0.5, 0, ColorH, 0),
				ScaleType = Enum.ScaleType.Fit,
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=4805639000",
				ZIndex = 3
			})

			local ColorImageDisplay = Create("ImageLabel", {
				Name = "ColorImageDisplay",
				Size = UDim2.new(1, -25, 1, 0),
				Image = "rbxassetid://4155801252",
				BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1),
				ZIndex = 2
			}, {
				Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
				ColorSelection
			})

			local HueBarDisplay = Create("Frame", {
				Name = "HueBarDisplay",
				Size = UDim2.new(0, 20, 1, 0),
				Position = UDim2.new(1, -20, 0, 0),
				ZIndex = 2
			}, {
				Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)),ColorSequenceKeypoint.new(0.16,Color3.fromRGB(255,255,0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
				Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
				HueSelection
			})

			local ColorpickerContainer = AddThemeObject(Create("Frame", {
				Name = "ColorpickerContainer",
				Position = UDim2.new(0, 0, 0, 38),
				Size = UDim2.new(1, 0, 0, 122),
				ClipsDescendants = true,
				Visible = false,
				ZIndex = 1
			}, {
				HueBarDisplay,
				ColorImageDisplay,
				Create("UIPadding", {
					PaddingLeft = UDim.new(0, 10),
					PaddingRight = UDim.new(0, 35),
					PaddingBottom = UDim.new(0, 10),
					PaddingTop = UDim.new(0, 10)
				})
			}), "Main")

			local Click = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
			local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), {
				Size = UDim2.new(0, 24, 0, 24),
				Position = UDim2.new(1, -12, 0.5, 0),
				AnchorPoint = Vector2.new(1, 0.5)
			}), { AddThemeObject(MakeElement("Stroke"), "Stroke") }), "Main")
			ColorpickerBox.BackgroundColor3 = ColorpickerConfig.Default

			local contentHolder = Create("Frame", { Name = "ContentHolder", Size=UDim2.new(1, -12, 1, 0), Position=UDim2.new(0,12,0,0), BackgroundTransparency=1 })

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
				Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 0, 0), Font = Enum.Font.GothamBold, Name = "Content", Parent=contentHolder
			}), "Text")

			local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38), Parent = ItemParent, ClipsDescendants = true
			}), {
				SetProps(SetChildren(MakeElement("TFrame"), {
					contentHolder, ColorpickerBox, Click,
					AddThemeObject(SetProps(MakeElement("Frame"), { Size = UDim2.new(1, 0, 0, 1), Position = UDim2.new(0, 0, 1, 0), Name = "Line", Visible = false }), "Stroke"),
				}), { Size = UDim2.new(1, 0, 0, 38), ClipsDescendants = true, Name = "F" }),
				ColorpickerContainer, AddThemeObject(MakeElement("Stroke"), "Stroke"),
			}), "Second")
			contentHolder.Parent = ColorpickerFrame.F
			
			Colorpicker.Wrapper = ColorpickerFrame; Colorpicker.Name = ColorpickerConfig.Name; Colorpicker.Type = "Colorpicker"
			table.insert(OrionLib.AllElements, Colorpicker)
			SetupElement(ColorpickerConfig, ColorpickerFrame, Click, Colorpicker)

			MakeShineOnHover(Click, contentLabel)

			local function UpdateColorPicker(updatePositions)
				local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
				ColorpickerBox.BackgroundColor3 = newColor
				if updatePositions then
					ColorSelection.Position = UDim2.fromScale(ColorS, 1 - ColorV)
					HueSelection.Position = UDim2.fromScale(0.5, ColorH)
				end
				ColorImageDisplay.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
				if Colorpicker.Value ~= newColor then
					Colorpicker:Set(newColor, true)
				end
			end

			function Colorpicker:Set(Value, internalCall)
				Colorpicker.Value = Value
				if not internalCall then
					ColorH, ColorS, ColorV = Color3.toHSV(Value)
					UpdateColorPicker(true)
				end
				ColorpickerBox.BackgroundColor3 = Colorpicker.Value
				pcall(ColorpickerConfig.Callback, Colorpicker.Value)
				if OrionLib.SaveCfg and self.Save and not internalCall then pcall(SaveCfg, game.GameId) end
			end
			Colorpicker:Set(ColorpickerConfig.Default)

			local tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
			AddConnection(Click.MouseButton1Click, function()
				if ColorpickerConfig.Locked then return end
				Colorpicker.Toggled = not Colorpicker.Toggled
				local targetSize = Colorpicker.Toggled and UDim2.new(1, 0, 0, 160) or UDim2.new(1, 0, 0, 38)
				TweenService:Create(ColorpickerFrame, tweenInfo, {Size = targetSize}):Play()
				ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				if Colorpicker.Toggled then
					ColorpickerContainer.Visible = true
				else
					draggingColor, draggingHue = false, false
					task.delay(tweenInfo.Time, function()
						if ColorpickerFrame and not Colorpicker.Toggled then ColorpickerContainer.Visible = false end
					end)
				end
			end)

			AddConnection(ColorImageDisplay.InputBegan, function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingColor = true end end)
			AddConnection(HueBarDisplay.InputBegan, function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingHue = true end end)

			AddConnection(UserInputService.InputEnded, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					if draggingColor or draggingHue then
						if OrionLib.SaveCfg and Colorpicker.Save then pcall(SaveCfg, game.GameId) end
					end
					draggingColor, draggingHue = false, false
				end
			end)

			AddConnection(UserInputService.InputChanged, function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch then return end
				if not (draggingColor or draggingHue) then return end
				if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
					draggingColor, draggingHue = false, false
					return
				end

				if draggingColor then
					local frame = ColorImageDisplay
					local x = math.clamp((input.Position.X - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
					local y = math.clamp((input.Position.Y - frame.AbsolutePosition.Y) / frame.AbsoluteSize.Y, 0, 1)
					ColorS, ColorV = x, 1 - y
					UpdateColorPicker(true)
				elseif draggingHue then
					local frame = HueBarDisplay
					local y = math.clamp((input.Position.Y - frame.AbsolutePosition.Y) / frame.AbsoluteSize.Y, 0, 1)
					ColorH = y
					UpdateColorPicker(true)
				end
			end)

			if ColorpickerConfig.Flag then OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker end
			return Colorpicker
		end
		function ElementFunction:executerthing(ExecuterConfig)
			ExecuterConfig = ExecuterConfig or {}
			ExecuterConfig.Name = ExecuterConfig.Name or "Executer"
			ExecuterConfig.Default = ExecuterConfig.Default or "-- Welcome to the Orion Executor!\nprint('Hello World!')"
			
			local isTyping = false
			local ignoreNextTextChange = false
			local hasSyntaxError = false
		
			local ExecuterFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
				Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = ItemParent
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 8) }),
				MakeElement("Padding", 8, 8, 8, 8)
			}), "Second")
		
			local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", ExecuterConfig.Name, 15), {
				Size = UDim2.new(1, 0, 0, 16), Font = Enum.Font.GothamBold, Name = "Content", Parent = ExecuterFrame
			}), "Text")
		
			local TextboxHolder = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(1, 0, 0, 250), Parent = ExecuterFrame, ClipsDescendants = true
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Main")
		
			local TextboxScroll = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 4), {
				Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Parent = TextboxHolder, Active = true, ScrollingDirection = Enum.ScrollingDirection.XY
			}), {}), "Divider")
		
			local TextboxContainer = Create("Frame", {
				Size = UDim2.new(1, 0, 1, 0), AutomaticSize = Enum.AutomaticSize.XY, BackgroundTransparency = 1, Parent = TextboxScroll,
			})
			
			AddConnection(TextboxContainer:GetPropertyChangedSignal("AbsoluteSize"), function()
				if TextboxScroll and TextboxContainer then
					TextboxScroll.CanvasSize = UDim2.new(0, TextboxContainer.AbsoluteSize.X, 0, TextboxContainer.AbsoluteSize.Y)
				end
			end)
		
			local LineNumbers = AddThemeObject(Create("TextLabel", {
				Size = UDim2.new(0, 35, 1, 0), Text = "1", Font = Enum.Font.Code, TextSize = 16,
				TextColor3 = Color3.fromRGB(120, 120, 120), TextXAlignment = Enum.TextXAlignment.Right,
				TextYAlignment = Enum.TextYAlignment.Top, BackgroundTransparency = 1, Parent = TextboxContainer
			}), "TextDark")
		
			local ActualTextbox = Create("TextBox", {
				Size = UDim2.new(1, -40, 1, 0), Position = UDim2.new(0, 40, 0, 0), Text = ExecuterConfig.Default,
				MultiLine = true, RichText = true, TextWrapped = false, TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top, Font = Enum.Font.Code, TextSize = 16,
				TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text, PlaceholderText = "your script here...",
				BackgroundTransparency = 1, Parent = TextboxContainer, ClearTextOnFocus = false, Active = true,
				AutomaticSize = Enum.AutomaticSize.XY
			})
		
			local OutputFrame = Create("Frame", {
				Name = "OutputFrame", Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 1, Parent = ExecuterFrame, Visible = false, ClipsDescendants = true
			})
			local OutputLabel = SetProps(MakeElement("Label", "", 14), {
				Size = UDim2.new(1, 0, 0, 0), Font = Enum.Font.Code, Name = "OutputLabel",
				AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, Parent = OutputFrame
			})
			local OutputStroke = Create("UIStroke", {
				Thickness = 1.2, Parent = OutputLabel, Enabled = false
			})
		
			local function setOutput(text, isError)
				if text and text ~= "" then
					OutputLabel.Text = text
					if isError then
						OutputLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
						OutputStroke.Color = Color3.fromRGB(255, 40, 40)
						OutputStroke.Enabled = true
					else
						OutputLabel.TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text
						OutputStroke.Enabled = false
					end
					OutputFrame.Visible = true
				else
					OutputLabel.Text = ""
					OutputFrame.Visible = false
				end
			end

			local function containsSuspiciousCode(script)
				local suspiciousKeywords = {
					"getgenv", "getrenv", "getfenv", "setfenv",
					"loadstring", "require", "PostAsync", "GetAsync",
					"RequestAsync", "webhook", "discord", "http",
					"dump", "steal", "token", "logger"
				}
				local lowerScript = script:lower()
				for _, keyword in ipairs(suspiciousKeywords) do
					if lowerScript:find(keyword, 1, true) then
						return true
					end
				end
				return false
			end
		
			local function createExecutorWarning(onConfirm)
				local container = Create("Frame", {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundColor3 = Color3.new(),
					BackgroundTransparency = 1,
					ZIndex = Orion.DisplayOrder + 10,
					Parent = Orion
				})
			
				local frame = Create("Frame", {
					Size = UDim2.new(0, 420, 0, 220),
					Position = UDim2.new(0.5, 0, 0.5, 0),
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 0.1,
					Parent = container
				})
			
				Create("UIScale", { Scale = 0.7, Parent = frame })
				local frameStroke = Create("UIStroke", { Thickness = 2, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Parent = frame })
				Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = frame })
			
				local header = Create("Frame", { Size = UDim2.new(1, 0, 0, 40), BackgroundTransparency = 1, Parent = frame })
				MakeDraggable(header, frame)

				local title = Create("TextLabel", {
					Text = "<b>Warning from Verbal Hub Security System</b>",
					Font = Enum.Font.GothamBold,
					TextColor3 = Color3.fromRGB(255,255,255),
					TextSize = 18,
					RichText = true,
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					Parent = header
				})
				Create("UIStroke", { Thickness = 2, Color = Color3.fromRGB(255,255,255), Transparency = 0.6, Parent = title })
			
				local body = Create("TextLabel", {
					Text = "This script contains functions that could be malicious. Please review the code before executing.",
					Font = Enum.Font.GothamBold,
					TextSize = 16,
					TextColor3 = Color3.fromRGB(235, 235, 235),
					LineHeight = 1.1,
					TextWrapped = true,
					Size = UDim2.new(1, -40, 1, -115),
					Position = UDim2.new(0.5, 0, 0.5, -5),
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Parent = frame
				})
				Create("UIStroke", { Thickness = 2, Color = Color3.fromRGB(255,255,255), Transparency = 0.7, Parent = body })
			
				local buttonHolder = Create("Frame", {
					Size = UDim2.new(1, 0, 0, 45),
					Position = UDim2.new(0, 0, 1, -45),
					BackgroundTransparency = 1,
					Parent = frame
				})
				Create("UIListLayout", {
					FillDirection = Enum.FillDirection.Horizontal,
					HorizontalAlignment = Enum.HorizontalAlignment.Right,
					VerticalAlignment = Enum.VerticalAlignment.Center,
					Padding = UDim.new(0, 10),
					Parent = buttonHolder
				})
				Create("UIPadding", { PaddingRight = UDim.new(0, 15), Parent = buttonHolder })
			
				local renderSteppedConn
				renderSteppedConn = RunService.RenderStepped:Connect(function()
					local alpha = (math.sin(tick() * 1.5) + 1) / 2
					local color1 = Color3.fromRGB(100, 20, 40)
					local color2 = Color3.fromRGB(80, 20, 110)
					local bgColor = color1:Lerp(color2, alpha)
					
					frame.BackgroundColor3 = bgColor
					frameStroke.Color = bgColor:Lerp(Color3.new(1,1,1), 0.5)
				end)

				local function destroyPrompt()
					renderSteppedConn:Disconnect()
					local tween = TweenService:Create(frame.UIScale, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), { Scale = 0.7 })
					tween:Play()
					tween.Completed:Connect(function()
						container:Destroy()
					end)
				end
			
				local cancelButton = AddThemeObject(Create("TextButton", {
					Text = "Cancel", Font = Enum.Font.GothamBold, TextColor3 = Color3.fromRGB(220,220,220), TextSize = 15, Size = UDim2.new(0, 120, 0, 32), AutoButtonColor = false, Parent = buttonHolder
				}), "Second")
				Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = cancelButton })
				AddThemeObject(Create("UIStroke", { Thickness = 1 }), "Stroke"):Clone().Parent = cancelButton
				cancelButton.MouseButton1Click:Connect(destroyPrompt)
			
				local confirmButton = Create("TextButton", {
					Text = "<b>Execute Anyway</b>", Font = Enum.Font.GothamBold, RichText = true, TextColor3 = Color3.fromRGB(255,255,255), TextSize = 15, Size = UDim2.new(0, 150, 0, 32), AutoButtonColor = false, Parent = buttonHolder,
					BackgroundColor3 = Color3.fromRGB(120, 40, 40)
				})
				Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = confirmButton })
				Create("UIStroke", { Thickness = 1.5, Color = Color3.fromRGB(255, 80, 80), Parent = confirmButton })
				confirmButton.MouseButton1Click:Connect(function()
					destroyPrompt()
					onConfirm()
				end)
			
				TweenService:Create(frame.UIScale, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), { Scale = 1 }):Play()
			end
		
			ExecuterConfig.Callback = ExecuterConfig.Callback or function(content)
				local func, compileErr = loadstring(content, "OrionScript")
				if not func then
					setOutput("[Compile Error]: " .. tostring(compileErr), true)
					return
				end
		
				setOutput("")
		
				local env = getfenv(func)
				env.print = function(...)
					local args = {...}
					local newText = {}
					for i = 1, #args do table.insert(newText, tostring(args[i])) end
					local currentOutput = OutputFrame.Visible and not hasSyntaxError and OutputLabel.Text or ""
					setOutput((currentOutput ~= "" and currentOutput .. "\n" or "") .. table.concat(newText, "\t"), false)
				end
				env.warn = function(...)
					local args = {...}
					local newText = {}
					for i = 1, #args do table.insert(newText, tostring(args[i])) end
					local currentOutput = OutputFrame.Visible and OutputLabel.Text or ""
					setOutput((currentOutput ~= "" and currentOutput .. "\n" or "") .. "[Warning]: " .. table.concat(newText, "\t"), true)
				end
		
				local success, runErr = pcall(func)
				if not success then
					local trace = debug.traceback(tostring(runErr), 2)
					local currentOutput = OutputFrame.Visible and OutputLabel.Text or ""
					setOutput((currentOutput ~= "" and currentOutput .. "\n" or "") .. trace, true)
				end
			end
		
			local snippets = {
				["print"] = 'print("%1")', ["warn"] = 'warn("%1")', ["wait"] = 'task.wait(%1)', ["function"] = 'function %1()\n\t\nend',
				["local"] = 'local %1 = ', ["if"] = 'if %1 then\n\t\nend', ["elseif"] = 'elseif %1 then', ["for"] = 'for i = 1, %1 do\n\t\nend',
				["pairs"] = 'for _, v in pairs(%1) do\n\t\nend', ["ipairs"] = 'for i, v in ipairs(%1) do\n\t\nend', ["pcall"] = 'pcall(function()\n\t%1\nend)',
				["game"] = 'game', ["Players"] = 'game:GetService("Players")', ["ReplicatedStorage"] = 'game:GetService("ReplicatedStorage")',
				["ServerScriptService"] = 'game:GetService("ServerScriptService")', ["Workspace"] = 'game:GetService("Workspace")', ["Lighting"] = 'game:GetService("Lighting")',
				["StarterGui"] = 'game:GetService("StarterGui")', ["UserInputService"] = 'game:GetService("UserInputService")', ["TweenService"] = 'game:GetService("TweenService")',
				["RunService"] = 'game:GetService("RunService")', ["GetService"] = ':GetService("%1")', ["WaitForChild"] = ':WaitForChild("%1")',
				["MouseButton1Click"] = ':MouseButton1Click:Connect(function()\n\t%1\nend)', ["Connect"] = ':Connect(function(%1)\n\t\nend)',
				["Instance"] = 'Instance.new("%1")', ["Vector3"] = 'Vector3.new(%1)', ["CFrame"] = 'CFrame.new(%1)',
				["and"] = ' and ', ["or"] = ' or ', ["not"] = 'not ', ["return"] = 'return ', ["LocalPlayer"] = "game:GetService('Players').LocalPlayer",
				["Character"] = "LocalPlayer.Character", ["Humanoid"] = "Character:WaitForChild('Humanoid')"
			}
		
			local AutocompleteFrame = AddThemeObject(SetChildren(MakeElement("ScrollFrame", nil, 3), {
				Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder }),
				Create("UIPadding", { PaddingLeft = UDim.new(0, 2), PaddingRight = UDim.new(0, 2), PaddingTop = UDim.new(0, 2), PaddingBottom = UDim.new(0, 2) }),
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Main")
		
			SetProps(AutocompleteFrame, {
				Size = UDim2.new(0, 160, 0, 120), Position = UDim2.new(0, 0, 0, 0), Visible = false, ZIndex = 1000, Parent = Orion
			})
		
			local autocompleteSuggestions = {}
			local selectedSuggestionIndex = 0
		
			local function clearSuggestions()
				AutocompleteFrame.Visible = false
				for _, v in pairs(AutocompleteFrame:GetChildren()) do
					if v:IsA("TextButton") then v:Destroy() end
				end
				table.clear(autocompleteSuggestions)
				selectedSuggestionIndex = 0
			end
		
			local function updateSuggestionHighlight()
				for i, button in ipairs(autocompleteSuggestions) do
					local isSelected = (i == selectedSuggestionIndex)
					button.BackgroundColor3 = isSelected and OrionLib.Themes[OrionLib.SelectedTheme].Stroke or OrionLib.Themes[OrionLib.SelectedTheme].Main
					button.TextColor3 = isSelected and OrionLib.Themes[OrionLib.SelectedTheme].Text or OrionLib.Themes[OrionLib.SelectedTheme].TextDark
				end
			end
		
			local function insertSnippet(snippetKey)
				clearSuggestions()
				isTyping = true
				local text = ActualTextbox.Text
				local cursorPos = ActualTextbox.CursorPosition
				local textBeforeCursor = string.sub(text, 1, cursorPos)
				local word = string.match(textBeforeCursor, "([%w_.:]+)$")
				if not word then isTyping = false; return end
		
				local snippet = snippets[snippetKey]
				local snippetStart = cursorPos - string.len(word)
				local textAfterCursor = string.sub(text, cursorPos + 1)
				local placeholderPos = string.find(snippet, "%%1")
		
				ignoreNextTextChange = true
				if placeholderPos then
					local finalSnippet = string.gsub(snippet, "%%1", "", 1)
					ActualTextbox.Text = string.sub(text, 1, snippetStart) .. finalSnippet .. textAfterCursor
					task.delay(0, function() ActualTextbox.CursorPosition = snippetStart + placeholderPos end)
				else
					ActualTextbox.Text = string.sub(text, 1, snippetStart) .. snippet .. textAfterCursor
					task.delay(0, function() ActualTextbox.CursorPosition = snippetStart + string.len(snippet) + 1 end)
				end
				ActualTextbox:CaptureFocus()
				isTyping = false
			end
		
			local function updateAutocomplete()
				pcall(function()
					clearSuggestions()
					local text = ActualTextbox.Text
					local cursorPos = ActualTextbox.CursorPosition
					if cursorPos == 0 then return end
			
					local textBeforeCursor = string.sub(text, 1, cursorPos)
					local word = string.match(textBeforeCursor, "([%w_.:]+)$")
			
					if not word or #word < 1 then return end
			
					local matches = {}
					for key, _ in pairs(snippets) do
						if key:sub(1, #word):lower() == word:lower() then
							table.insert(matches, key)
						end
					end
			
					if #matches == 0 then return end
					table.sort(matches)
			
					for _, key in ipairs(matches) do
						local suggestionButton = Create("TextButton", {
							Size = UDim2.new(1, 0, 0, 22), Text = key, Font = Enum.Font.Code, TextSize = 14,
							TextXAlignment = Enum.TextXAlignment.Left, Parent = AutocompleteFrame,
							BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
							TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark,
							AutoButtonColor = false
						})
			
						Create("UIPadding", { PaddingLeft = UDim.new(0, 5), Parent = suggestionButton })
						suggestionButton.MouseButton1Click:Connect(function() insertSnippet(key) end)
						table.insert(autocompleteSuggestions, suggestionButton)
					end
			
					local lineStart = 1
					for pos in string.gmatch(text:sub(1, cursorPos), "\n") do
						lineStart = pos + 1
					end
			
					local lineCount = 1
					for _ in string.gmatch(text:sub(1, cursorPos), "\n") do
						lineCount = lineCount + 1
					end
			
					local textOnLine = text:sub(lineStart, cursorPos - 1)
					local textBounds = TweenService:GetTextBounds(textOnLine, ActualTextbox.Font, ActualTextbox.TextSize, Vector2.new(1000, 1000))
			
					local lineHeight = ActualTextbox.TextSize + 4
					local xPos = ActualTextbox.AbsolutePosition.X + 40 + textBounds.X - TextboxScroll.CanvasPosition.X
					local yPos = ActualTextbox.AbsolutePosition.Y + (lineCount - 1) * lineHeight - TextboxScroll.CanvasPosition.Y + lineHeight
			
					AutocompleteFrame.Position = UDim2.fromOffset(xPos, yPos)
					AutocompleteFrame.Visible = true
					selectedSuggestionIndex = 1
					updateSuggestionHighlight()
				end)
			end
		
			local function updateLineNumbers()
				local lineCount = 1
				for _ in string.gmatch(ActualTextbox.Text, "\n") do
					lineCount = lineCount + 1
				end
				local lineText = ""
				for i = 1, lineCount do
					lineText = lineText .. i .. "\n"
				end
				LineNumbers.Text = lineText
			end
		
			local autoPairing = { ["("] = ")", ["{"] = "}", ["["] = "]", ['"'] = '"', ["'"] = "'" }
		
			AddConnection(ActualTextbox:GetPropertyChangedSignal("Text"), function()
				if ignoreNextTextChange then
					ignoreNextTextChange = false
					return
				end
				if isTyping then return end
				isTyping = true
		
				updateLineNumbers()
		
				local _, err = loadstring(ActualTextbox.Text, "OrionScript")
				if err then
					local lineNum, reason = err:match(".*:(%d+): (.*)")
					if lineNum and reason then
						local lines = ActualTextbox.Text:split("\n")
						local lineContent = lines[tonumber(lineNum)] or ""
						setOutput(string.format("[Syntax Error on Line %s]: %s\n> %s", lineNum, reason, lineContent:gsub("^%s+", ""):gsub("%s+$", "")), true)
					else
						setOutput(tostring(err), true)
					end
					hasSyntaxError = true
				else
					if hasSyntaxError then setOutput("") end
					hasSyntaxError = false
				end
		
				local originalCursor = ActualTextbox.CursorPosition
				local text = ActualTextbox.Text
				local char = string.sub(text, originalCursor - 1, originalCursor - 1)
				local charAfter = string.sub(text, originalCursor, originalCursor)
		
				if autoPairing[char] then
					if charAfter ~= autoPairing[char] and charAfter ~= '"' and charAfter ~= "'" then
						ignoreNextTextChange = true
						ActualTextbox.Text = string.sub(text, 1, originalCursor - 1) .. autoPairing[char] .. string.sub(text, originalCursor)
						ActualTextbox.CursorPosition = originalCursor
					end
				end
		
				task.spawn(updateAutocomplete)
				isTyping = false
			end)
		
			AddConnection(ActualTextbox.InputBegan, function(input)
				if AutocompleteFrame.Visible and #autocompleteSuggestions > 0 then
					if input.KeyCode == Enum.KeyCode.Down then
						selectedSuggestionIndex = (selectedSuggestionIndex % #autocompleteSuggestions) + 1
						updateSuggestionHighlight()
						input.KeyCode = Enum.KeyCode.Unknown
					elseif input.KeyCode == Enum.KeyCode.Up then
						selectedSuggestionIndex = selectedSuggestionIndex - 1
						if selectedSuggestionIndex < 1 then selectedSuggestionIndex = #autocompleteSuggestions end
						updateSuggestionHighlight()
						input.KeyCode = Enum.KeyCode.Unknown
					elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.Tab then
						pcall(function() input.KeyCode = Enum.KeyCode.Unknown end)
						if selectedSuggestionIndex > 0 and autocompleteSuggestions[selectedSuggestionIndex] then
							insertSnippet(autocompleteSuggestions[selectedSuggestionIndex].Text)
						end
					elseif input.KeyCode == Enum.KeyCode.Escape then
						clearSuggestions()
					end
				end
			end)
		
			AddConnection(ActualTextbox.FocusLost, function()
				task.delay(0.1, function()
					if not UserInputService:GetFocusedTextBox() or UserInputService:GetFocusedTextBox() ~= ActualTextbox then
						clearSuggestions()
					end
				end)
			end)
		
			updateLineNumbers()
		
			local ButtonContainer = SetChildren(Create("Frame", {
				Size = UDim2.new(1, 0, 0, 32), BackgroundTransparency = 1, Parent = ExecuterFrame
			}), {
				Create("UIListLayout", {
					FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right,
					SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6)
				})
			})
		
			local function createExecButton(btnText, btnCallback, isExecute)
				local buttonFrame = AddThemeObject(Create("TextButton", {
					Size = UDim2.new(0, 100, 1, 0), Text = "", Parent = ButtonContainer, AutoButtonColor = false,
				}), "Second")
		
				local contentLabel = AddThemeObject(SetProps(MakeElement("Label", btnText, 14), {
					Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, BackgroundTransparency = 1, Parent = buttonFrame,
					RichText = true
				}), "Text")
		
				if isExecute then
					contentLabel.Text = "<font color='#70FF70'><b>"..btnText.."</b></font>"
				end
		
				SetChildren(buttonFrame, {
					contentLabel,
					AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"),
					MakeElement("Corner", 0, 4)
				})
		
				MakeShineOnHover(buttonFrame, contentLabel)
		
				local baseColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
				AddConnection(buttonFrame.MouseEnter, function() TweenService:Create(buttonFrame, TweenInfo.new(0.2), { BackgroundColor3 = baseColor:Lerp(Color3.new(1,1,1), 0.2) }):Play() end)
				AddConnection(buttonFrame.MouseLeave, function() TweenService:Create(buttonFrame, TweenInfo.new(0.2), { BackgroundColor3 = baseColor }):Play() end)
				AddConnection(buttonFrame.MouseButton1Down, function() TweenService:Create(buttonFrame, TweenInfo.new(0.1), { BackgroundColor3 = baseColor:Lerp(Color3.new(0,0,0), 0.2) }):Play() end)
				AddConnection(buttonFrame.MouseButton1Up, function()
					if isExecute and hasSyntaxError then
						local originalColor = buttonFrame.BackgroundColor3
						buttonFrame.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
						task.wait(0.3)
						buttonFrame.BackgroundColor3 = originalColor
						return
					end
					TweenService:Create(buttonFrame, TweenInfo.new(0.1), { BackgroundColor3 = baseColor:Lerp(Color3.new(1,1,1), 0.2) }):Play()
					
					if isExecute then
						if containsSuspiciousCode(ActualTextbox.Text) then
							createExecutorWarning(function()
								task.spawn(btnCallback)
							end)
						else
							task.spawn(btnCallback)
						end
					else
						task.spawn(btnCallback)
					end
				end)
			end
		
			createExecButton("Clear", function() ActualTextbox.Text = "" setOutput("") end)
			createExecButton("Execute", function() ExecuterConfig.Callback(ActualTextbox.Text) end, true)
		
			local ExecuterObject = {Type="Executer", Name=ExecuterConfig.Name, Wrapper = ExecuterFrame}
			function ExecuterObject:SetScript(newScript) ActualTextbox.Text = newScript end
			function ExecuterObject:GetScript() return ActualTextbox.Text end
			table.insert(OrionLib.AllElements, ExecuterObject)
			return ExecuterObject
		end
function ElementFunction:AddMediaPlayer(MediaPlayerConfig)
	MediaPlayerConfig = MediaPlayerConfig or {}
	MediaPlayerConfig.Name = MediaPlayerConfig.Name or "Media Player"
	MediaPlayerConfig.Default = MediaPlayerConfig.Default or ""
	MediaPlayerConfig.Callback = MediaPlayerConfig.Callback or function() end

	local currentMediaInstance = nil
	local mediaFolder = "media_cache"
	local isPaused = false
	local currentVolume = 0.5
	local volumeSlider
	local currentPlayingIndex = -1

	local playlist = {}
	local playlistFile = "Orion/MediaPlayerPlaylist.json"
	local HttpService = game:GetService("HttpService")
	local TweenService = game:GetService("TweenService")
	local UserInputService = game:GetService("UserInputService")

	local MediaPlayerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
		Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = ItemParent
	}), {
		AddThemeObject(MakeElement("Stroke"), "Stroke"), Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6) }),
		Create("UIPadding", { PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6), PaddingTop = UDim.new(0, 6), PaddingBottom = UDim.new(0, 6) })
	}), "Second")

	local TopFrame = Create("Frame", { Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, BackgroundTransparency = 1, Parent = MediaPlayerFrame, LayoutOrder = 1 },
	{ Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6) }) })

	local contentLabel = AddThemeObject(SetProps(MakeElement("Label", MediaPlayerConfig.Name, 15), {
		Size = UDim2.new(1, 0, 0, 14), Font = Enum.Font.GothamBold, Name = "Content"
	}), "Text")
	contentLabel.Parent = TopFrame

	local TextboxActual = AddThemeObject(Create("TextBox", {
		Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), PlaceholderColor3 = Color3.fromRGB(210,210,210),
		PlaceholderText = "Enter Media URL...", Font = Enum.Font.GothamSemibold, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 14, Text = MediaPlayerConfig.Default, ClearTextOnFocus = false
	}), "Text")

	local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(1, 0, 0, 28)
	}), { AddThemeObject(MakeElement("Stroke"), "Stroke"), Create("UIPadding", {PaddingLeft = UDim.new(0,8)}), TextboxActual }), "Main")
	TextContainer.Parent = TopFrame
	
	volumeSlider = ElementFunction:AddSlider({
		Name = "Volume", Min = 0, Max = 1, Default = currentVolume, Increment = 0.01, ValueName = "%",
		Callback = function(value)
			currentVolume = value
			if currentMediaInstance then pcall(function() currentMediaInstance.Volume = value end) end
		end
	})
	volumeSlider.Wrapper.Parent = TopFrame

	local ButtonRow = Create("Frame", { Size = UDim2.new(1, 0, 0, 28), BackgroundTransparency = 1, Parent = TopFrame },
	{ Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,6)}) })
	
	local PlaylistFrame = AddThemeObject(Create("Frame", {
		Name = "PlaylistFrame", Size = UDim2.new(1, 0, 0, 200), BackgroundTransparency = 1, ClipsDescendants = true, Parent = MediaPlayerFrame, Visible = false, LayoutOrder = 3
	}), "Main")
	local PlaylistLayout = Create("UIListLayout", {Parent = PlaylistFrame, Padding = UDim.new(0, 5)})
	local PlaylistPadding = Create("UIPadding", {Parent = PlaylistFrame, PaddingTop = UDim.new(0, 5)})
	
	local PlaylistScroll = Create("ScrollingFrame", {
		Size = UDim2.new(1, 0, 1, 0), Parent = PlaylistFrame, BackgroundTransparency = 1, BorderSizePixel = 0,
		CanvasSize = UDim2.new(), ScrollingDirection = Enum.ScrollingDirection.Y,
	})
	local PlaylistScrollLayout = Create("UIListLayout", {Parent = PlaylistScroll, Padding = UDim.new(0, 5), SortOrder = Enum.SortOrder.LayoutOrder})

	local updatePlaylistUI, savePlaylist, loadPlaylist, loadMedia

	local function detectMediaType(url)
		if url:lower():match("%.mp3$") or url:lower():match("%.mp3%?") then return "MP3" end
		if url:lower():match("%.mp4$") or url:lower():match("%.mp4%?") then return "MP4" end
		return nil
	end

	local function extractFileName(url)
		local matched = url:match(".+/([^/?#]+)%.%w+$") or url:match(".+/([^/?#]+)") or url:match(".+/([^/]+)$")
		return matched or ("mediafile_" .. string.sub(tostring(os.time()), -5))
	end
	
	local VideoContainer = Create("Frame", {
		Size = UDim2.new(1, 0, 0, 0), BackgroundTransparency = 1, ClipsDescendants = true, Parent = MediaPlayerFrame, Visible = false, LayoutOrder = 2
	})

	local LoadClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
	local LoadButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Load", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
	local LoadButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow
	}), { LoadButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), LoadClick }), "Second")

	local PauseClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
	local PauseButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Pause", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
	local PauseButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow, Visible = false
	}), { PauseButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), PauseClick }), "Second")

	local ExitClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
	local ExitButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Exit", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
	local ExitButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow, Visible = false
	}), { ExitButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), ExitClick }), "Second")

	local SaveClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
	local SaveButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Save", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold }), "Text")
	local SaveButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow,
	}), {SaveButtonContent, AddThemeObject(MakeElement("Stroke"),"Stroke"), SaveClick}), "Second")

	local PlaylistClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
	local PlaylistButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Playlist", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold }), "Text")
	local PlaylistButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
		Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow,
	}), {PlaylistButtonContent, AddThemeObject(MakeElement("Stroke"),"Stroke"), PlaylistClick}), "Second")

	local function stopAndClear()
		if currentMediaInstance then
			pcall(function() currentMediaInstance:Destroy() end)
			currentMediaInstance = nil
		end
		if VideoContainer.Visible then
			local tween = TweenService:Create(VideoContainer, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)})
			tween:Play()
			task.delay(0.2, function()
				if VideoContainer and VideoContainer.Parent and not currentMediaInstance then
					VideoContainer.Visible = false
				end
			end)
		end
		isPaused = false
		LoadButtonFrame.Visible = true
		PauseButtonFrame.Visible = false
		ExitButtonFrame.Visible = false
		if currentPlayingIndex ~= -1 then
			currentPlayingIndex = -1
			updatePlaylistUI()
		end
	end

	loadMedia = function(url, playlistIndex)
		stopAndClear()
		task.wait(0.21)

		currentPlayingIndex = playlistIndex or -1
		updatePlaylistUI()

		if not url or url:gsub("%s", "") == "" then
			OrionLib:MakeNotification({Name = "Media Player", Content = "URL is empty."}); return
		end
		local mediaType = detectMediaType(url)
		if not mediaType then
			OrionLib:MakeNotification({Name = "Media Player", Content = "Invalid URL. Must be a direct link ending in .mp3 or .mp4."}); return
		end
		local fileFuncsAvailable = isfolder and makefolder and writefile and getcustomasset and isfile and delfile
		if not fileFuncsAvailable then
			OrionLib:MakeNotification({Name = "Media Player", Content = "File functions not found. Caching disabled."})
			OrionLib:MakeNotification({Name = "Media Player", Content = "This feature may not work without 'getcustomasset' support."})
			pcall(function() playAsset(url) end)
			return
		end
		OrionLib:MakeNotification({Name = "Media Player", Content = "Loading " .. mediaType .. "..."})
		task.spawn(function()
			local function playAsset(assetId)
				pcall(function()
					if mediaType == "MP4" then
						VideoContainer.Visible = true
						local aspectRatio = 16/9
						local videoHeight = VideoContainer.AbsoluteSize.X / aspectRatio
						if videoHeight <= 0 then videoHeight = 250 end
						local tween = TweenService:Create(VideoContainer, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, videoHeight)})
						tween:Play()
						local videoPlayer = Create("VideoFrame", {
							Name = "Orion_EmbeddedVideoPlayer", Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(0, 0, 0), Parent = VideoContainer,
							Draggable = false, Active = false, Video = assetId, Looped = true, Volume = currentVolume
						}, { Create("UICorner", {CornerRadius = UDim.new(0, 8)}) })
						currentMediaInstance = videoPlayer
						videoPlayer:Play()
					elseif mediaType == "MP3" then
						local soundPlayer = Create("Sound", { Name = "Orion_MediaPlayer_Audio", Parent = Orion, SoundId = assetId, Looped = true, Volume = currentVolume })
						currentMediaInstance = soundPlayer
						soundPlayer:Play()
					end
					isPaused = false
					LoadButtonFrame.Visible = false
					PauseButtonFrame.Visible = true
					PauseButtonContent.Text = "Pause"
					ExitButtonFrame.Visible = true
					MediaPlayerConfig.Callback()
				end)
			end
			if not isfolder(mediaFolder) then makefolder(mediaFolder) end
			local fileName = extractFileName(url)
			local filePath = mediaFolder .. "/" .. fileName
			local assetId = nil
			if isfile(filePath) then
				OrionLib:MakeNotification({Name = "Media Player", Content = "Loading from cache..."})
				local success, cachedAssetId = pcall(getcustomasset, filePath)
				if success and cachedAssetId then assetId = cachedAssetId
				else
					warn("Orion MediaPlayer: Failed to load from cache, re-downloading...")
					OrionLib:MakeNotification({Name = "Media Player", Content = "Cache invalid, re-downloading..."})
					pcall(delfile, filePath)
				end
			end
			if not assetId then
				OrionLib:MakeNotification({Name = "Media Player", Content = "Downloading media..."})
				local success, data = pcall(function() return game:HttpGet(url, true) end)
				if not (success and typeof(data) == "string" and #data > 100) then
					OrionLib:MakeNotification({Name = "Media Player", Content = "Download failed for URL: " .. url}); return
				end
				if not pcall(writefile, filePath, data) then
					OrionLib:MakeNotification({Name = "Media Player", Content = "Failed to save to cache."}); return
				end
				OrionLib:MakeNotification({Name = "Media Player", Content = "Download complete, creating asset..."})
				local assetSuccess, newAssetId = pcall(getcustomasset, filePath)
				if assetSuccess and newAssetId then assetId = newAssetId
				else OrionLib:MakeNotification({Name = "Media Player", Content = "Failed to create asset from file."}); return
				end
			end
			if assetId then playAsset(assetId)
			else OrionLib:MakeNotification({Name = "Media Player", Content = "An unknown error occurred."})
			end
		end)
	end

	updatePlaylistUI = function()
		for _, v in pairs(PlaylistScroll:GetChildren()) do
			if v:IsA("Frame") then v:Destroy() end
		end
		for index, item in ipairs(playlist) do
			local songFrame = AddThemeObject(Create("Frame", {
				Size = UDim2.new(1, 0, 0, 28), BackgroundTransparency = 1, Parent = PlaylistScroll,
			}), "Second")

			local frameStroke = AddThemeObject(MakeElement("Stroke"), "Stroke")
			frameStroke.Parent = songFrame

			SetChildren(songFrame, {
				MakeElement("Corner", 0, 4),
				Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 5)}),
				Create("UIPadding", {PaddingLeft=UDim.new(0,5), PaddingRight=UDim.new(0,5)})
			})

			local nameContainer = Create("Frame", {
				Size = UDim2.new(1, -120, 1, 0), BackgroundTransparency = 1, Parent = songFrame
			})
			
			local nameLabelButton = Create("TextButton", {
				Size = UDim2.fromScale(1, 1),
				Text = "",
				BackgroundTransparency = 1,
				AutoButtonColor = false,
				Parent = nameContainer,
			})

			local nameLabel = AddThemeObject(SetProps(MakeElement("Label", item.name, 12, Enum.Font.GothamBold), {
				Size = UDim2.fromScale(1, 1), TextXAlignment = Enum.TextXAlignment.Left, TextTruncate = Enum.TextTruncate.AtEnd,
				TextColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1,
				Parent = nameLabelButton,
			}), "Text")
			
			local textStroke = Create("UIStroke", {
				Color = Color3.fromRGB(0, 255, 127),
				Thickness = 1,
				Enabled = false,
				Parent = nameLabel
			})

			if index == currentPlayingIndex then
				frameStroke.Color = Color3.fromRGB(0, 255, 127)
				frameStroke.Thickness = 1.5
				textStroke.Enabled = true
			end

			local nameBox = SetChildren(Create("TextBox", {
				Size = UDim2.fromScale(1, 1), Font = Enum.Font.GothamBold, Text = item.name,
				Visible = false, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.5,
				TextXAlignment = Enum.TextXAlignment.Left, TextSize = 12,
				TextColor3 = Color3.fromRGB(255, 255, 255), Parent = nameContainer
			}), {
				Create("UICorner", {CornerRadius = UDim.new(0, 4)}),
				Create("UIPadding", {PaddingLeft = UDim.new(0, 4)}),
				Create("UIStroke", {
					Color = Color3.fromRGB(170, 0, 255),
					Thickness = 1.5
				})
			})
			
			local function activateNameEdit()
				nameLabelButton.Visible = false
				nameBox.Visible = true
				nameBox.Text = nameLabel.Text
				nameBox:CaptureFocus()
			end
			
			nameLabelButton.MouseButton1Click:Connect(activateNameEdit)
			nameLabelButton.TouchTap:Connect(activateNameEdit)
			
			nameBox.FocusLost:Connect(function(enterPressed)
				local newName = nameBox.Text
				if newName:gsub("%s", "") == "" then
					nameBox.Text = item.name
				else
					item.name = newName
					savePlaylist()
				end
				nameLabel.Text = item.name
				nameLabelButton.Visible = true
				nameBox.Visible = false
			end)

			local removeBtn = AddThemeObject(Create("TextButton", {Size = UDim2.new(0, 50, 0, 20), Text = ""}), "Second")
			SetChildren(removeBtn, {MakeElement("Corner", 0, 4), AddThemeObject(MakeElement("Stroke"),"Stroke"), AddThemeObject(SetProps(MakeElement("Label", "Remove", 12),{Size=UDim2.fromScale(1,1)}),"Text")})
			removeBtn.Parent = songFrame
			
			local loadBtn = AddThemeObject(Create("TextButton", {Size = UDim2.new(0, 50, 0, 20), Text = ""}), "Second")
			SetChildren(loadBtn, {MakeElement("Corner", 0, 4), AddThemeObject(MakeElement("Stroke"),"Stroke"), AddThemeObject(SetProps(MakeElement("Label", "Load", 12),{Size=UDim2.fromScale(1,1)}),"Text")})
			loadBtn.Parent = songFrame

			local function doLoad()
				TextboxActual.Text = item.url
				loadMedia(item.url, index)
			end
			
			local function doRemove()
				table.remove(playlist, index)
				savePlaylist()
				updatePlaylistUI()
			end
			
			loadBtn.MouseButton1Click:Connect(doLoad)
			loadBtn.TouchTap:Connect(doLoad)
			
			removeBtn.MouseButton1Click:Connect(doRemove)
			removeBtn.TouchTap:Connect(doRemove)
		end
		task.wait()
		PlaylistScroll.CanvasSize = UDim2.new(0,0,0,PlaylistScrollLayout.AbsoluteContentSize.Y)
	end
	
	savePlaylist = function()
		if writefile and (not isfolder("Orion") and makefolder("Orion") or isfolder("Orion")) then
			local success, err = pcall(writefile, playlistFile, HttpService:JSONEncode(playlist))
			if not success then OrionLib:MakeNotification({Name="Media Player", Content="Failed to save playlist"}) end
		end
	end

	loadPlaylist = function()
		if isfile and readfile and isfile(playlistFile) then
			local success, result = pcall(readfile, playlistFile)
			if success and result then
				local decodeSuccess, decoded = pcall(HttpService.JSONDecode, HttpService, result)
				if decodeSuccess and type(decoded) == "table" then
					if #decoded > 0 and type(decoded[1]) == "string" then
						OrionLib:MakeNotification({Name="Media Player", Content="Updating playlist format..."})
						local newPlaylist = {}
						for _, url in ipairs(decoded) do
							table.insert(newPlaylist, { name = extractFileName(url), url = url })
						end
						playlist = newPlaylist
						savePlaylist()
					else
						playlist = decoded
					end
				end
			end
		end
		updatePlaylistUI()
	end
	
	AddConnection(LoadClick.MouseButton1Click, function() loadMedia(TextboxActual.Text, nil) end)
	AddConnection(PauseClick.MouseButton1Click, function()
		if not currentMediaInstance or not currentMediaInstance.Parent then return end
		isPaused = not isPaused
		if isPaused then
			pcall(function() if currentMediaInstance:IsA("VideoFrame") then currentMediaInstance:Pause() else currentMediaInstance.Paused = true end end)
			PauseButtonContent.Text = "Play"
		else
			pcall(function() if currentMediaInstance:IsA("VideoFrame") then currentMediaInstance:Play() else currentMediaInstance.Paused = false end end)
			PauseButtonContent.Text = "Pause"
		end
	end)
	AddConnection(ExitClick.MouseButton1Click, stopAndClear)

	AddConnection(SaveClick.MouseButton1Click, function()
		local url = TextboxActual.Text
		if url and url:gsub("%s", "") ~= "" then
			local newItem = {
				name = extractFileName(url),
				url = url
			}
			table.insert(playlist, newItem)
			savePlaylist()
			updatePlaylistUI()
			OrionLib:MakeNotification({Name="Media Player", Content="Saved '"..newItem.name.."' to playlist!"})
		else
			OrionLib:MakeNotification({Name="Media Player", Content="URL is empty."})
		end
	end)
	AddConnection(PlaylistClick.MouseButton1Click, function()
		PlaylistFrame.Visible = not PlaylistFrame.Visible
	end)

	loadPlaylist()

	local MediaPlayerObject = {Name = MediaPlayerConfig.Name, Type = "MediaPlayer", Wrapper = MediaPlayerFrame}
	function MediaPlayerObject:Stop() stopAndClear() end
	function MediaPlayerObject:SetURL(url) TextboxActual.Text = url end
	function MediaPlayerObject:Load() loadMedia(TextboxActual.Text) end
	
	table.insert(OrionLib.AllElements, MediaPlayerObject)
	return MediaPlayerObject
end
return ElementFunction
end
local TabFunction = {}

local function createEmptyState(parent, tabConfig)
	local ts = game:GetService("TweenService")
	
	local EmptyState = SetProps(MakeElement("Frame"), {
		Name = "EmptyState",
		Parent = parent,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		ZIndex = 1000,
		ClipsDescendants = true,
	})
	
	local LayoutFrame = SetChildren(SetProps(MakeElement("Frame"), {
		Name = "LayoutFrame",
		Parent = EmptyState,
		Size = UDim2.new(1, 0, 0, 0),
		AutomaticSize = Enum.AutomaticSize.Y,
		Position = UDim2.new(0.5, 0, 0.5, 0),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundTransparency = 1,
	}), {
		Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Vertical,
			HorizontalAlignment = Enum.HorizontalAlignment.Center,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 15)
		})
	})

	local IconContainer = AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), {
		Name = "IconContainer",
		Size = UDim2.new(0, 120, 0, 120),
		BackgroundTransparency = 1,
		LayoutOrder = 1,
		Parent = LayoutFrame,
		ZIndex = 2
	}), {
		MakeElement("Corner", 0, 60),
		AddThemeObject(SetProps(MakeElement("Image", tabConfig.Image and tabConfig.ImageId or "rbxassetid://120651148831946"), {
			Name = "EmptyIcon",
			Size = UDim2.new(0.7, 0, 0.7, 0),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundTransparency = 1,
			ImageTransparency = 1
		}), "Text")
	}), "Divider")
	ts:Create(IconContainer, TweenInfo.new(0.8, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), { BackgroundTransparency = 0.95 }):Play()
	ts:Create(IconContainer.EmptyIcon, TweenInfo.new(0.8, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), { ImageTransparency = 0.3 }):Play()

	local EmptyLabel = AddThemeObject(SetProps(MakeElement("Label", "This tab is empty", 24), {
		Name = "EmptyLabel",
		AutomaticSize = Enum.AutomaticSize.XY,
		BackgroundTransparency = 1,
		TextTransparency = 0.3,
		Font = Enum.Font.GothamBold,
		LayoutOrder = 2,
		Parent = LayoutFrame,
		ZIndex = 2
	}), "Text")

	local AnimatedTextLabel = AddThemeObject(SetProps(MakeElement("Label", "", 16), {
		Name = "AnimatedTextLabel",
		AutomaticSize = Enum.AutomaticSize.XY,
		BackgroundTransparency = 1,
		TextTransparency = 1,
		Font = Enum.Font.Gotham,
		LayoutOrder = 3,
		Parent = LayoutFrame,
		ZIndex = 3
	}), "Text")

	local DiscordLabel = AddThemeObject(SetProps(MakeElement("Label", "", 18), {
		Name = "DiscordLabel",
		AutomaticSize = Enum.AutomaticSize.XY,
		BackgroundTransparency = 1,
		TextTransparency = 1,
		Font = Enum.Font.GothamSemibold,
		LayoutOrder = 4,
		Parent = LayoutFrame,
		Visible = false,
		ZIndex = 3
	}), "Text")

	local CopyButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
		Name = "CopyButton",
		Size = UDim2.new(0, 140, 0, 35),
		BackgroundTransparency = 1,
		LayoutOrder = 5,
		Parent = LayoutFrame,
		Visible = false,
		ZIndex = 4
	}), {
		MakeElement("Corner", 0, 8),
		AddThemeObject(MakeElement("Stroke"), "Stroke"),
		AddThemeObject(SetProps(MakeElement("Label", "Copy Discord Link", 14), {
			Name = "Title",
			Size = UDim2.new(1, 0, 1, 0),
			Font = Enum.Font.GothamSemibold,
			BackgroundTransparency = 1,
			TextTransparency = 1
		}), "TextDark")
	}), "Second")
	
	task.spawn(function()
		local fireEffectConnections = {}
		local infernoEffectElements = {}
		local PARTICLE_IMAGE_ID = "rbxassetid://1223527680"
		local STAR_IMAGE_ID = "rbxassetid://5946093983"
		local spaceEffectConnections = {}

		-- Check configuration flags
		local showSpaceEffects = tabConfig.Effects == true
		local showFlameEffects = tabConfig.flames == true
		local showFlameCover = tabConfig.flamescover == true
		local showDiscord = tabConfig.Discord == true
		local discordLink = tabConfig.DiscordLink or ""

		local function createSpaceBackground(container)
			local spaceContainer = Instance.new("Frame", container)
			spaceContainer.Name = "SpaceBackground"
			spaceContainer.Size = UDim2.new(1, 0, 1, 0)
			spaceContainer.BackgroundTransparency = 1
			spaceContainer.ZIndex = 0
			spaceContainer.ClipsDescendants = true

			local layers = {
				{ Count = 50, Speed = 5, MaxSize = 2, Colors = {Color3.new(1,1,1), Color3.fromRGB(200, 210, 255)} },
				{ Count = 40, Speed = 4, MaxSize = 3, Colors = {Color3.new(1,1,1), Color3.fromRGB(255, 250, 200)} },
				{ Count = 30, Speed = 3, MaxSize = 4, Colors = {Color3.new(1,1,1)} }
			}

			local function spawnAndAnimateDot(layer)
				if not spaceContainer or not spaceContainer.Parent then return end

				local dot = Instance.new("Frame", spaceContainer)
				dot.AnchorPoint = Vector2.new(0.5, 0.5)
				dot.Position = UDim2.new(0.5, 0, 0.5, 0)
				dot.Size = UDim2.fromOffset(1, 1)
				dot.BackgroundColor3 = layer.Colors[math.random(#layer.Colors)]
				dot.BorderSizePixel = 0
				dot.BackgroundTransparency = 1
				Instance.new("UICorner", dot).CornerRadius = UDim.new(0.5, 0)
				
				local angle = math.rad(math.random(0, 360))
				local endPosition = UDim2.new(0.5 + math.cos(angle) * 0.7, 0, 0.5 + math.sin(angle) * 0.7, 0)
				local life = (math.random(80, 120) / 100) * layer.Speed
				
				ts:Create(dot, TweenInfo.new(life * 0.2, Enum.EasingStyle.Linear), { BackgroundTransparency = 0.4, Size = UDim2.fromOffset(layer.MaxSize, layer.MaxSize)}):Play()
				
				local mainTween = ts:Create(dot, TweenInfo.new(life, Enum.EasingStyle.Linear), { Position = endPosition })
				mainTween.Completed:Connect(function()
					if dot and dot.Parent then
						dot:Destroy()
						spawnAndAnimateDot(layer)
					end
				end)
				mainTween:Play()
			end

			for _, layer in ipairs(layers) do
				for i = 1, layer.Count do
					task.wait(math.random() / 25) -- Stagger spawning
					spawnAndAnimateDot(layer)
				end
			end
			
			local starConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not spaceContainer or not spaceContainer.Parent then return end
				if math.random() < 0.04 then -- Combined spawn rate
					
					local useScrollingBehavior = math.random() > 0.5 -- 50% chance for each behavior
			
					if useScrollingBehavior then
						-- Create a scrolling star
						local star = Instance.new("ImageLabel", spaceContainer)
						star.Image = STAR_IMAGE_ID
						star.BackgroundTransparency = 1
						local size = math.random(25, 45)
						star.Size = UDim2.fromOffset(size, size)
						star.ImageColor3 = Color3.new(1, 1, 1)
						star.ImageTransparency = 0.4
						star.Position = UDim2.new(math.random(), 0, -0.1, 0) -- Start at top
						star.AnchorPoint = Vector2.new(0.5, 0.5)
						star.ZIndex = 2
						star.Rotation = math.random(-15, 15)
			
						local life = math.random(12, 20)
						
						local moveTween = ts:Create(star, TweenInfo.new(life, Enum.EasingStyle.Linear), { Position = UDim2.new(star.Position.X.Scale, 0, 1.1, 0), Rotation = star.Rotation + math.random(-45, 45) })
						moveTween.Completed:Connect(function()
							if star and star.Parent then
								star:Destroy()
							end
						end)
						moveTween:Play()
					else
						-- Create a fading star
						local star = Instance.new("ImageLabel", spaceContainer)
						star.Image = STAR_IMAGE_ID
						star.BackgroundTransparency = 1
						local size = math.random(20, 40)
						star.Size = UDim2.fromOffset(size, size)
						star.ImageColor3 = Color3.new(1, 1, 1)
						star.ImageTransparency = 1 -- Start invisible
						star.Position = UDim2.new(math.random(), 0, math.random(), 0) -- Random position
						star.AnchorPoint = Vector2.new(0.5, 0.5)
						star.ZIndex = 2
						star.Rotation = math.random(-25, 25)
				
						local life = math.random(4, 8)
						
						-- Fade in, then fade out
						local anim = ts:Create(star, TweenInfo.new(life / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {ImageTransparency = 0.5})
						anim.Completed:Connect(function()
							if star and star.Parent then
								local anim2 = ts:Create(star, TweenInfo.new(life / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.In), {ImageTransparency = 1})
								anim2.Completed:Connect(function()
									if star and star.Parent then star:Destroy() end
								end)
								anim2:Play()
							end
						end)
						anim:Play()
					end
				end
			end)
			table.insert(spaceEffectConnections, starConnection)
		end

		local function startInfernoEffect()
			local infernoContainer = Instance.new("Frame")
			infernoContainer.Name = "InfernoContainer"
			infernoContainer.Size = UDim2.new(1, 0, 1, 0)
			infernoContainer.BackgroundTransparency = 1
			infernoContainer.Parent = EmptyState
			infernoContainer.ZIndex = 50
			table.insert(infernoEffectElements, infernoContainer)

			local foregroundEmbers = Instance.new("Frame", infernoContainer)
			foregroundEmbers.Name = "ForegroundEmbers"
			foregroundEmbers.Size = UDim2.new(1, 0, 1, 0)
			foregroundEmbers.BackgroundTransparency = 1
			foregroundEmbers.ZIndex = 51
			
			for i = 1, 25 do
				local flame = Instance.new("ImageLabel", infernoContainer)
				flame.Image = PARTICLE_IMAGE_ID
				flame.BackgroundTransparency = 1
				local size = math.random(180, 280)
				flame.Size = UDim2.fromOffset(size, size)
				flame.Position = UDim2.new(math.random(), 0, 1.2, 0)
				flame.AnchorPoint = Vector2.new(0.5, 0.5)
				flame.ImageColor3 = Color3.fromRGB(255, 150, 0)
				flame.ImageTransparency = 1
				flame.ZIndex = 50
				flame.Rotation = math.random(-45, 45)
				
				local function animateFlame()
					if not flame or not flame.Parent then return end
					local duration = math.random(4, 6)
					flame.Position = UDim2.new(math.random(), 0, 1.2, 0)
					local anim = ts:Create(flame, TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Position = UDim2.new(flame.Position.X.Scale, 0, -0.2, 0), Rotation = flame.Rotation + math.random(-90, 90) })
					anim.Completed:Connect(animateFlame)
					anim:Play()
				end
				animateFlame()
				ts:Create(flame, TweenInfo.new(1.5), { ImageTransparency = math.random(70, 85)/100 }):Play()
			end

			local emberConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not foregroundEmbers or not foregroundEmbers.Parent then return end
				if math.random() < 0.75 then return end
				local ember = Instance.new("ImageLabel", foregroundEmbers)
				ember.Image = PARTICLE_IMAGE_ID
				ember.BackgroundTransparency = 1
				local size = math.random(15, 30)
				ember.Size = UDim2.fromOffset(size, size)
				ember.Position = UDim2.new(math.random(), 0, 1.1, 0)
				ember.AnchorPoint = Vector2.new(0.5, 1)
				ember.ImageColor3 = Color3.fromRGB(255, 200, 100)
				ember.ZIndex = 51
				local life = math.random(15, 30) / 10
				local endSize = UDim2.fromOffset(ember.Size.X.Offset * 0.5, ember.Size.Y.Offset * 0.5)
				ts:Create(ember, TweenInfo.new(life, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = ember.Position - UDim2.fromOffset(0, 400), ImageTransparency = 1, Size = endSize }):Play()
				game.Debris:AddItem(ember, life)
			end)
			table.insert(infernoEffectElements, emberConnection)
		end

		local function stopInfernoEffect(duration)
			for _, item in ipairs(infernoEffectElements) do
				if typeof(item) == "Instance" and item:IsA("GuiObject") then
					for _, child in ipairs(item:GetDescendants()) do
						if child:IsA("ImageLabel") then
							ts:Create(child, TweenInfo.new(duration), { ImageTransparency = 1 }):Play()
						end
					end
					game.Debris:AddItem(item, duration)
				elseif typeof(item) == "RBXScriptConnection" then
					item:Disconnect()
				end
			end
			infernoEffectElements = {}
		end
		
		local function manageFireEffect(label, enabled)
			if enabled then
				local fireContainer = Instance.new("Frame", label)
				fireContainer.Name = "FireContainer"
				fireContainer.Size = UDim2.new(1, 20, 0, 40)
				fireContainer.Position = UDim2.new(0.5, 0, 1, -8)
				fireContainer.AnchorPoint = Vector2.new(0.5, 0)
				fireContainer.BackgroundTransparency = 1
				fireContainer.ZIndex = -1
				fireContainer.ClipsDescendants = false

				local connection = game:GetService("RunService").Heartbeat:Connect(function()
					if not fireContainer or not fireContainer.Parent then return end
					if math.random() > 0.4 then return end
					local particle = Instance.new("ImageLabel", fireContainer)
					particle.Image = PARTICLE_IMAGE_ID
					particle.BackgroundTransparency = 1
					local size = math.random(15, 30)
					particle.Size = UDim2.fromOffset(size, size)
					particle.Position = UDim2.new(math.random(20, 80)/100, 0, 1, 0)
					particle.AnchorPoint = Vector2.new(0.5, 1)
					particle.ImageColor3 = Color3.fromRGB(255, 170, 0)
					local life = math.random(8, 15) / 10
					local xDrift = math.random(-30, 30)
					ts:Create(particle, TweenInfo.new(life, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = particle.Position - UDim2.fromOffset(-xDrift, 60), ImageTransparency = 1, Rotation = particle.Rotation + xDrift }):Play()
					game.Debris:AddItem(particle, life)
				end)
				fireEffectConnections[label] = {Container = fireContainer, Connection = connection}
			else
				if fireEffectConnections[label] then
					fireEffectConnections[label].Connection:Disconnect()
					if fireEffectConnections[label].Container then
						game.Debris:AddItem(fireEffectConnections[label].Container, 0.1)
					end
					fireEffectConnections[label] = nil
				end
			end
		end

		local function typeText(label, text, speed)
			label.Text = ""
			ts:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), { TextTransparency = 0.4 }):Play()
			
			for i = 1, #text do
				if not label or not label.Parent then return end
				label.Text = string.sub(text, 1, i)
				task.wait(speed)
			end
			
			task.wait(0.1)
			label.Text = text

			local originalColor = label.TextColor3
			for i = 1, 3 do
				local flashInfo = TweenInfo.new(0.2, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)
				local flashTween = ts:Create(label, flashInfo, { TextColor3 = Color3.new(1, 1, 1), TextTransparency = 0 })
				flashTween:Play()
				flashTween.Completed:Wait()
				local fadeInfo = TweenInfo.new(0.4, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)
				ts:Create(label, fadeInfo, { TextColor3 = originalColor, TextTransparency = 0.2 }):Play()
				task.wait(0.1)
			end
		end
		
		AddConnection(CopyButton.MouseButton1Click, function()
			setclipboard(discordLink)
			
			for i = 1, 12 do
				local particle = Instance.new("Frame", CopyButton)
				particle.BackgroundColor3 = Color3.new(1, 1, 1)
				particle.BorderSizePixel = 0
				particle.AnchorPoint = Vector2.new(0.5, 0.5)
				particle.Position = UDim2.fromScale(0.5, 0.5)
				particle.Size = UDim2.fromOffset(4, 4)
				particle.ZIndex = CopyButton.ZIndex + 1
				Instance.new("UICorner", particle).CornerRadius = UDim.new(0.5, 0)
				
				local angle = math.rad(i * 30)
				local distance = math.random(60, 90)
				local endPos = UDim2.fromScale(0.5, 0.5) + UDim2.fromOffset(math.cos(angle) * distance, math.sin(angle) * distance)
				
				ts:Create(particle, TweenInfo.new(0.7, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Position = endPos, BackgroundTransparency = 1 }):Play()
				game.Debris:AddItem(particle, 0.7)
			end
			
			CopyButton.Title.Text = "Copied!"
			ts:Create(CopyButton.Title, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {TextTransparency = 0, TextStrokeTransparency = 0.5, Position = UDim2.fromScale(0.5, 0.45), AnchorPoint = Vector2.new(0.5, 0.5)}):Play()
			
			local originalSize = CopyButton.Size
			ts:Create(CopyButton, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = originalSize + UDim2.fromOffset(10, 5)}):Play()
			task.wait(0.1)
			ts:Create(CopyButton, TweenInfo.new(0.4, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {Size = originalSize}):Play()

			task.wait(2)
			if CopyButton and CopyButton.Parent and CopyButton.Title then
				CopyButton.Title.Text = "Copy Discord Link"
				ts:Create(CopyButton.Title, TweenInfo.new(0.6, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {TextTransparency = 0.4, Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5)}):Play()
			end
		end)
		
		if showSpaceEffects then
			createSpaceBackground(EmptyState)
		end
		
		EmptyState.Destroying:Connect(function()
			for _, v in ipairs(spaceEffectConnections) do v:Disconnect() end
		end)

		local function getPrompts(config)
			local messagesConfig = config.messages
			local promptsList = {}

			-- Step 1: Try to populate from custom messages
			if type(messagesConfig) == "table" then
				-- Correct usage: messages = {"a", "b", "c"}
				for _, text in ipairs(messagesConfig) do
					if type(text) == "string" then
						table.insert(promptsList, {Label = AnimatedTextLabel, Text = text, Speed = 0.06})
					end
				end
			elseif type(messagesConfig) == "string" and messagesConfig:lower() ~= "default" then
				-- Handle single string or incorrect but forgiving usage: messages = "a", "b", "c"
				-- which is parsed as { messages = "a", [1] = "b", ... }
				table.insert(promptsList, {Label = AnimatedTextLabel, Text = messagesConfig, Speed = 0.06})
				for _, text in ipairs(config) do
					if type(text) == "string" then
						table.insert(promptsList, {Label = AnimatedTextLabel, Text = text, Speed = 0.06})
					end
				end
			end

			-- Step 2: If no custom messages were found AND default was requested/implied, use defaults.
			local useDefault = (messagesConfig == nil or messagesConfig == true or (type(messagesConfig) == "string" and messagesConfig:lower() == "default"))
			if #promptsList == 0 and useDefault then
				promptsList = {
					{Label = AnimatedTextLabel, Text = "Add some elements to get started", Speed = 0.06},
					{Label = AnimatedTextLabel, Text = "Made by Verbal Hub with love ❤️", Speed = 0.05}
				}
			end

			-- Step 3: Append Discord prompt if enabled
			if config.Discord == true then
				local link = config.DiscordLink or ""
				table.insert(promptsList, {Label = DiscordLabel, Text = "Join " .. link, Speed = 0.06})
			end

			return promptsList
		end

		local prompts = getPrompts(tabConfig)

		while EmptyState and EmptyState.Parent do
			for _, prompt in ipairs(prompts) do
				if not EmptyState or not EmptyState.Parent then break end
				
				if prompt.Label == DiscordLabel then
					DiscordLabel.Visible = true
					CopyButton.Visible = true
					ts:Create(DiscordLabel, TweenInfo.new(0.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
					ts:Create(CopyButton, TweenInfo.new(0.8, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {BackgroundTransparency = 0.9}):Play()
					ts:Create(CopyButton.Title, TweenInfo.new(0.8, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
				end
				
				if showFlameEffects then manageFireEffect(prompt.Label, true) end
				typeText(prompt.Label, prompt.Text, prompt.Speed)
				if showFlameEffects then manageFireEffect(prompt.Label, false) end
				if showFlameEffects and showFlameCover then startInfernoEffect() end
				
				task.wait(3.5)
				
				local fadeOutDuration = 0.8
				local fadeOutInfo = TweenInfo.new(fadeOutDuration, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)

				if showFlameEffects and showFlameCover then stopInfernoEffect(fadeOutDuration) end

				if prompt.Label == DiscordLabel then
					if DiscordLabel and DiscordLabel.Parent then
						ts:Create(DiscordLabel, fadeOutInfo, {TextTransparency = 1}):Play()
					end
					if CopyButton and CopyButton.Parent then
						ts:Create(CopyButton, fadeOutInfo, {BackgroundTransparency = 1}):Play()
						if CopyButton.Title then
							ts:Create(CopyButton.Title, fadeOutInfo, {TextTransparency = 1}):Play()
						end
					end
				else
					if prompt.Label and prompt.Label.Parent then
						ts:Create(prompt.Label, fadeOutInfo, {TextTransparency = 1}):Play()
					end
				end

				task.wait(fadeOutDuration)

				if prompt.Label == DiscordLabel then
					if DiscordLabel then DiscordLabel.Visible = false end
					if CopyButton then CopyButton.Visible = false end
				end
				
				if prompt.Label and prompt.Label.Parent then
					prompt.Label.Text = ""
					prompt.Label.TextTransparency = 1
				end
				
				task.wait(0.5)
			end
			task.wait(1)
		end
	end)

	return EmptyState
end
function TabFunction:newmaketabtop(TabConfig)
	TabConfig = TabConfig or {}
	TabConfig.Name = TabConfig.Name or "Top Tab"
	local isMultiTab = TabConfig.MultiTab or false
	
	local TopButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0, 0, 1, -4),
		AutomaticSize = Enum.AutomaticSize.X,
		Parent = TopTabHolder,
		BackgroundTransparency = 1,
	}), {
		AddThemeObject(MakeElement("Stroke"),"Stroke"),
		MakeElement("Corner", 0, 5),
		Create("UIPadding", {PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8)}),
		AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
			Size = UDim2.new(1, 0, 1, 0),
			Font = Enum.Font.GothamSemibold,
			Name = "Title"
		}), "TextDark")
	}), "Second")
	
	MakeShineOnHover(TopButton, TopButton.Title)
	
	local topTabInfo = {
		Button = TopButton,
		Name = TabConfig.Name,
		SideTabs = {},
		IsMultiTab = isMultiTab,
		Container = nil,
		Config = TabConfig
	}
	
	if not isMultiTab then
		topTabInfo.Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
			Size = UDim2.new(1, -150, 1, -85),
			Position = UDim2.new(0, 150, 0, 85),
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer_Direct"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15)
		}), "Divider")
		
		AddConnection(topTabInfo.Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			if topTabInfo.Container and topTabInfo.Container.UIListLayout then
				topTabInfo.Container.CanvasSize = UDim2.new(0, 0, 0, topTabInfo.Container.UIListLayout.AbsoluteContentSize.Y + 30)
			end
		end)
		
		local emptyState = createEmptyState(topTabInfo.Container, topTabInfo.Config)
		AddConnection(topTabInfo.Container.ChildAdded, function(child)
			if child ~= emptyState and child.Name ~= "UIListLayout" and child.Name ~= "UIPadding" then
				emptyState.Visible = false
			end
		end)
	end
	
	table.insert(AllTopTabObjects, topTabInfo)
	currentTopTabForCreation = topTabInfo
	
	local pressPosition
	local pressTime
	
	AddConnection(TopButton.InputBegan, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			pressPosition = input.Position
			pressTime = tick()
		end
	end)
	
	AddConnection(TopButton.InputEnded, function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if pressPosition and pressTime then
				local timeDiff = tick() - pressTime
				local positionDiff = (input.Position - pressPosition).Magnitude
				if positionDiff < 10 and timeDiff < 0.5 then
					SelectTopTab(topTabInfo)
				end
			end
			pressPosition = nil
			pressTime = nil
		end
	end)
	
	AddConnection(TopButton.Activated, function()
		SelectTopTab(topTabInfo)
	end)
	
	if not activeTopTabObject then
		if legacyTabGroup then
			table.insert(AllTopTabObjects, 1, legacyTabGroup)
		end
		SelectTopTab(AllTopTabObjects[1])
	end
	
	if not isMultiTab then
		return GetElements(topTabInfo.Container)
	else
		return nil
	end
end
 function TabFunction:MakeTab(TabConfig) 
	TabConfig = TabConfig or {}
	TabConfig.Name = TabConfig.Name or "Tab"
	TabConfig.Icon = TabConfig.Icon or ""
	TabConfig.PremiumOnly = TabConfig.PremiumOnly or false
	TabConfig.FeedbackWebhook = TabConfig.FeedbackWebhook or nil
	TabConfig.Cooldown = TabConfig.Cooldown or 300

	local parentTopTab = currentTopTabForCreation
	if not parentTopTab then
		if not legacyTabGroup then
			TabFunction:newmaketabtop({ Name = "Main", MultiTab = true, Effects = true, flames = true })
			legacyTabGroup = currentTopTabForCreation
		end
		parentTopTab = legacyTabGroup
	elseif not parentTopTab.IsMultiTab then
		warn("OrionLib: MakeTab() cannot be used with a non-MultiTab top tab. Elements will be added to the top tab directly.")
		local Elements = GetElements(parentTopTab.Container)
		return Elements
	end
	local TabButton = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(1, 0, 0, 30), Parent = TabHolder
	}), {
		AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
			AnchorPoint = Vector2.new(0, 0.5), Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 10, 0.5, 0), ImageTransparency = 0.4, Name = "Ico"
		}), "Text"),
		AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
			Size = UDim2.new(1, -35, 1, 0), Position = UDim2.new(0, 35, 0, 0), Font = Enum.Font.GothamSemibold, TextTransparency = 0.4, Name = "Title"
		}), "Text")
	})
	if GetIcon(TabConfig.Icon) ~= nil then TabButton.Ico.Image = GetIcon(TabConfig.Icon) end
	MakeShineOnHover(TabButton, TabButton.Title)
	local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
		Size = UDim2.new(1, -150, 1, -85), Position = UDim2.new(0, 150, 0, 85), Parent = MainWindow, Visible = false, Name = "ItemContainer_Side"
	}), {
		MakeElement("List", 0, 6), MakeElement("Padding", 15, 10, 10, 15)
	}), "Divider")
	AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		if Container and Container.UIListLayout then
			Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30)
		end
	end)
	local emptyState = createEmptyState(Container, TabConfig)
	AddConnection(Container.ChildAdded, function(child)
		if child ~= emptyState and child.Name ~= "UIListLayout" and child.Name ~= "UIPadding" then
			emptyState.Visible = false
		end
	end)

	if TabConfig.Name == "Home" then
		pcall(function() Container.UIListLayout:Destroy() end)
		pcall(function() Container.UIPadding:Destroy() end)
		pcall(function() Container.EmptyState:Destroy() end)
		Container.ScrollingEnabled = false
		Container.BackgroundTransparency = 1

		Players = game:GetService("Players")
		HttpService = game:GetService("HttpService")
		UserInputService = game:GetService("UserInputService")
		MarketplaceService = game:GetService("MarketplaceService")
		RunService = game:GetService("RunService")
		TweenService = game:GetService("TweenService")
		TeleportService = game:GetService("TeleportService")
		SoundService = game:GetService("SoundService")
		LocalizationService = game:GetService("LocalizationService")
		localPlayer_878 = Players.LocalPlayer
		if not localPlayer_878 then return Elements end

		userLang_878 = "en"
		pcall(function() userLang_878 = LocalizationService.RobloxLocaleId:sub(1, 2) end)
		translationCache_878 = {}
		
		clean_878 = function(str) return string.match(str, "^%s*(.-)%s*$") or "" end
		
		getTranslationUrl_878 = function(text, toLang)
			local encoded = HttpService:UrlEncode(text)
			return "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=" .. toLang .. "&dt=t&q=" .. encoded
		end
		
		translate_878 = function(text, toLang)
			if toLang == "en" or not text or text == "" then return text end
			if translationCache_878[text] then return translationCache_878[text] end
			
			local success, result = pcall(function()
				local url = getTranslationUrl_878(text, toLang)
				local response = game:HttpGet(url)
				return HttpService:JSONDecode(response)
			end)
			
			if success and result and result[1] and result[1][1] then
				local translatedText = clean_878(result[1][1][1])
				translationCache_878[text] = translatedText
				return translatedText
			else
				translationCache_878[text] = text
				return text
			end
		end

		setTextAsync_878 = function(uiObject, text)
			if not uiObject or not text then return end
			uiObject.Text = text
			if userLang_878 == "en" then return end
			task.spawn(function()
				local translatedText = translate_878(text, userLang_878)
				if uiObject and uiObject.Parent then
					uiObject.Text = translatedText
				end
			end)
		end
		
		setPlaceholderTextAsync_878 = function(uiObject, text)
			if not uiObject or not text then return end
			uiObject.PlaceholderText = text
			if userLang_878 == "en" then return end
			task.spawn(function()
				local translatedText = translate_878(text, userLang_878)
				if uiObject and uiObject.Parent then
					uiObject.PlaceholderText = translatedText
				end
			end)
		end
		
		HttpRequest_878 = (syn and syn.request) or (http and http.request) or (http_request) or (flux and flux.request) or request
		joinTime_878 = os.time()
		
		lat_878, lon_878 = 0, 0
		currentConditionCode_878 = 0
		oldVolumeBeforeMute_878 = 1
		pcall(function() oldVolumeBeforeMute_878 = SoundService.MasterVolume end)

		playerActionStates_878 = {
			noclip = false, flight = false, invulnerable = false, walkflinging = false,
			esp = false, night = false, audio = true, visibility = false
		}
		
		isWalkFlinging_878 = false
		antiflingConn_878 = nil
		AntiLagModule_878 = nil
		isAntiLagLoading_878 = false
		RTXModule_878 = nil
		isRTXLoading_878 = false

		function loadAntiLagModule_878()
			if AntiLagModule_878 or isAntiLagLoading_878 then return end
			isAntiLagLoading_878 = true
			local success, result = pcall(function()
				return loadstring(game:HttpGet("https://raw.githubusercontent.com/VerbalHubz/scripts/refs/heads/main/anti%20lag"))()
			end)
			if success then AntiLagModule_878 = result or _G.AntiLagLibrary
			else warn("Failed to load Anti-Lag: " .. tostring(result)) end
			isAntiLagLoading_878 = false
		end
		
		function loadRTXModule_878()
			if RTXModule_878 or isRTXLoading_878 then return end
			isRTXLoading_878 = true
			local success, result = pcall(function()
				return loadstring(game:HttpGet("https://raw.githubusercontent.com/VerbalHubz/scripts/refs/heads/main/Rtx"))()
			end)
			if success then RTXModule_878 = result or _G.RTXModule
			else warn("Failed to load RTX: " .. tostring(result)) end
			isRTXLoading_878 = false
		end

		function getRoot_878(character)
			return character and (character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso"))
		end

		function showWarningGui_878(message)
			for _, v in ipairs(localPlayer_878:WaitForChild("PlayerGui"):GetChildren()) do
				if v.Name == "OrionPingWarning" then v:Destroy() end
			end
			local screenGui = Instance.new("ScreenGui", localPlayer_878:WaitForChild("PlayerGui"))
			screenGui.Name = "OrionPingWarning"
			screenGui.ResetOnSpawn = false
			screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		
			local main = Instance.new("Frame", screenGui)
			main.Size = UDim2.new(0, 350, 0, 80)
			main.Position = UDim2.new(0.5, -175, 1, 100)
			main.BackgroundColor3 = Color3.fromRGB(40, 30, 30)
			local mainCorner = Instance.new("UICorner", main)
			mainCorner.CornerRadius = UDim.new(0, 8)
			local mainStroke = Instance.new("UIStroke", main)
			mainStroke.Color = Color3.fromRGB(225, 125, 75)
		
			local side = Instance.new("Frame", main)
			side.Size = UDim2.new(0, 6, 1, 0)
			side.BackgroundColor3 = Color3.fromRGB(225, 125, 75)
			local sideCorner = Instance.new("UICorner", side)
			sideCorner.CornerRadius = UDim.new(0, 8)
		
			local icon = Instance.new("ImageLabel", main)
			icon.Size = UDim2.new(0, 40, 0, 40)
			icon.Position = UDim2.new(0, 30, 0.5, 0)
			icon.AnchorPoint = Vector2.new(0.5, 0.5)
			icon.Image = "rbxassetid://2328131566"
			icon.ImageColor3 = Color3.fromRGB(255, 200, 150)
			icon.BackgroundTransparency = 1
			
			local title = Instance.new("TextLabel", main)
			title.Size = UDim2.new(1, -110, 0, 30)
			title.Position = UDim2.new(0, 60, 0, 10)
			setTextAsync_878(title, "Warning")
			title.Font = Enum.Font.GothamBold
			title.TextSize = 16
			title.TextColor3 = Color3.fromRGB(225, 175, 75)
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.BackgroundTransparency = 1
		
			local msg = Instance.new("TextLabel", main)
			msg.Size = UDim2.new(1, -110, 0, 40)
			msg.Position = UDim2.new(0, 60, 0, 35)
			task.spawn(function() msg.Text = translate_878(message, userLang_878) end)
			msg.Font = Enum.Font.Gotham
			msg.TextSize = 14
			msg.TextColor3 = Color3.new(1, 1, 1)
			msg.TextXAlignment = Enum.TextXAlignment.Left
			msg.TextYAlignment = Enum.TextYAlignment.Top
			msg.BackgroundTransparency = 1
			msg.TextWrapped = true
			
			local closeButton = Instance.new("TextButton", main)
			closeButton.Size = UDim2.new(0, 20, 0, 20)
			closeButton.Position = UDim2.new(1, -15, 0, 10)
			closeButton.AnchorPoint = Vector2.new(0.5, 0)
			closeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			closeButton.BackgroundTransparency = 0.8
			closeButton.Text = "X"
			closeButton.Font = Enum.Font.GothamBold
			closeButton.TextSize = 14
			closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
			local closeCorner = Instance.new("UICorner", closeButton)
			closeCorner.CornerRadius = UDim.new(1, 0)
			
			closeButton.Activated:Connect(function()
				if screenGui and screenGui.Parent then
					screenGui:Destroy()
				end
			end)
		
			local pulseConnection
			pulseConnection = RunService.Heartbeat:Connect(function()
				if not icon or not icon.Parent then
					pulseConnection:Disconnect()
					return
				end
				local sine = math.sin(tick() * 6)
				icon.ImageTransparency = sine * 0.25
				icon.Rotation = sine * 5
			end)
			
			main.Destroying:Connect(function()
				if pulseConnection then pulseConnection:Disconnect() end
			end)

			local sound = Instance.new("Sound", main)
			sound.SoundId = "rbxassetid://124951621656853"
			sound:Play()
			sound.Ended:Connect(function() sound:Destroy() end)
		
			TweenService:Create(main, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -175, 1, -90)}):Play()
			
			task.delay(5, function()
				if main and main.Parent then
					TweenService:Create(main, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In), {Position = UDim2.new(0.5, -175, 1, 100)}):Play()
					task.wait(0.5)
					if screenGui and screenGui.Parent then
						screenGui:Destroy()
					end
				end
			end)
		end
		
		local icons = {
			InfoTab = "rbxassetid://93522081013627", FriendsTab = "rbxassetid://17349099636", PlayerTab = "rbxassetid://6032194565", FeedbackTab = "rbxassetid://5013032505", ForecastTab = "rbxassetid://18440998488",
			PlayerLeft = "rbxassetid://90593114212596", HourlySubTab = "rbxassetid://16820900803", ArrowClosed = "rbxassetid://97136202386756", ArrowOpened = "rbxassetid://119090403860693",
			CharacterSettings = "rbxassetid://75883179428189",
			PlayerActions = "rbxassetid://1522228539",
			ViewPlayer = "rbxassetid://14386256326",
			Session = "rbxassetid://91756129096042", Location = "rbxassetid://14240466919", Details = "rbxassetid://120347551836061", Network = "rbxassetid://98455290625865",
			Privacy = "rbxassetid://85367790036886", Region = "rbxassetid://134569085797091", Uptime = "rbxassetid://4034150594", Join = "rbxassetid://115391784333228",
			Success = "rbxassetid://18349889388", Failure = "rbxassetid://5107155560", Locked = "rbxassetid://17593739280", Unlocked = "rbxassetid://13575869725",
			Weather = { Default = "rbxassetid://280653194", Rain = "rbxassetid://240651405", Thunder = "rbxassetid://261307429", Sunny = "rbxassetid://240651660", Cloudy = "rbxassetid://280653194", Snow = "rbxassetid://2581764604", Night = "rbxassetid://240651611", Fog = "rbxassetid://11534834464", Showers = "rbxassetid://9239322394" },
			Time = { Day = "rbxassetid://240651660", Night = "rbxassetid://9027816797" }
		}

		local subTabContainer = Instance.new("Frame", Container)
		subTabContainer.Size = UDim2.new(1, 0, 0, 35); subTabContainer.BackgroundTransparency = 1
		local subTabLayout = Instance.new("UIListLayout", subTabContainer)
		subTabLayout.FillDirection = Enum.FillDirection.Horizontal; subTabLayout.VerticalAlignment = Enum.VerticalAlignment.Center; subTabLayout.Padding = UDim.new(0, 15)

		local function createSubTabButton(text, iconId, parent)
			local btn = Instance.new("TextButton", parent or subTabContainer); btn.Text = ""; btn.AutomaticSize = Enum.AutomaticSize.X; btn.Size = UDim2.new(0, 0, 1, 0); btn.BackgroundTransparency = 1
			local layout = Instance.new("UIListLayout", btn); layout.FillDirection = Enum.FillDirection.Horizontal; layout.VerticalAlignment = Enum.VerticalAlignment.Center; layout.Padding = UDim.new(0, 6)
			local img = Instance.new("ImageLabel", btn); img.Size = UDim2.new(0, 20, 0, 20); img.Image = iconId; img.BackgroundTransparency = 1; img.ImageTransparency = 0.5
			local lbl = Instance.new("TextLabel", btn);
			setTextAsync_878(lbl, text)
			lbl.Font = Enum.Font.GothamSemibold; lbl.TextSize = 14; lbl.TextColor3 = Color3.fromRGB(180, 180, 180)
			lbl.BackgroundTransparency = 1; lbl.AutomaticSize = Enum.AutomaticSize.X; lbl.Size = UDim2.new(0, 0, 1, 0)
			return btn, img, lbl
		end
		
		local infoButton, infoImage, infoLabel = createSubTabButton("Info", icons.InfoTab)
		local playersButton, playersImage, playersLabel = createSubTabButton("Players", icons.PlayerTab)
		local friendsButton, friendsImage, friendsLabel = createSubTabButton("Friends", icons.FriendsTab)
		local forecastButton, forecastImage, forecastLabel = createSubTabButton("Forecast", icons.ForecastTab)
		
		infoImage.ImageTransparency = 0; infoLabel.TextColor3 = Color3.new(1,1,1)

		local indicator = Instance.new("Frame", infoLabel)
		indicator.Size = UDim2.new(1, 0, 0, 2); indicator.Position = UDim2.new(0, 0, 1, 2); indicator.AnchorPoint = Vector2.new(0, 1); indicator.BackgroundColor3 = Color3.new(1, 1, 1); indicator.BorderSizePixel = 0
		local corner = Instance.new("UICorner", indicator); corner.CornerRadius = UDim.new(1, 0)
		
		local pagesContainer = Instance.new("Frame", Container)
		pagesContainer.Size = UDim2.new(1, 0, 1, -35); pagesContainer.Position = UDim2.new(0, 0, 0, 35); pagesContainer.BackgroundTransparency = 1

		local infoPage = Instance.new("ScrollingFrame", pagesContainer); infoPage.Size = UDim2.new(1, 0, 1, 0); infoPage.BackgroundTransparency = 1; infoPage.BorderSizePixel = 0; infoPage.AutomaticCanvasSize = Enum.AutomaticSize.Y
		local listLayout = Instance.new("UIListLayout", infoPage); listLayout.Padding = UDim.new(0, 15); listLayout.SortOrder = Enum.SortOrder.LayoutOrder
		local padding = Instance.new("UIPadding", infoPage); padding.PaddingTop = UDim.new(0, 15); padding.PaddingBottom = UDim.new(0, 15); padding.PaddingLeft = UDim.new(0, 15); padding.PaddingRight = UDim.new(0, 15)
		
		local playersPage = Instance.new("Frame", pagesContainer); playersPage.Size = UDim2.new(1, 0, 1, 0); playersPage.BackgroundTransparency = 1; playersPage.Visible = false;
		
		local friendsPage = Instance.new("Frame", pagesContainer); friendsPage.Size = UDim2.new(1, 0, 1, 0); friendsPage.BackgroundTransparency = 1; friendsPage.Visible = false
		local forecastPage = Instance.new("ScrollingFrame", pagesContainer); forecastPage.Size = UDim2.new(1, 0, 1, 0); forecastPage.BackgroundTransparency = 1; forecastPage.Visible = false; forecastPage.BorderSizePixel = 0; forecastPage.AutomaticCanvasSize = Enum.AutomaticSize.Y
		local forecastList = Instance.new("UIListLayout", forecastPage); forecastList.Padding = UDim.new(0, 10); forecastList.SortOrder = Enum.SortOrder.LayoutOrder; local forecastPadding = Instance.new("UIPadding", forecastPage); forecastPadding.PaddingTop=UDim.new(0,15); forecastPadding.PaddingLeft=UDim.new(0,15); forecastPadding.PaddingRight=UDim.new(0,15)
		local feedbackPage

		local activeElements = {Btn=infoButton, Img=infoImage, Lbl=infoLabel}
		local tabMap = {[infoButton] = infoPage, [playersButton] = playersPage, [friendsButton] = friendsPage, [forecastButton] = forecastPage}

		local function switchTabs(targetElements)
			for _, page in pairs(tabMap) do page.Visible = false end
			if feedbackPage then feedbackPage.Visible = false end
			if activeElements.Lbl then activeElements.Img.ImageTransparency = 0.5; activeElements.Lbl.TextColor3 = Color3.fromRGB(180, 180, 180) end
			local pageToShow = tabMap[targetElements.Btn]
			if pageToShow then pageToShow.Visible = true end
			targetElements.Img.ImageTransparency = 0; targetElements.Lbl.TextColor3 = Color3.new(1, 1, 1)
			indicator.Parent = targetElements.Lbl; activeElements = targetElements
		end
		
		infoButton.Activated:Connect(function() switchTabs({Btn=infoButton, Img=infoImage, Lbl=infoLabel}) end)
		playersButton.Activated:Connect(function() switchTabs({Btn=playersButton, Img=playersImage, Lbl=playersLabel}) end)
		friendsButton.Activated:Connect(function() switchTabs({Btn=friendsButton, Img=friendsImage, Lbl=friendsLabel}) end)
		forecastButton.Activated:Connect(function() switchTabs({Btn=forecastButton, Img=forecastImage, Lbl=forecastLabel}) end)
		
		if TabConfig.FeedbackWebhook then
			local feedbackButton, feedbackImage, feedbackLabel = createSubTabButton("Feedback", icons.FeedbackTab)
			feedbackPage = Instance.new("Frame", pagesContainer); feedbackPage.Size = UDim2.new(1,0,1,0); feedbackPage.BackgroundTransparency = 1; feedbackPage.Visible = false
			tabMap[feedbackButton] = feedbackPage
			feedbackButton.Activated:Connect(function() switchTabs({Btn=feedbackButton, Img=feedbackImage, Lbl=feedbackLabel}) end)
			
			local feedbackContent = Instance.new("Frame", feedbackPage); feedbackContent.Size = UDim2.new(1,0,1,0); feedbackContent.BackgroundTransparency = 1;
			local feedbackOverlay = Instance.new("Frame", feedbackPage); feedbackOverlay.Size = UDim2.new(1,0,1,0); feedbackOverlay.BackgroundTransparency = 1; feedbackOverlay.Visible = false; feedbackOverlay.ZIndex = 100
			local pagePadding = Instance.new("UIPadding", feedbackContent); pagePadding.PaddingTop = UDim.new(0, 20); pagePadding.PaddingLeft = UDim.new(0, 15); pagePadding.PaddingRight = UDim.new(0, 15)
			local feedbackLayout = Instance.new("UIListLayout", feedbackContent); feedbackLayout.Padding = UDim.new(0, 10)
			local feedbackTitle = Instance.new("TextLabel", feedbackContent); feedbackTitle.Size = UDim2.new(1,0,0,20);
			setTextAsync_878(feedbackTitle, "Submit Feedback & Bug Reports")
			feedbackTitle.Font = Enum.Font.GothamBold; feedbackTitle.TextSize = 16; feedbackTitle.TextColor3 = Color3.new(1,1,1); feedbackTitle.BackgroundTransparency = 1; feedbackTitle.TextXAlignment = Enum.TextXAlignment.Left
			local feedbackBox = Instance.new("TextBox", feedbackContent); feedbackBox.Size = UDim2.new(1,0,1,-90); feedbackBox.Text = ""; feedbackBox.MultiLine = true; feedbackBox.ClearTextOnFocus = false
			setPlaceholderTextAsync_878(feedbackBox, "Type your detailed feedback here...")
			feedbackBox.Font = Enum.Font.Gotham; feedbackBox.TextSize = 14; feedbackBox.BackgroundColor3 = Color3.fromRGB(25,25,30); feedbackBox.TextColor3 = Color3.new(1,1,1)
			feedbackBox.TextXAlignment = Enum.TextXAlignment.Left; feedbackBox.TextYAlignment = Enum.TextYAlignment.Top
			local fbCorner = Instance.new("UICorner", feedbackBox); fbCorner.CornerRadius = UDim.new(0, 8)
			local fbPadding = Instance.new("UIPadding", feedbackBox); fbPadding.PaddingLeft=UDim.new(0,10); fbPadding.PaddingTop=UDim.new(0,10)
			local buttonFrame = Instance.new("Frame", feedbackContent); buttonFrame.Size = UDim2.new(1,0,0,35); buttonFrame.BackgroundTransparency = 1
			local bfLayout = Instance.new("UIListLayout", buttonFrame); bfLayout.FillDirection=Enum.FillDirection.Horizontal; bfLayout.HorizontalAlignment=Enum.HorizontalAlignment.Right; bfLayout.Padding = UDim.new(0,10)

			local MUTE_FILE = "OrionLib_MuteData_" .. localPlayer_878.UserId .. ".json"
			local muteData = {Offenses = 0}
			local profanityList = {"fuck", "nigger", "nazi"}
			local setUnlockState
			
			local function loadMuteData() if isfile and isfile(MUTE_FILE) then local s, d = pcall(function() return HttpService:JSONDecode(readfile(MUTE_FILE)) end); if s and d then muteData = d; return true end end; return false end
			local function saveMuteData() if writefile then pcall(function() writefile(MUTE_FILE, HttpService:JSONEncode(muteData)) end) end end
			
			local function createFeedbackButton(text, color, sizeX)
				local btn = Instance.new("TextButton", buttonFrame); btn.Size = UDim2.new(0, sizeX, 1, 0);
				setTextAsync_878(btn, text)
				btn.Font = Enum.Font.GothamBold; btn.TextSize = 14
				btn.BackgroundColor3 = Color3.new(1,1,1); btn.TextColor3 = color; local corner = Instance.new("UICorner", btn); corner.CornerRadius = UDim.new(0, 6)
				btn.MouseEnter:Connect(function() TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(200,200,200)}):Play() end)
				btn.MouseLeave:Connect(function() TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.new(1,1,1)}):Play() end)
				return btn
			end
			
			local submitButton = createFeedbackButton("Submit", Color3.fromRGB(20,20,20), 120)
			local clearButton = createFeedbackButton("Clear", Color3.fromRGB(150,20,20), 100)

			local lastSubmissionTime = 0; local currentCooldown = TabConfig.Cooldown;

			RunService.Heartbeat:Connect(function()
				if not submitButton or not submitButton.Parent then return end
				local timeNow = os.time()
				local remaining = (lastSubmissionTime + currentCooldown) - timeNow
				if remaining > 0 then
					submitButton.Text = string.format("%s %.0fs", translate_878("Wait", userLang_878), remaining)
					submitButton.AutoButtonColor = false
				elseif submitButton.Text ~= translate_878("Submit", userLang_878) then
					setTextAsync_878(submitButton, "Submit")
					submitButton.AutoButtonColor = true
				end
			end)
			
			local function showOverlayMessage(isSuccess, title, message)
				feedbackOverlay.Visible = true; for _, child in ipairs(feedbackOverlay:GetChildren()) do child:Destroy() end
				local bg = Instance.new("Frame", feedbackOverlay); bg.Size = UDim2.new(1,0,1,0); bg.BackgroundColor3 = isSuccess and Color3.fromRGB(70, 180, 70) or Color3.fromRGB(200, 60, 60); bg.BackgroundTransparency = 0.1; local bgCorner = Instance.new("UICorner", bg); bgCorner.CornerRadius = UDim.new(0, 8)
				local icon = Instance.new("ImageLabel", bg); icon.Size = UDim2.new(0, 48, 0, 48); icon.Position = UDim2.new(0.5, 0, 0.5, -40); icon.AnchorPoint = Vector2.new(0.5, 0.5); icon.Image = isSuccess and icons.Success or icons.Failure; icon.BackgroundTransparency = 1
				local titleLabel = Instance.new("TextLabel", bg); titleLabel.Size = UDim2.new(1, -40, 0, 30); titleLabel.Position = UDim2.new(0.5, 0, 0.5, 0); titleLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(titleLabel, title); titleLabel.Font = Enum.Font.GothamBold; titleLabel.TextSize = 18; titleLabel.TextColor3 = Color3.new(1,1,1); titleLabel.BackgroundTransparency = 1
				local messageLabel = Instance.new("TextLabel", bg); messageLabel.Size = UDim2.new(1, -40, 0, 60); messageLabel.Position = UDim2.new(0.5, 0, 0.5, 40); messageLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(messageLabel, message); messageLabel.Font = Enum.Font.Gotham; messageLabel.TextSize = 14; messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220); messageLabel.BackgroundTransparency = 1; messageLabel.TextWrapped = true
				task.delay(5, function() if feedbackOverlay and feedbackOverlay.Parent then feedbackOverlay.Visible = false; for _, child in ipairs(feedbackOverlay:GetChildren()) do child:Destroy() end end end)
			end

			setUnlockState = function()
				feedbackOverlay.Visible = true; feedbackContent.Visible = false; for _, child in ipairs(feedbackOverlay:GetChildren()) do child:Destroy() end
				local bg = Instance.new("Frame", feedbackOverlay); bg.Size = UDim2.new(1,0,1,0); bg.BackgroundColor3 = Color3.fromRGB(30, 45, 30); bg.BackgroundTransparency = 0.15; local bgCorner = Instance.new("UICorner", bg); bgCorner.CornerRadius = UDim.new(0, 8)
				local icon = Instance.new("ImageLabel", bg); icon.Size = UDim2.new(0, 80, 0, 80); icon.Position = UDim2.new(0.5, 0, 0.5, -80); icon.AnchorPoint = Vector2.new(0.5, 0.5); icon.Image = icons.Unlocked; icon.ImageColor3 = Color3.fromRGB(120, 255, 120); icon.BackgroundTransparency = 1
				local titleLabel = Instance.new("TextLabel", bg); titleLabel.Size = UDim2.new(1, -40, 0, 30); titleLabel.Position = UDim2.new(0.5, 0, 0.5, -20); titleLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(titleLabel, "Unlocked"); titleLabel.Font = Enum.Font.GothamBold; titleLabel.TextSize = 22; titleLabel.TextColor3 = Color3.fromRGB(120, 255, 120); titleLabel.BackgroundTransparency = 1
				local messageLabel = Instance.new("TextLabel", bg); messageLabel.Size = UDim2.new(1, -40, 0, 60); messageLabel.Position = UDim2.new(0.5, 0, 0.5, 25); messageLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(messageLabel, "Please don't use profanity words for feedback for trolling."); messageLabel.Font = Enum.Font.Gotham; messageLabel.TextSize = 14; messageLabel.TextColor3 = Color3.fromRGB(200, 220, 200); messageLabel.BackgroundTransparency = 1; messageLabel.TextWrapped = true;
				local unlockButton = Instance.new("TextButton", bg); unlockButton.Size = UDim2.new(0, 150, 0, 40); unlockButton.Position = UDim2.new(0.5, 0, 0.5, 80); unlockButton.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(unlockButton, "Unlock"); unlockButton.Font = Enum.Font.GothamBold; unlockButton.TextSize = 16; unlockButton.BackgroundColor3 = Color3.fromRGB(80, 180, 80); unlockButton.TextColor3 = Color3.new(1,1,1); local btnCorner = Instance.new("UICorner", unlockButton); btnCorner.CornerRadius = UDim.new(0,8)
				unlockButton.Activated:Connect(function() muteData.Offenses = 0; muteData.UnlockTime = nil; saveMuteData(); feedbackOverlay.Visible = false; feedbackContent.Visible = true; for _, child in ipairs(feedbackOverlay:GetChildren()) do child:Destroy() end end)
			end
			
			local function formatUnlockTime(seconds) local d=math.floor(seconds/86400);local h=math.floor((seconds%86400)/3600);local m=math.floor((seconds%3600)/60);local s=math.floor(seconds%60);return string.format("%dD %02dH %02dM %02dS",d,h,m,s) end

			local function setMuteState(unlockTime)
				feedbackOverlay.Visible = true; feedbackContent.Visible = false; for _, child in ipairs(feedbackOverlay:GetChildren()) do child:Destroy() end
				local bg = Instance.new("Frame", feedbackOverlay); bg.Size = UDim2.new(1,0,1,0); bg.BackgroundColor3 = Color3.fromRGB(45, 35, 35); bg.BackgroundTransparency = 0.15; local bgCorner = Instance.new("UICorner", bg); bgCorner.CornerRadius = UDim.new(0, 8)
				local icon = Instance.new("ImageLabel", bg); icon.Size = UDim2.new(0, 80, 0, 80); icon.Position = UDim2.new(0.5, 0, 0.5, -100); icon.AnchorPoint = Vector2.new(0.5, 0.5); icon.Image = icons.Locked; icon.BackgroundTransparency = 1
				local titleLabel = Instance.new("TextLabel", bg); titleLabel.Size = UDim2.new(1, -40, 0, 30); titleLabel.Position = UDim2.new(0.5, 0, 0.5, -45); titleLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(titleLabel, "Feedback Locked"); titleLabel.Font = Enum.Font.GothamBold; titleLabel.TextSize = 22; titleLabel.TextColor3 = Color3.fromRGB(255, 80, 80); titleLabel.BackgroundTransparency = 1
				local messageLabel = Instance.new("TextLabel", bg); messageLabel.Size = UDim2.new(1, -40, 0, 60); messageLabel.Position = UDim2.new(0.5, 0, 0.5, -5); messageLabel.AnchorPoint = Vector2.new(0.5, 0.5); setTextAsync_878(messageLabel, "Locked due to you saying profanity words. This is not allowed. Please wait for the 24 hour countdown."); messageLabel.Font = Enum.Font.Gotham; messageLabel.TextSize = 14; messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220); messageLabel.BackgroundTransparency = 1; messageLabel.TextWrapped = true;
				local countdownLabel = Instance.new("TextLabel", bg); countdownLabel.Size = UDim2.new(1, -40, 0, 40); countdownLabel.Position = UDim2.new(0.5, 0, 0.5, 50); countdownLabel.AnchorPoint = Vector2.new(0.5, 0.5); countdownLabel.Text = "00D 00H 00M 00S"; countdownLabel.Font = Enum.Font.GothamBold; countdownLabel.TextSize = 28; countdownLabel.TextColor3 = Color3.new(1,1,1); countdownLabel.BackgroundTransparency = 1
				local dateLabel = Instance.new("TextLabel", bg); dateLabel.Size = UDim2.new(1, -40, 0, 20); dateLabel.Position = UDim2.new(0.5, 0, 0.5, 90); dateLabel.AnchorPoint = Vector2.new(0.5, 0.5); dateLabel.Text = translate_878("Unlocks on: ", userLang_878)..os.date("%A, %B %d, %Y at %I:%M %p", unlockTime); dateLabel.Font = Enum.Font.Gotham; dateLabel.TextSize = 14; dateLabel.TextColor3 = Color3.fromRGB(200,200,200); dateLabel.BackgroundTransparency = 1
				local countdownConnection; countdownConnection = RunService.Heartbeat:Connect(function() local remaining = unlockTime - os.time(); if remaining > 0 then countdownLabel.Text = formatUnlockTime(remaining) else setUnlockState(); countdownConnection:Disconnect() end end)
			end
			
			loadMuteData()
			if muteData.UnlockTime and os.time() < muteData.UnlockTime then setMuteState(muteData.UnlockTime)
			elseif muteData.UnlockTime and os.time() >= muteData.UnlockTime then muteData.Offenses = 0; muteData.UnlockTime = nil; saveMuteData(); setUnlockState() end

			clearButton.Activated:Connect(function() feedbackBox.Text = "" end)
			submitButton.Activated:Connect(function()
				if feedbackContent.Visible == false or submitButton.AutoButtonColor == false then return end
				local timeNow = os.time(); if timeNow - lastSubmissionTime < currentCooldown then return end
				local message = feedbackBox.Text
				local lowerMessage = message:lower()
				for _, word in ipairs(profanityList) do
					if lowerMessage:find(word) then
						muteData.Offenses = (muteData.Offenses or 0) + 1
						if muteData.Offenses == 1 then
							showOverlayMessage(false, translate_878("Profanity Detected", userLang_878), translate_878("You can't send messages due to profanity. You may try again in 20 seconds as punishment.", userLang_878))
							lastSubmissionTime = timeNow; currentCooldown = 20;
							saveMuteData()
							local embed = {title = "Profanity Warning (1st Offense)", color = 16776960, fields = {{name = "User", value = localPlayer_878.Name .. " (`" .. localPlayer_878.UserId .. "`)", inline = true}, {name = "Reason", value = "Detected word: ||`" .. word .. "`||", inline = true}}, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")}
							pcall(HttpRequest_878, {Url = TabConfig.FeedbackWebhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode({embeds = {embed}})})
						else
							local unlockTime = timeNow + 86400
							muteData.UnlockTime = unlockTime
							saveMuteData()
							setMuteState(unlockTime)
							local embed = {title = "User Muted (2nd Offense)", color = 15158332, fields = {{name = "User", value = localPlayer_878.Name .. " (`" .. localPlayer_878.UserId .. "`)", inline = true}, {name = "Reason", value = "Detected word: ||`" .. word .. "`||", inline = true}, {name="Unlocks", value=os.date("%A, %B %d at %I:%M %p", unlockTime)}}, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")}
							pcall(HttpRequest_878, {Url = TabConfig.FeedbackWebhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode({embeds = {embed}})})
						end
						return
					end
				end
				if lowerMessage:match("@everyone") or lowerMessage:match("@here") or lowerMessage:match("<@&?%d+>") or lowerMessage:match("@%S+") then
					showWarningGui_878(translate_878("Pinging users or roles is not allowed. Please remove them and try again.", userLang_878))
					return
				end
				local trimmedMessage = message:match("^%s*(.-)%s*$"); if #trimmedMessage == 0 then return end
				lastSubmissionTime = timeNow; currentCooldown = TabConfig.Cooldown; feedbackBox.Text = ""
				task.spawn(function()
					local embed = { title = "New Feedback Received", description = trimmedMessage, color = 3447003, author = { name = localPlayer_878.DisplayName .. " (@" .. localPlayer_878.Name .. ")", icon_url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. localPlayer_878.UserId .. "&width=150&height=150&format=png" }, fields = { {name = "Game", value = MarketplaceService:GetProductInfo(game.PlaceId).Name, inline = true}, {name = "Players", value = #Players:GetPlayers(), inline = true}, {name = "Join Link", value = "`roblox://experiences/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. game.JobId .. "`"} }, footer = { text = "User ID: " .. localPlayer_878.UserId }, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ") }
					if HttpRequest_878 then local s, r = pcall(function() return HttpRequest_878({Url = TabConfig.FeedbackWebhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode({embeds = {embed}})}) end); if s then showOverlayMessage(true, translate_878("Success!", userLang_878), translate_878("Your feedback has been sent successfully.", userLang_878)) else showOverlayMessage(false, translate_878("Failed", userLang_878), translate_878("There was an error sending your feedback. Please try again later.", userLang_878)) end end
				end)
			end)
		end
		
		local deviceType, executor = "Unknown", "Roblox"
		local headerFrame = Instance.new("Frame", infoPage); headerFrame.Size = UDim2.new(1, 0, 0, 64); headerFrame.BackgroundTransparency = 1; headerFrame.LayoutOrder = 1
		local avatarImage = Instance.new("ImageLabel", headerFrame); avatarImage.Size = UDim2.new(0, 64, 0, 64); avatarImage.BackgroundTransparency = 1; avatarImage.Image = "rbxthumb://type=AvatarHeadShot&id=" .. localPlayer_878.UserId .. "&w=150&h=150"; local avatarCorner = Instance.new("UICorner", avatarImage); avatarCorner.CornerRadius = UDim.new(0, 32)
		local welcomeLabel = Instance.new("TextLabel", headerFrame); welcomeLabel.Size = UDim2.new(0.5, -74, 0, 24); welcomeLabel.Position = UDim2.new(0, 74, 0.5, -22); welcomeLabel.BackgroundTransparency = 1;
		welcomeLabel.Text = translate_878("Welcome, ", userLang_878) .. localPlayer_878.DisplayName;
		welcomeLabel.Font = Enum.Font.GothamBold; welcomeLabel.TextSize = 20; welcomeLabel.TextColor3 = Color3.fromRGB(255, 255, 255); welcomeLabel.TextXAlignment = Enum.TextXAlignment.Left
		local timeOfDayIcon = Instance.new("ImageLabel", headerFrame); timeOfDayIcon.Size = UDim2.new(0, 16, 0, 16); timeOfDayIcon.Position = UDim2.new(0, 74, 0.5, 9); timeOfDayIcon.BackgroundTransparency = 1
		local dateTimeLabel = Instance.new("TextLabel", headerFrame); dateTimeLabel.Size = UDim2.new(0.5, -94, 0, 18); dateTimeLabel.Position = UDim2.new(0, 94, 0.5, 8); dateTimeLabel.BackgroundTransparency = 1; dateTimeLabel.Font = Enum.Font.Gotham; dateTimeLabel.TextSize = 14; dateTimeLabel.TextColor3 = Color3.fromRGB(180, 180, 180); dateTimeLabel.TextXAlignment = Enum.TextXAlignment.Left
		local fpsLabel = Instance.new("TextLabel", headerFrame); fpsLabel.Size = UDim2.new(0.5, 0, 0, 18); fpsLabel.Position = UDim2.new(1, -5, 0.5, -20); fpsLabel.AnchorPoint = Vector2.new(1, 0); fpsLabel.BackgroundTransparency = 1; fpsLabel.Font = Enum.Font.Gotham; fpsLabel.TextSize = 14; fpsLabel.TextColor3 = Color3.fromRGB(180, 180, 180); fpsLabel.TextXAlignment = Enum.TextXAlignment.Right
		local pingLabel = Instance.new("TextLabel", headerFrame); pingLabel.Size = UDim2.new(0.5, 0, 0, 18); pingLabel.Position = UDim2.new(1, -5, 0.5, 8); pingLabel.AnchorPoint = Vector2.new(1, 0); pingLabel.BackgroundTransparency = 1; pingLabel.Font = Enum.Font.Gotham; pingLabel.TextSize = 14; pingLabel.TextColor3 = Color3.fromRGB(180, 180, 180); pingLabel.TextXAlignment = Enum.TextXAlignment.Right
		local cardGrid = Instance.new("Frame", infoPage); cardGrid.Size = UDim2.new(1, 0, 0, 300); cardGrid.BackgroundTransparency = 1; cardGrid.LayoutOrder = 2
		local gridLayout = Instance.new("UIGridLayout", cardGrid); gridLayout.CellSize = UDim2.new(0.333, -10, 0, 110); gridLayout.CellPadding = UDim2.new(0, 15, 0, 15); gridLayout.SortOrder = Enum.SortOrder.LayoutOrder
		
		local function createCard(titleText, iconId, order, color1, color2)
			local card = Instance.new("Frame", cardGrid); card.BackgroundColor3 = Color3.fromRGB(18, 18, 18); card.LayoutOrder = order; card.ClipsDescendants = true; local corner = Instance.new("UICorner", card); corner.CornerRadius = UDim.new(0, 8)
			local gradient = Instance.new("UIGradient", card); gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, color1), ColorSequenceKeypoint.new(1, color2)}); gradient.Rotation = 315
			local icon = Instance.new("ImageLabel", card); icon.Size = UDim2.new(0, 24, 0, 24); icon.Position = UDim2.new(1, -12, 0, 12); icon.AnchorPoint = Vector2.new(1, 0); icon.Image = iconId; icon.BackgroundTransparency = 1
			local title = Instance.new("TextLabel", card); title.Size = UDim2.new(1, -45, 0, 28); title.Position = UDim2.new(0, 12, 0, 10);
			setTextAsync_878(title, titleText)
			title.Font = Enum.Font.SourceSansBold; title.TextSize = 18; title.TextColor3 = Color3.new(1,1,1); title.TextXAlignment = Enum.TextXAlignment.Left; title.BackgroundTransparency = 1
			local content = Instance.new("TextLabel", card); content.Size = UDim2.new(1, -24, 1, -45); content.Position = UDim2.new(0, 12, 0, 40); content.Text = "Loading..."; content.Font = Enum.Font.SourceSans; content.TextSize = 14; content.TextColor3 = Color3.fromRGB(220, 220, 220); content.TextWrapped = true; content.TextXAlignment = Enum.TextXAlignment.Left; content.TextYAlignment = Enum.TextYAlignment.Top; content.RichText = true; content.BackgroundTransparency = 1
			return content, icon
		end

		local sessionContent, _ = createCard("Session", icons.Session, 1, Color3.fromRGB(255, 80, 120), Color3.fromRGB(15, 15, 15))
		local locationContent, _ = createCard("Location", icons.Location, 2, Color3.fromRGB(255, 160, 50), Color3.fromRGB(15, 15, 15))
		local weatherContent, weatherIcon = createCard("Weather", icons.Weather.Default, 3, Color3.fromRGB(80, 170, 255), Color3.fromRGB(15, 15, 15))
		local detailsContent, _ = createCard("Details", icons.Details, 4, Color3.fromRGB(80, 170, 255), Color3.fromRGB(15, 15, 15))
		local networkContent, _ = createCard("Network", icons.Network, 5, Color3.fromRGB(190, 80, 255), Color3.fromRGB(15, 15, 15))
		local privacyContent, _ = createCard("Privacy", icons.Privacy, 6, Color3.fromRGB(80, 255, 150), Color3.fromRGB(15, 15, 15))
		local regionContent, _ = createCard("Server Region", icons.Region, 7, Color3.fromRGB(200, 200, 210), Color3.fromRGB(15, 15, 15))
		local uptimeContent, _ = createCard("Uptime", icons.Uptime, 8, Color3.fromRGB(200, 200, 210), Color3.fromRGB(15, 15, 15))
		
		local creditLabel = Instance.new("TextLabel", infoPage); creditLabel.Size = UDim2.new(1,0,0,20);
		setTextAsync_878(creditLabel, "Made by Verbal Hub LOLZ")
		creditLabel.LayoutOrder = 9; creditLabel.Font = Enum.Font.Gotham; creditLabel.TextSize = 12; creditLabel.TextColor3 = Color3.fromRGB(100,100,100); creditLabel.BackgroundTransparency = 1; creditLabel.TextYAlignment = Enum.TextYAlignment.Bottom
		
		local function formatTime(seconds) local h=math.floor(seconds/3600); local m=math.floor((seconds%3600)/60); local s=math.floor(seconds%60); return string.format("%02i:%02i:%02i",h,m,s) end
		local function getDevice() if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then return UserInputService.GamepadEnabled and "Console" or "Mobile" elseif UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then return "PC" end return "Unknown" end
		local function getExecutor() if identifyexecutor then local s, n = pcall(identifyexecutor); return s and typeof(n) == "string" and n or "Custom" end return "Roblox" end
		
		local function getWeatherTextFromCode(code)
			local weatherConditions = {
				[0] = "Clear Sky", [1] = "Partly Cloudy", [2] = "Partly Cloudy", [3] = "Partly Cloudy",
				[45] = "Fog", [48] = "Fog", [51] = "Drizzle", [53] = "Drizzle", [55] = "Drizzle",
				[56] = "Drizzle", [57] = "Drizzle", [61] = "Rain", [63] = "Rain", [65] = "Rain", [66] = "Rain", [67] = "Rain",
				[71] = "Snow", [73] = "Snow", [75] = "Snow", [77] = "Snow", [80] = "Rain Showers", [81] = "Rain Showers",
				[82] = "Rain Showers", [85] = "Snow Showers", [86] = "Snow Showers", [95] = "Thunderstorm",
				[96] = "Thunderstorm", [99] = "Thunderstorm"
			}
			return translate_878(weatherConditions[code] or "N/A", userLang_878)
		end

		local function getWeatherIconFromCode(code, isDay)
			if code == 0 then return isDay and icons.Weather.Sunny or icons.Weather.Night
			elseif code <= 3 then return icons.Weather.Cloudy elseif code >= 45 and code <= 48 then return icons.Weather.Fog
			elseif (code >= 51 and code <= 67) or (code >= 80 and code <= 82) then return icons.Weather.Rain
			elseif code >= 71 and code <= 77 or (code >= 85 and code <= 86) then return icons.Weather.Snow
			elseif code >= 95 and code <= 99 then return icons.Weather.Thunder else return icons.Weather.Default end
		end

		local function fetchAndDisplayAllData()
			task.spawn(function()
				local locSuccess, locData = pcall(function() return HttpService:JSONDecode(game:HttpGet("https://ipinfo.io/json",true)) end)
				if locSuccess and locData then
					local cityStr, regionStr, countryStr, ispStr, timezoneStr = translate_878("City", userLang_878), translate_878("Region", userLang_878), translate_878("Country", userLang_878), translate_878("ISP", userLang_878), translate_878("Timezone", userLang_878)
					locationContent.Text = string.format("%s: %s\n%s: %s", cityStr, locData.city or "N/A", regionStr, locData.region or "N/A")
					regionContent.Text = string.format("%s: %s\n%s: %s", regionStr, locData.region or "N/A", countryStr, locData.country or "N/A")
					networkContent.Text = string.format("%s: %s\n%s: %s", ispStr, locData.org or "N/A", timezoneStr, locData.timezone or "N/A")
					if locData.loc then local parts = locData.loc:split(","); lat_878, lon_878 = tonumber(parts[1]) or 0, tonumber(parts[2]) or 0 end
				end

				if lat_878 ~= 0 and lon_878 ~= 0 then
					local weatherUrl = "https://api.open-meteo.com/v1/forecast?latitude="..lat_878.."&longitude="..lon_878.."&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,cloud_cover,surface_pressure,wind_speed_10m,wind_direction_10m&hourly=temperature_2m,apparent_temperature,precipitation_probability,weather_code,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum&timezone=auto"
					local weatherSuccess, weatherData = pcall(function() return HttpService:JSONDecode(game:HttpGet(weatherUrl, true)) end)
					
					if weatherSuccess and weatherData and weatherData.current then
						local current = weatherData.current
						currentConditionCode_878 = current.weather_code
						local conditionStr, tempStr, feelsLikeStr, windStr, humidityStr, pressureStr = translate_878("Condition", userLang_878), translate_878("Temp", userLang_878), translate_878("Feels Like", userLang_878), translate_878("Wind", userLang_878), translate_878("Humidity", userLang_878), translate_878("Pressure", userLang_878)
						local conditionText = getWeatherTextFromCode(currentConditionCode_878)
						local tempC = math.floor(current.temperature_2m + 0.5); local tempF = math.floor(tempC * 9/5 + 32 + 0.5)
						local feelsC = math.floor(current.apparent_temperature + 0.5); local feelsF = math.floor(feelsC * 9/5 + 32 + 0.5)
						weatherContent.Text = string.format("%s: %s\n%s: %d°C / %d°F\n%s: %d°C / %d°F", conditionStr, conditionText, tempStr, tempC, tempF, feelsLikeStr, feelsC, feelsF)
						detailsContent.Text=string.format("%s: %.1f km/h\n%s: %d%%\n%s: %.0f hPa", windStr, current.wind_speed_10m, humidityStr, current.relative_humidity_2m, pressureStr, current.surface_pressure)
						
						for _,child in ipairs(forecastPage:GetChildren()) do if child:IsA("Frame") or child:IsA("TextButton") then child:Destroy() end end
						
						for i=1, #weatherData.daily.time do
							local dayFrame = Instance.new("Frame", forecastPage); dayFrame.LayoutOrder = i; dayFrame.Size = UDim2.new(1,0,0,65); dayFrame.BackgroundColor3=Color3.fromRGB(30,32,38); local dayCorner=Instance.new("UICorner",dayFrame); dayCorner.CornerRadius=UDim.new(0,8)
							local dayIcon = Instance.new("ImageLabel", dayFrame); dayIcon.Size=UDim2.new(0,40,0,40); dayIcon.Position=UDim2.new(1,-30,0.5,0); dayIcon.AnchorPoint=Vector2.new(0.5,0.5); dayIcon.BackgroundTransparency=1; dayIcon.Image = getWeatherIconFromCode(weatherData.daily.weather_code[i], true)
							local dayName = Instance.new("TextLabel", dayFrame); dayName.Size=UDim2.new(0.4,0,0,25); dayName.Position=UDim2.new(0,15,0,5); dayName.Font=Enum.Font.GothamBold; dayName.TextSize=16; dayName.TextColor3=Color3.new(1,1,1); dayName.BackgroundTransparency=1; dayName.TextXAlignment=Enum.TextXAlignment.Left
							if i == 1 then setTextAsync_878(dayName, "Today")
							elseif i == 2 then setTextAsync_878(dayName, "Tomorrow")
							else dayName.Text = os.date("%A", os.time{year=tonumber(weatherData.daily.time[i]:sub(1,4)), month=tonumber(weatherData.daily.time[i]:sub(6,7)), day=tonumber(weatherData.daily.time[i]:sub(9,10))}) end
							local dayTemp = Instance.new("TextLabel", dayFrame); dayTemp.Size=UDim2.new(0.5,0,0,20); dayTemp.Position=UDim2.new(0,15,1,-25); dayTemp.Text=string.format("H: %.0f°C L: %.0f°C", weatherData.daily.temperature_2m_max[i], weatherData.daily.temperature_2m_min[i]); dayTemp.Font=Enum.Font.Gotham; dayTemp.TextSize=14; dayTemp.TextColor3=Color3.fromRGB(200,200,200); dayTemp.BackgroundTransparency=1; dayTemp.TextXAlignment=Enum.TextXAlignment.Left
						end

						local hourlyToggler = Instance.new("TextButton", forecastPage); hourlyToggler.LayoutOrder = 8; hourlyToggler.Size=UDim2.new(1,0,0,40); hourlyToggler.BackgroundColor3=Color3.fromRGB(18,18,18); hourlyToggler.Text=""; local togglerCorner=Instance.new("UICorner",hourlyToggler); togglerCorner.CornerRadius=UDim.new(0,8)
						local hourlyIcon = Instance.new("ImageLabel", hourlyToggler); hourlyIcon.Size=UDim2.new(0,24,0,24); hourlyIcon.Position=UDim2.new(0,15,0.5,0); hourlyIcon.AnchorPoint=Vector2.new(0,0.5); hourlyIcon.Image=icons.HourlySubTab; hourlyIcon.BackgroundTransparency=1
						local hourlyTitle = Instance.new("TextLabel", hourlyToggler); hourlyTitle.Size=UDim2.new(0.5,0,1,0); hourlyTitle.Position=UDim2.new(0,50,0,0); setTextAsync_878(hourlyTitle, "Hourly Forecast"); hourlyTitle.Font=Enum.Font.GothamBold; hourlyTitle.TextColor3=Color3.new(1,1,1); hourlyTitle.TextSize=16; hourlyTitle.BackgroundTransparency=1; hourlyTitle.TextXAlignment=Enum.TextXAlignment.Left
						local arrowIcon = Instance.new("ImageLabel", hourlyToggler); arrowIcon.Size=UDim2.new(0,24,0,24); arrowIcon.Position=UDim2.new(1,-20,0.5,0); arrowIcon.AnchorPoint=Vector2.new(0.5,0.5); arrowIcon.Image=icons.ArrowClosed; arrowIcon.BackgroundTransparency=1

						local hourlyContainer = Instance.new("Frame", forecastPage); hourlyContainer.LayoutOrder = 9; hourlyContainer.Size = UDim2.new(1,0,0,0); hourlyContainer.BackgroundTransparency=1; hourlyContainer.ClipsDescendants=true
						local hourlyContainerLayout = Instance.new("UIListLayout", hourlyContainer); hourlyContainerLayout.Padding = UDim.new(0,5)
						local hourlyContainerPadding = Instance.new("UIPadding", hourlyContainer); hourlyContainerPadding.PaddingTop = UDim.new(0,10)

						for i=1, #weatherData.hourly.time do
							local hourFrame = Instance.new("Frame", hourlyContainer); hourFrame.Size = UDim2.new(1,0,0,70); hourFrame.BackgroundColor3=Color3.fromRGB(30,32,38); local hCorner=Instance.new("UICorner",hourFrame); hCorner.CornerRadius=UDim.new(0,8)
							local hourTime = Instance.new("TextLabel", hourFrame); hourTime.Size=UDim2.new(0.25,0,1,0); hourTime.Position=UDim2.new(0,15,0,0); hourTime.Text=os.date("%I %p", os.time{year=tonumber(weatherData.hourly.time[i]:sub(1,4)), month=tonumber(weatherData.hourly.time[i]:sub(6,7)), day=tonumber(weatherData.hourly.time[i]:sub(9,10)), hour=tonumber(weatherData.hourly.time[i]:sub(12,13))}); hourTime.Font=Enum.Font.GothamBold; hourTime.TextSize=16; hourTime.TextColor3=Color3.new(1,1,1); hourTime.BackgroundTransparency=1; hourTime.TextXAlignment=Enum.TextXAlignment.Left
							local hourIcon = Instance.new("ImageLabel", hourFrame); hourIcon.Size=UDim2.new(0,36,0,36); hourIcon.Position=UDim2.new(0.3,0,0.5,0); hourIcon.AnchorPoint=Vector2.new(0.5,0.5); hourIcon.BackgroundTransparency=1; hourIcon.Image = getWeatherIconFromCode(weatherData.hourly.weather_code[i], true)
							local hourDetails = Instance.new("TextLabel", hourFrame); hourDetails.Size=UDim2.new(0.5,0,1,0); hourDetails.Position=UDim2.new(1, -15, 0,0); hourDetails.AnchorPoint=Vector2.new(1,0); hourDetails.Text=string.format("%.0f°C (feels %.0f°C)\n%d%% Rain | %.1f km/h Wind", weatherData.hourly.temperature_2m[i], weatherData.hourly.apparent_temperature[i], weatherData.hourly.precipitation_probability[i], weatherData.hourly.wind_speed_10m[i]); hourDetails.Font=Enum.Font.Gotham; hourDetails.TextSize=12; hourDetails.TextColor3=Color3.fromRGB(200,200,200); hourDetails.BackgroundTransparency=1; hourDetails.TextXAlignment=Enum.TextXAlignment.Right; hourDetails.TextYAlignment=Enum.TextYAlignment.Center; hourDetails.RichText = true
						end

						local isHourlyOpen = false
						local hourlySectionHeight = 0
						local isHeightCalculated = false
						hourlyToggler.Activated:Connect(function()
							if not isHeightCalculated then
								hourlySectionHeight = hourlyContainerLayout.AbsoluteContentSize.Y + hourlyContainerPadding.PaddingTop.Offset
								isHeightCalculated = true
							end
							isHourlyOpen = not isHourlyOpen
							local targetSize = isHourlyOpen and UDim2.new(1, 0, 0, hourlySectionHeight) or UDim2.new(1, 0, 0, 0)
							arrowIcon.Image = isHourlyOpen and icons.ArrowOpened or icons.ArrowClosed
							TweenService:Create(hourlyContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
						end)
					end
				end
			end)
		end

		RunService.Heartbeat:Connect(function(dt) if infoPage.Visible then local ct=os.date("*t"); dateTimeLabel.Text=os.date("%I:%M:%S %p",os.time()); if ct.hour>=6 and ct.hour<19 then timeOfDayIcon.Image=icons.Time.Day else timeOfDayIcon.Image=icons.Time.Night end; fpsLabel.Text=string.format("%d FPS",math.floor(1/dt)); pingLabel.Text=string.format("%dms PING",math.floor(localPlayer_878:GetNetworkPing()*1000)); weatherIcon.Image = getWeatherIconFromCode(currentConditionCode_878, ct.hour>=6 and ct.hour<19); deviceType,executor=getDevice(),getExecutor(); task.spawn(function() local playersStr, deviceStr, executorStr = translate_878("Players", userLang_878), translate_878("Device", userLang_878), translate_878("Executor", userLang_878); if sessionContent and sessionContent.Parent then sessionContent.Text = string.format("%s: %d\n%s: %s\n%s: %s", playersStr, #Players:GetPlayers(), deviceStr, deviceType, executorStr, executor) end end); uptimeContent.Text = formatTime(os.time() - joinTime_878); setTextAsync_878(privacyContent, "Your info is sourced from public APIs and is not logged or stored, ensuring your privacy."); cardGrid.Size=UDim2.new(1,0,0,gridLayout.AbsoluteContentSize.Y) end end)
		fetchAndDisplayAllData(); task.spawn(function() while Container.Parent do task.wait(300); fetchAndDisplayAllData() end end)
		
		local playerSubTabContainer = Instance.new("Frame", playersPage); playerSubTabContainer.Size = UDim2.new(1,0,0,35); playerSubTabContainer.BackgroundTransparency = 1
		local playerSubTabLayout = Instance.new("UIListLayout", playerSubTabContainer); playerSubTabLayout.FillDirection = Enum.FillDirection.Horizontal; playerSubTabLayout.Padding = UDim.new(0, 15)
		local playerYouButton, playerYouImage, playerYouLabel = createSubTabButton("You", icons.PlayerTab, playerSubTabContainer)
		local playerServerButton, playerServerImage, playerServerLabel = createSubTabButton("Server", icons.FriendsTab, playerSubTabContainer)
		
		local playerIndicator = Instance.new("Frame", playerYouLabel); playerIndicator.Size = UDim2.new(1,0,0,2); playerIndicator.Position = UDim2.new(0,0,1,2); playerIndicator.AnchorPoint = Vector2.new(0,1); playerIndicator.BackgroundColor3 = Color3.new(1,1,1); playerIndicator.BorderSizePixel = 0
		local piCorner = Instance.new("UICorner", playerIndicator); piCorner.CornerRadius = UDim.new(1,0)

		local playerPages = Instance.new("Frame", playersPage); playerPages.Size = UDim2.new(1,0,1,-35); playerPages.Position = UDim2.new(0,0,0,35); playerPages.BackgroundTransparency = 1
		local myPlayerPage = Instance.new("ScrollingFrame", playerPages); myPlayerPage.Size = UDim2.new(1,0,1,0); myPlayerPage.BackgroundTransparency=1; myPlayerPage.BorderSizePixel=0; myPlayerPage.AutomaticCanvasSize = Enum.AutomaticSize.Y
		local myPlayerPageListLayout = Instance.new("UIListLayout", myPlayerPage); myPlayerPageListLayout.Padding = UDim.new(0,10); myPlayerPageListLayout.SortOrder = Enum.SortOrder.LayoutOrder; local myPad = Instance.new("UIPadding", myPlayerPage); myPad.PaddingTop = UDim.new(0,15); myPad.PaddingLeft = UDim.new(0,15); myPad.PaddingRight = UDim.new(0,15)
		
		local serverPlayersPage = Instance.new("ScrollingFrame", playerPages); serverPlayersPage.Size = UDim2.new(1,0,1,0); serverPlayersPage.BackgroundTransparency=1; serverPlayersPage.BorderSizePixel=0; serverPlayersPage.Visible=false; serverPlayersPage.AutomaticCanvasSize = Enum.AutomaticSize.Y
		local serverListLayout = Instance.new("UIListLayout", serverPlayersPage); serverListLayout.Padding = UDim.new(0,10); serverListLayout.SortOrder = Enum.SortOrder.LayoutOrder; local serverPad = Instance.new("UIPadding", serverPlayersPage); serverPad.PaddingTop=UDim.new(0,15); serverPad.PaddingLeft=UDim.new(0,15); serverPad.PaddingRight=UDim.new(0,15)

		local activePlayerElements = {Btn=playerYouButton, Img=playerYouImage, Lbl=playerYouLabel}
		local playerTabMap = {[playerYouButton] = myPlayerPage, [playerServerButton] = serverPlayersPage}

		local function switchPlayerTabs(targetElements)
			for _, page in pairs(playerTabMap) do page.Visible = false end
			activePlayerElements.Img.ImageTransparency = 0.5; activePlayerElements.Lbl.TextColor3 = Color3.fromRGB(180, 180, 180)
			local pageToShow = playerTabMap[targetElements.Btn]
			if pageToShow then pageToShow.Visible = true end
			targetElements.Img.ImageTransparency = 0; targetElements.Lbl.TextColor3 = Color3.new(1,1,1)
			playerIndicator.Parent = targetElements.Lbl; activePlayerElements = targetElements
		end
		playerYouButton.Activated:Connect(function() switchPlayerTabs({Btn=playerYouButton, Img=playerYouImage, Lbl=playerYouLabel}) end)
		playerServerButton.Activated:Connect(function() switchPlayerTabs({Btn=playerServerButton, Img=playerServerImage, Lbl=playerServerLabel}) end)

		local function createPulse(dot)
			local pulse = Instance.new("Frame", dot)
			pulse.Size = UDim2.fromScale(1,1); pulse.AnchorPoint = Vector2.new(0.5,0.5); pulse.Position = UDim2.fromScale(0.5,0.5)
			pulse.BackgroundColor3 = dot.BackgroundColor3; pulse.BackgroundTransparency = 0.5
			local c = Instance.new("UICorner", pulse); c.CornerRadius = UDim.new(1,0)
			task.spawn(function()
				while pulse and pulse.Parent do
					local tween1 = TweenService:Create(pulse, TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size=UDim2.fromScale(2.5,2.5), BackgroundTransparency=1})
					local tween2 = TweenService:Create(pulse, TweenInfo.new(0), {Size=UDim2.fromScale(0,0), BackgroundTransparency=0.5})
					tween1:Play(); tween1.Completed:Wait(); tween2:Play(); task.wait(0.5)
				end
			end)
		end
		
		local activePlayerCard_878 = nil
		local isSpectating_878 = false
		local function createPlayerCard(playerObj, parentFrame)
			local holder = Instance.new("TextButton", parentFrame); holder.Name = playerObj.Name; holder.Size = UDim2.new(1,0,0,70); holder.BackgroundColor3 = Color3.fromRGB(30,32,38); holder.Text = ""; holder.AutoButtonColor = false
			local hC = Instance.new("UICorner",holder); hC.CornerRadius = UDim.new(0,8)
			
			local t, iR = pcall(Players.GetUserThumbnailAsync, Players, playerObj.UserId, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size48x48)
			local img = Instance.new("ImageLabel",holder); img.Size=UDim2.new(0,48,0,48); img.Position=UDim2.new(0,12,0.5,0); img.AnchorPoint=Vector2.new(0,0.5); img.Image = (t and iR) or ""; img.BackgroundTransparency=1; local iC = Instance.new("UICorner",img); iC.CornerRadius = UDim.new(1,0)
			local nameFrame = Instance.new("Frame", holder); nameFrame.BackgroundTransparency=1; nameFrame.Size=UDim2.new(1,-150,0, 40); nameFrame.Position=UDim2.new(0,70,0.5,0); nameFrame.AnchorPoint=Vector2.new(0,0.5)
			local nfLayout = Instance.new("UIListLayout", nameFrame); nfLayout.FillDirection=Enum.FillDirection.Vertical; nfLayout.VerticalAlignment=Enum.VerticalAlignment.Center; nfLayout.Padding = UDim.new(0,2)
			local displayName = Instance.new("TextLabel",nameFrame); displayName.Text=playerObj.DisplayName; displayName.Font=Enum.Font.SourceSansBold; displayName.TextSize=18; displayName.TextColor3=Color3.new(1,1,1); displayName.TextXAlignment=Enum.TextXAlignment.Left; displayName.BackgroundTransparency=1; displayName.Size=UDim2.new(1,0,0.5,-2)
			local userName = Instance.new("TextLabel",nameFrame); userName.Text="@"..playerObj.Name; userName.Font=Enum.Font.SourceSans; userName.TextSize=13; userName.TextColor3=Color3.fromRGB(180,180,180); userName.TextXAlignment=Enum.TextXAlignment.Left; userName.BackgroundTransparency=1; userName.Size=UDim2.new(1,0,0.5,-2)
			local statusDot = Instance.new("Frame", holder); statusDot.Size = UDim2.new(0,10,0,10); statusDot.Position = UDim2.new(1,-50,0.5,0); statusDot.AnchorPoint = Vector2.new(1,0.5); statusDot.BackgroundColor3=Color3.fromRGB(70,255,70); local dC = Instance.new("UICorner", statusDot); dC.CornerRadius = UDim.new(1,0)
			createPulse(statusDot)
			
			local viewButton = Instance.new("ImageButton", holder); viewButton.Name = "ViewButton"; viewButton.Size = UDim2.new(0, 24, 0, 24); viewButton.Position = UDim2.new(1, -20, 0.5, 0); viewButton.AnchorPoint = Vector2.new(0.5, 0.5); viewButton.Image = icons.ViewPlayer
			viewButton.BackgroundTransparency = 1; viewButton.Visible = false; viewButton.ImageColor3 = Color3.new(1,1,1); viewButton.ImageTransparency = 0.3

			holder.Activated:Connect(function()
				if activePlayerCard_878 and activePlayerCard_878 ~= holder then
					activePlayerCard_878.ViewButton.Visible = false
				end
				if activePlayerCard_878 == holder then
					activePlayerCard_878 = nil
					viewButton.Visible = false
				else
					activePlayerCard_878 = holder
					viewButton.Visible = true
				end
			end)

			viewButton.Activated:Connect(function()
				local targetPlayer = Players:FindFirstChild(holder.Name)
				local camera = workspace.CurrentCamera
				if not targetPlayer or not targetPlayer.Character or not camera then return end

				if isSpectating_878 and camera.CameraSubject == targetPlayer.Character:FindFirstChildOfClass("Humanoid") then
					camera.CameraSubject = localPlayer_878.Character and localPlayer_878.Character:FindFirstChildOfClass("Humanoid") or nil
					viewButton.ImageColor3 = Color3.new(1,1,1)
					isSpectating_878 = false
				else
					camera.CameraSubject = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
					viewButton.ImageColor3 = Color3.fromRGB(180, 40, 90)
					isSpectating_878 = true
				end
			end)

			return holder
		end
		
		createPlayerCard(localPlayer_878, myPlayerPage).LayoutOrder = 1
		
		local charSettingsToggler = Instance.new("TextButton", myPlayerPage); charSettingsToggler.LayoutOrder = 2; charSettingsToggler.Size=UDim2.new(1,0,0,40); charSettingsToggler.BackgroundColor3=Color3.fromRGB(18,18,18); charSettingsToggler.Text=""; local charTogglerCorner=Instance.new("UICorner",charSettingsToggler); charTogglerCorner.CornerRadius=UDim.new(0,8)
		local charIcon = Instance.new("ImageLabel", charSettingsToggler); charIcon.Size=UDim2.new(0,24,0,24); charIcon.Position=UDim2.new(0,15,0.5,0); charIcon.AnchorPoint=Vector2.new(0,0.5); charIcon.Image=icons.CharacterSettings; charIcon.BackgroundTransparency=1
		local charTitle = Instance.new("TextLabel", charSettingsToggler); charTitle.Size=UDim2.new(0.5,0,1,0); charTitle.Position=UDim2.new(0,50,0,0); setTextAsync_878(charTitle, "Character"); charTitle.Font=Enum.Font.GothamBold; charTitle.TextColor3=Color3.new(1,1,1); charTitle.TextSize=16; charTitle.BackgroundTransparency=1; charTitle.TextXAlignment=Enum.TextXAlignment.Left
		local charArrow = Instance.new("ImageLabel", charSettingsToggler); charArrow.Size=UDim2.new(0,24,0,24); charArrow.Position=UDim2.new(1,-20,0.5,0); charArrow.AnchorPoint=Vector2.new(0.5,0.5); charArrow.Image=icons.ArrowClosed; charArrow.BackgroundTransparency=1

		local charSettingsContainer = Instance.new("Frame", myPlayerPage); charSettingsContainer.LayoutOrder = 3; charSettingsContainer.Size = UDim2.new(1,0,0,0); charSettingsContainer.BackgroundTransparency=1; charSettingsContainer.ClipsDescendants=true
		local charListLayout = Instance.new("UIListLayout", charSettingsContainer); charListLayout.Padding = UDim.new(0,10)
		local charPadding = Instance.new("UIPadding", charSettingsContainer); charPadding.PaddingTop = UDim.new(0,10)
		
		local propsLabel = Instance.new("TextLabel", charSettingsContainer)
		propsLabel.Size = UDim2.new(1, 0, 0, 20)
		setTextAsync_878(propsLabel, "PLAYER PROPERTIES")
		propsLabel.Font = Enum.Font.Gotham
		propsLabel.TextSize = 12
		propsLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
		propsLabel.TextXAlignment = Enum.TextXAlignment.Left
		propsLabel.BackgroundTransparency = 1
		
		local function createSlider(parent, config)
			config = config or {}
			config.Min = config.Min or 0; config.Max = config.Max or 100; config.Default = config.Default or config.Min
			config.Color = config.Color or Color3.new(1, 1, 1); config.Callback = config.Callback or function() end
	
			local sliderBar = Instance.new("TextButton", parent); sliderBar.Size = UDim2.new(1, 0, 0, 40); sliderBar.BackgroundColor3 = config.Color
			sliderBar.BackgroundTransparency = 0.7; sliderBar.AutoButtonColor = false; sliderBar.Text = ""
			local barCorner = Instance.new("UICorner", sliderBar); barCorner.CornerRadius = UDim.new(0, 12)
			local barStroke = Instance.new("UIStroke", sliderBar); barStroke.Color = Color3.new(1, 1, 1); barStroke.Transparency = 0.6; barStroke.Thickness = 1.5
	
			local fillBar = Instance.new("Frame", sliderBar); fillBar.BackgroundColor3 = config.Color
			fillBar.BackgroundTransparency = 0.3; fillBar.BorderSizePixel = 0; fillBar.ClipsDescendants = true
			local fillCorner = Instance.new("UICorner", fillBar); fillCorner.CornerRadius = UDim.new(0, 12)
	
			local valueText = Instance.new("TextLabel", sliderBar); valueText.Size = UDim2.new(1, -40, 1, 0)
			valueText.Position = UDim2.new(0, 20, 0, 0); valueText.Font = Enum.Font.GothamBold; valueText.TextSize = 16
			valueText.TextColor3 = Color3.new(1, 1, 1); valueText.TextXAlignment = Enum.TextXAlignment.Left; valueText.BackgroundTransparency = 1
			local textStroke = Instance.new("UIStroke", valueText); textStroke.Color = Color3.new(0, 0, 0); textStroke.Transparency = 0.4; textStroke.Thickness = 1.5
	
			local isDragging = false; local currentValue = config.Default
	
			local function updateVisuals(value)
				currentValue = math.clamp(value, config.Min, config.Max)
				local percentage = (currentValue - config.Min) / (config.Max - config.Min)
				if config.Max == config.Min then percentage = 0 end
				fillBar.Size = UDim2.new(percentage, 0, 1, 0)
				local displayValue = string.format(config.Format or "%.0f", currentValue)
				task.spawn(function() valueText.Text = displayValue .. " " .. translate_878(config.Unit or "", userLang_878) end)
			end
	
			local function setValue(value) updateVisuals(value); pcall(config.Callback, currentValue) end
	
			local function handleInput(inputPos)
				local relativeX = inputPos.X - sliderBar.AbsolutePosition.X
				local percentage = math.clamp(relativeX / sliderBar.AbsoluteSize.X, 0, 1)
				local newValue = config.Min + (config.Max - config.Min) * percentage
				setValue(newValue)
			end
	
			sliderBar.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then isDragging = true; local pos = input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:GetMouseLocation() or input.Position; handleInput(pos) end end)
			sliderBar.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then isDragging = false end end)
			UserInputService.InputChanged:Connect(function(input) if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then local pos = input.UserInputType == Enum.UserInputType.MouseMovement and UserInputService:GetMouseLocation() or input.Position; handleInput(pos) end end)
			setValue(config.Default)
			return sliderBar, setValue
		end

		local _, setSpeed = createSlider(charSettingsContainer, {Unit="player speed", Color=Color3.fromRGB(24, 178, 108), Min=16, Max=200, Default=16, Format="%.0f", Callback=function(v) local h=localPlayer_878.Character and localPlayer_878.Character:FindFirstChildOfClass("Humanoid") if h then h.WalkSpeed=v end end})
		local _, setJump = createSlider(charSettingsContainer, {Unit="jump power", Color=Color3.fromRGB(59, 130, 246), Min=50, Max=300, Default=50, Format="%.0f", Callback=function(v) local h=localPlayer_878.Character and localPlayer_878.Character:FindFirstChildOfClass("Humanoid") if h then h.JumpPower=v end end})
		local _, setFlight = createSlider(charSettingsContainer, {Unit="flight speed", Color=Color3.fromRGB(239, 68, 68), Min=0, Max=250, Default=0, Format="%.0f", Callback=function(v) print("Flight speed set to:", v) end})
		local _, setFov = createSlider(charSettingsContainer, {Unit="field of view", Color=Color3.fromRGB(234, 179, 8), Min=30, Max=120, Default=70, Format="%.0f", Callback=function(v) local cam=workspace.CurrentCamera if cam then cam.FieldOfView=v end end})
		
		local resetButton = Instance.new("ImageButton", propsLabel)
		resetButton.Size = UDim2.new(0, 16, 0, 16); resetButton.AnchorPoint = Vector2.new(1, 0.5); resetButton.Position = UDim2.new(1, 0, 0.5, 0)
		resetButton.Image = "rbxassetid://6723921202"; resetButton.BackgroundTransparency = 1
		
		local originalColor = Color3.fromRGB(180, 180, 180); local hoverColor = Color3.new(1, 1, 1); resetButton.ImageColor3 = originalColor
		local hoverTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad); local spinTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); local isSpinning = false
		
		resetButton.MouseEnter:Connect(function() TweenService:Create(resetButton, hoverTweenInfo, {ImageColor3 = hoverColor}):Play() end)
		resetButton.MouseLeave:Connect(function() if not isSpinning then TweenService:Create(resetButton, hoverTweenInfo, {ImageColor3 = originalColor}):Play() end end)

		resetButton.Activated:Connect(function()
			if isSpinning then return end; isSpinning = true
			setSpeed(16); setJump(50); setFlight(0); setFov(70)
			local spinTween = TweenService:Create(resetButton, spinTweenInfo, {Rotation = resetButton.Rotation + 360}); spinTween:Play()
			spinTween.Completed:Connect(function() isSpinning = false; if not resetButton.MouseEnter then TweenService:Create(resetButton, hoverTweenInfo, {ImageColor3 = originalColor}):Play() end end)
		end)
		
		local isCharSettingsOpen = false
		charSettingsToggler.Activated:Connect(function()
			isCharSettingsOpen = not isCharSettingsOpen
			local height = charListLayout.AbsoluteContentSize.Y + charPadding.PaddingTop.Offset
			local targetSize = isCharSettingsOpen and UDim2.new(1,0,0,height) or UDim2.new(1,0,0,0)
			charArrow.Image = isCharSettingsOpen and icons.ArrowOpened or icons.ArrowClosed
			TweenService:Create(charSettingsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
		end)

		playerActionsToggler_878 = Instance.new("TextButton", myPlayerPage); playerActionsToggler_878.LayoutOrder = 4
		playerActionsToggler_878.Size = UDim2.new(1, 0, 0, 40); playerActionsToggler_878.BackgroundColor3 = Color3.fromRGB(18, 18, 18); playerActionsToggler_878.Text = ""
		local paTogglerCorner = Instance.new("UICorner", playerActionsToggler_878); paTogglerCorner.CornerRadius = UDim.new(0, 8)

		local paIcon = Instance.new("ImageLabel", playerActionsToggler_878); paIcon.Size = UDim2.new(0, 24, 0, 24)
		paIcon.Position = UDim2.new(0, 15, 0.5, 0); paIcon.AnchorPoint = Vector2.new(0, 0.5); paIcon.Image = icons.PlayerActions; paIcon.BackgroundTransparency = 1

		local paTitle = Instance.new("TextLabel", playerActionsToggler_878); paTitle.Size = UDim2.new(0.5, 0, 1, 0)
		paTitle.Position = UDim2.new(0, 50, 0, 0); setTextAsync_878(paTitle, "Player Actions")
		paTitle.Font = Enum.Font.GothamBold
		paTitle.TextColor3 = Color3.new(1, 1, 1); paTitle.TextSize = 16; paTitle.BackgroundTransparency = 1; paTitle.TextXAlignment = Enum.TextXAlignment.Left

		local paArrow = Instance.new("ImageLabel", playerActionsToggler_878); paArrow.Size = UDim2.new(0, 24, 0, 24)
		paArrow.Position = UDim2.new(1, -20, 0.5, 0); paArrow.AnchorPoint = Vector2.new(0.5, 0.5); paArrow.Image = icons.ArrowClosed; paArrow.BackgroundTransparency = 1

		playerActionsContainer_878 = Instance.new("Frame", myPlayerPage); playerActionsContainer_878.LayoutOrder = 5
		playerActionsContainer_878.Size = UDim2.new(1, 0, 0, 0); playerActionsContainer_878.BackgroundTransparency = 1; playerActionsContainer_878.ClipsDescendants = true
		local paListLayout = Instance.new("UIListLayout", playerActionsContainer_878); paListLayout.Padding = UDim.new(0, 10)
		local paPadding = Instance.new("UIPadding", playerActionsContainer_878); paPadding.PaddingTop = UDim.new(0, 10)
		
		local tooltipFrame = Instance.new("Frame", playerActionsContainer_878); tooltipFrame.Name = "ActionTooltip"; tooltipFrame.LayoutOrder = 0
		tooltipFrame.Size = UDim2.new(1, 0, 0, 24); tooltipFrame.BackgroundColor3 = Color3.fromRGB(30, 32, 38)
		tooltipFrame.BorderSizePixel = 0; tooltipFrame.BackgroundTransparency = 1; tooltipFrame.ClipsDescendants = true
		local tfCorner = Instance.new("UICorner", tooltipFrame); tfCorner.CornerRadius = UDim.new(0, 6)

		local tooltipLabel = Instance.new("TextLabel", tooltipFrame); tooltipLabel.Size = UDim2.new(1, 0, 1, 0); tooltipLabel.Font = Enum.Font.GothamSemibold
		tooltipLabel.TextSize = 14; tooltipLabel.TextColor3 = Color3.new(1, 1, 1); tooltipLabel.BackgroundTransparency = 1
		tooltipLabel.TextTransparency = 1; tooltipLabel.Text = ""; tooltipLabel.TextXAlignment = Enum.TextXAlignment.Center
		
		local activeTooltipTween = nil; local tooltipTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)

		local actionsLabel = Instance.new("TextLabel", playerActionsContainer_878); actionsLabel.LayoutOrder = 1
		actionsLabel.Size = UDim2.new(1, 0, 0, 20); setTextAsync_878(actionsLabel, "PLAYER ACTIONS")
		actionsLabel.Font = Enum.Font.Gotham
		actionsLabel.TextSize = 12; actionsLabel.TextColor3 = Color3.fromRGB(180, 180, 180); actionsLabel.TextXAlignment = Enum.TextXAlignment.Left; actionsLabel.BackgroundTransparency = 1

		local buttonGrid = Instance.new("Frame", playerActionsContainer_878); buttonGrid.LayoutOrder = 2
		buttonGrid.Size = UDim2.new(1, 0, 0, 160); buttonGrid.BackgroundTransparency = 1
		local gridLayout = Instance.new("UIGridLayout", buttonGrid); gridLayout.CellSize = UDim2.new(0, 45, 0, 45)
		gridLayout.CellPadding = UDim2.new(0, 8, 0, 8); gridLayout.FillDirection = Enum.FillDirection.Horizontal; gridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		gridLayout.SortOrder = Enum.SortOrder.LayoutOrder; gridLayout.StartCorner = Enum.StartCorner.TopLeft
		
		local function createActionButton(config)
			local btn = Instance.new("ImageButton", buttonGrid); btn.Size = UDim2.new(0, 50, 0, 50); btn.BackgroundColor3 = config.Color; btn.BackgroundTransparency = 0.5
			local corner = Instance.new("UICorner", btn); corner.CornerRadius = UDim.new(0, 12)
			local stroke = Instance.new("UIStroke", btn); stroke.Color = config.Color:Lerp(Color3.new(1,1,1), 0.5); stroke.Thickness = 1.5; stroke.Transparency = 0.5

			local icon = Instance.new("ImageLabel", btn); icon.Size = UDim2.fromScale(0.6, 0.6); icon.Position = UDim2.fromScale(0.5, 0.5); icon.AnchorPoint = Vector2.new(0.5, 0.5)
			icon.BackgroundTransparency = 1; icon.Image = config.OffImage; icon.ImageColor3 = Color3.fromRGB(200,200,200)
			
			local isToggled = config.IsOn or false
			local function updateVisuals() icon.Image = isToggled and config.OnImage or config.OffImage end
			
			btn.MouseEnter:Connect(function()
				TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundTransparency = 0.2}):Play()
				TweenService:Create(icon, TweenInfo.new(0.2), {ImageColor3 = Color3.new(1,1,1)}):Play()
				if activeTooltipTween then activeTooltipTween:Cancel() end
				if config.Name then
					task.spawn(function() tooltipLabel.Text = translate_878(config.Name, userLang_878) end)
					activeTooltipTween = TweenService:Create(tooltipFrame, tooltipTweenInfo, {BackgroundTransparency = 0.2})
					activeTooltipTween:Play()
					TweenService:Create(tooltipLabel, tooltipTweenInfo, {TextTransparency = 0}):Play()
				end
			end)
			
			btn.MouseLeave:Connect(function()
				TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
				TweenService:Create(icon, TweenInfo.new(0.2), {ImageColor3 = Color3.fromRGB(200,200,200)}):Play()
				if activeTooltipTween then activeTooltipTween:Cancel() end
				activeTooltipTween = TweenService:Create(tooltipFrame, tooltipTweenInfo, {BackgroundTransparency = 1})
				activeTooltipTween:Play()
				TweenService:Create(tooltipLabel, tooltipTweenInfo, {TextTransparency = 1}):Play()
			end)
			
			btn.Activated:Connect(function()
				if config.IsToggle then isToggled = not isToggled; updateVisuals() end
				if config.Callback then config.Callback(isToggled, icon) end
			end)
			
			updateVisuals()
			return btn
		end

		noclipDefaults_878 = {}; RunService.Stepped:Connect(function()
			local character = localPlayer_878.Character; if not character then return end
			local noclipEnabled = playerActionStates_878.noclip; local flingEnabled = playerActionStates_878.walkflinging
			for _, part in ipairs(character:GetDescendants()) do if part:IsA("BasePart") then
				if noclipDefaults_878[part] == nil then task.wait(); if not part or not part.Parent then return end; noclipDefaults_878[part] = part.CanCollide end
				if noclipEnabled or flingEnabled then part.CanCollide = false elseif noclipDefaults_878[part] ~= nil then part.CanCollide = noclipDefaults_878[part] end
			end end
		end)
		
		local function createESP(p)
			if p == localPlayer_878 then return end; local char = p.Character; if not char or not char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("ESP_Highlight") then return end
			local h = Instance.new("Highlight", char); h.Name = "ESP_Highlight"; h.FillColor = Color3.fromRGB(255, 255, 255); h.OutlineColor = Color3.fromRGB(255, 255, 255)
			h.FillTransparency = 0.8; h.OutlineTransparency = 0; h.Adornee = char; h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
		end
		local function removeESP(p) if p and p.Character then for _,v in ipairs(p.Character:GetChildren()) do if v.Name == "ESP_Highlight" then v:Destroy() end end end end
		Players.PlayerAdded:Connect(function(p) if playerActionStates_878.esp then p.CharacterAdded:Connect(function(char) task.wait(1); if char and char.Parent then createESP(p) end end); if p.Character then createESP(p) end end end)
		Players.PlayerRemoving:Connect(removeESP)
		
		flightSourceLoaded_878 = false; isFlightLoading_878 = false
		
		createActionButton({Name="Noclip", Color=Color3.fromRGB(22, 163, 74), IsToggle=true, OnImage="rbxassetid://9134787693", OffImage="rbxassetid://14385986465", Callback=function(val) playerActionStates_878.noclip = val end})
		local flightButton = createActionButton({Name="Fly", Color=Color3.fromRGB(220, 38, 38), IsToggle=true, OnImage="rbxassetid://9134755504", OffImage="rbxassetid://14385992605", Callback=function(val, icon)
			if isFlightLoading_878 then return end; if not flightSourceLoaded_878 then isFlightLoading_878 = true; local s, e = pcall(loadstring(game:HttpGet("https://raw.githubusercontent.com/VerbalHubz/scripts/refs/heads/main/fly"))); isFlightLoading_878 = false; if s then flightSourceLoaded_878 = true; if _G.ToggleFly then pcall(_G.ToggleFly) end end else if _G.ToggleFly then pcall(_G.ToggleFly) end end
		end})
		local flightButtonIcon = flightButton:FindFirstChildOfClass("ImageLabel")
		RunService.Heartbeat:Connect(function() if flightSourceLoaded_878 and _G.FlyState ~= nil and flightButtonIcon then local isFlyOn = _G.FlyState == true; local targetImage = isFlyOn and "rbxassetid://9134755504" or "rbxassetid://14385992605"; if flightButtonIcon.Image ~= targetImage then flightButtonIcon.Image = targetImage end end end)
		createActionButton({Name="Kill", Color=Color3.fromRGB(34, 197, 94), IsToggle=false, OnImage="rbxassetid://9134761478", OffImage="rbxassetid://9134761478", Callback=function(val, icon) if localPlayer_878.Character and localPlayer_878.Character:FindFirstChildOfClass("Humanoid") then localPlayer_878.Character:FindFirstChildOfClass("Humanoid").Health = 0 end; local spin = TweenService:Create(icon, TweenInfo.new(0.3), {Rotation = icon.Rotation + 360}); spin:Play() end})
		createActionButton({Name="Respawn", Color=Color3.fromRGB(59, 130, 246), IsToggle=false, OnImage="rbxassetid://9134762943", OffImage="rbxassetid://9134762943", Callback=function(val, icon) if localPlayer_878.Character then localPlayer_878.Character:BreakJoints() end; local spin = TweenService:Create(icon, TweenInfo.new(0.3), {Rotation = icon.Rotation + 360}); spin:Play() end})
		createActionButton({Name="Godmode", Color=Color3.fromRGB(168, 85, 247), IsToggle=true, OnImage="rbxassetid://9134765994", OffImage="rbxassetid://14386216487", Callback=function(val) playerActionStates_878.invulnerable = val; local h = localPlayer_878.Character and localPlayer_878.Character:FindFirstChildOfClass("Humanoid"); if h then h.MaxHealth = val and math.huge or 100; h.Health = h.MaxHealth end end})
		createActionButton({Name="Fling", Color=Color3.fromRGB(107, 33, 168), IsToggle=true, OnImage="rbxassetid://9134785384", OffImage="rbxassetid://14386226155", Callback=function(val)
			isWalkFlinging_878 = val; playerActionStates_878.walkflinging = val; local char = localPlayer_878.Character
			if char then for _, part in ipairs(char:GetDescendants()) do if part:IsA("BasePart") then part.Massless = val end end end
			if val then task.spawn(function() local movel = 0.1; while isWalkFlinging_878 do RunService.Heartbeat:Wait(); local character = localPlayer_878.Character; local root = character and getRoot_878(character); if not (root and root.Parent and isWalkFlinging_878) then break end; local vel = root.Velocity; root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0); RunService.RenderStepped:Wait(); if not (root and root.Parent and isWalkFlinging_878) then break end; root.Velocity = vel; RunService.Stepped:Wait(); if not (root and root.Parent and isWalkFlinging_878) then break end; root.Velocity = vel + Vector3.new(0, movel, 0); movel = movel * -1 end end)
			else if char then local root = getRoot_878(char); if root then root.Velocity = Vector3.new(0, 0, 0); root.Anchored = true; task.delay(1, function() if root and root.Parent then root.Anchored = false end end) end end end
		end})
		createActionButton({Name="ESP", Color=Color3.fromRGB(234, 179, 8), IsToggle=true, OnImage="rbxassetid://9134780101", OffImage="rbxassetid://14386232387", Callback=function(val) playerActionStates_878.esp = val; for _, p in ipairs(Players:GetPlayers()) do if val then createESP(p) else removeESP(p) end end end})
		createActionButton({Name="Day", Color=Color3.fromRGB(79, 70, 229), IsToggle=true, OnImage="rbxassetid://9134778004", OffImage="rbxassetid://10137794784", Callback=function(val) TweenService:Create(game.Lighting, TweenInfo.new(0.5), {ClockTime = val and 12 or 24}):Play() end})
		createActionButton({Name="Mute", Color=Color3.fromRGB(100, 116, 139), IsToggle=true, OnImage="rbxassetid://14386246782", OffImage="rbxassetid://9134774810", Callback=function(val) pcall(function() if val then oldVolumeBeforeMute_878 = SoundService.MasterVolume; SoundService.MasterVolume = 0 else SoundService.MasterVolume = oldVolumeBeforeMute_878 end end) end})
		createActionButton({Name="Invisibility", Color=Color3.fromRGB(20, 184, 166), IsToggle=true, OnImage="rbxassetid://14386256326", OffImage="rbxassetid://9134770786", Callback=function(val) local url = "https://raw.githubusercontent.com/VerbalHubz/scripts/refs/heads/main/invis2"; if not _G.ToggleInvisibility then pcall(loadstring(game:HttpGet(url))) end; if _G.ToggleInvisibility then pcall(_G.ToggleInvisibility) end end})
		createActionButton({Name="Anti-Fling", Color=Color3.fromRGB(236, 72, 153), IsToggle=true, OnImage="rbxassetid://113706656042034", OffImage="rbxassetid://102241658697200", Callback=function(val)
			if val then if antiflingConn_878 then antiflingConn_878:Disconnect() end; antiflingConn_878 = RunService.Stepped:Connect(function() for _, p in pairs(Players:GetPlayers()) do if p ~= localPlayer_878 and p.Character then for _, v in pairs(p.Character:GetDescendants()) do if v:IsA("BasePart") then v.Velocity=Vector3.zero; v.RotVelocity=Vector3.zero; v.CanCollide=false; v.Massless=true end end end end end)
			else if antiflingConn_878 then antiflingConn_878:Disconnect(); antiflingConn_878 = nil end end
		end})
		createActionButton({Name="Anti-Lag", Color=Color3.fromRGB(14, 165, 233), IsToggle=true, OnImage="rbxassetid://131030557308160", OffImage="rbxassetid://140577890662283", Callback=function(val)
			if not AntiLagModule_878 then loadAntiLagModule_878() end; if AntiLagModule_878 and AntiLagModule_878.toggle then pcall(AntiLagModule_878.toggle) end
		end})
		createActionButton({Name="RTX", Color=Color3.fromRGB(132, 204, 22), IsToggle=true, OnImage="rbxassetid://77840188181333", OffImage="rbxassetid://119416819821507", Callback=function(val)
			if not RTXModule_878 then loadRTXModule_878() end; if RTXModule_878 then if val then if RTXModule_878.applyRTXShaders then pcall(RTXModule_878.applyRTXShaders) end else if RTXModule_878.removeRTXShaders then pcall(RTXModule_878.removeRTXShaders) end end end
		end})
		
		local serverButtonsFrame = Instance.new("Frame", playerActionsContainer_878); serverButtonsFrame.LayoutOrder = 3; serverButtonsFrame.BackgroundTransparency = 1; serverButtonsFrame.Size = UDim2.new(1, 0, 0, 40)
		local sbfLayout = Instance.new("UIListLayout", serverButtonsFrame); sbfLayout.FillDirection = Enum.FillDirection.Horizontal; sbfLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; sbfLayout.VerticalAlignment = Enum.VerticalAlignment.Center; sbfLayout.Padding = UDim.new(0, 10)
		
		local function createServerButton(text, callback)
			local btn = Instance.new("TextButton", serverButtonsFrame); btn.Size = UDim2.new(0.5, -5, 1, 0); btn.BackgroundColor3 = Color3.fromRGB(45,45,55)
			setTextAsync_878(btn, text)
			btn.Font = Enum.Font.GothamBold; btn.TextSize = 14
			btn.TextColor3 = Color3.new(1,1,1)
			local corner = Instance.new("UICorner", btn); corner.CornerRadius = UDim.new(0, 8); btn.Activated:Connect(callback); return btn
		end

		createServerButton("Serverhop", function()
			local servers = {}; local s, r = pcall(function() return game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100") end)
			if s and r then for _,v in pairs(HttpService:JSONDecode(r).data) do if v.playing < v.maxPlayers and v.id ~= game.JobId then table.insert(servers,v.id) end end; if #servers > 0 then TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1,#servers)]) end end
		end)
		createServerButton("Rejoin", function() TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId) end)

		local isPAOpen = false
		playerActionsToggler_878.Activated:Connect(function()
			isPAOpen = not isPAOpen
			local height = paListLayout.AbsoluteContentSize.Y + paPadding.PaddingTop.Offset
			local targetSize = isPAOpen and UDim2.new(1,0,0,height) or UDim2.new(1,0,0,0)
			paArrow.Image = isPAOpen and icons.ArrowOpened or icons.ArrowClosed
			TweenService:Create(playerActionsContainer_878, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
		end)
		
		local leftPlayersToggler = Instance.new("TextButton", serverPlayersPage); leftPlayersToggler.LayoutOrder=998; leftPlayersToggler.Size=UDim2.new(1,0,0,40); leftPlayersToggler.BackgroundColor3=Color3.fromRGB(18,18,18); leftPlayersToggler.Text=""; local leftTogglerCorner=Instance.new("UICorner",leftPlayersToggler); leftTogglerCorner.CornerRadius=UDim.new(0,8)
		local leftIcon = Instance.new("ImageLabel", leftPlayersToggler); leftIcon.Size=UDim2.new(0,24,0,24); leftIcon.Position=UDim2.new(0,15,0.5,0); leftIcon.AnchorPoint=Vector2.new(0,0.5); leftIcon.Image=icons.PlayerLeft; leftIcon.BackgroundTransparency=1
		local leftTitle = Instance.new("TextLabel", leftPlayersToggler); leftTitle.Size=UDim2.new(0.5,0,1,0); leftTitle.Position=UDim2.new(0,50,0,0); setTextAsync_878(leftTitle, "Recently Left"); leftTitle.Font=Enum.Font.GothamBold; leftTitle.TextColor3=Color3.new(1,1,1); leftTitle.TextSize=16; leftTitle.BackgroundTransparency=1; leftTitle.TextXAlignment=Enum.TextXAlignment.Left
		local leftArrow = Instance.new("ImageLabel", leftPlayersToggler); leftArrow.Size=UDim2.new(0,24,0,24); leftArrow.Position=UDim2.new(1,-20,0.5,0); leftArrow.AnchorPoint=Vector2.new(0.5,0.5); leftArrow.Image=icons.ArrowClosed; leftArrow.BackgroundTransparency=1
		
		local leftPlayersContainer = Instance.new("Frame", serverPlayersPage); leftPlayersContainer.LayoutOrder = 999; leftPlayersContainer.Size=UDim2.new(1,0,0,0); leftPlayersContainer.BackgroundTransparency=1; leftPlayersContainer.ClipsDescendants=true
		local leftListLayout = Instance.new("UIListLayout", leftPlayersContainer); leftListLayout.Padding = UDim.new(0,5)
		local leftPadding = Instance.new("UIPadding", leftPlayersContainer); leftPadding.PaddingTop = UDim.new(0,10)
		
		local isLeftOpen = false
		leftPlayersToggler.Activated:Connect(function()
			isLeftOpen = not isLeftOpen
			local height = leftListLayout.AbsoluteContentSize.Y + leftPadding.PaddingTop.Offset
			local targetSize = isLeftOpen and UDim2.new(1,0,0,height) or UDim2.new(1,0,0,0)
			leftArrow.Image = isLeftOpen and icons.ArrowOpened or icons.ArrowClosed
			TweenService:Create(leftPlayersContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize}):Play()
		end)
		
		local function createLeftPlayerCard(playerInfo)
			local holder = Instance.new("Frame", leftPlayersContainer); holder.Name = playerInfo.Name; holder.Size = UDim2.new(1,0,0,70); holder.BackgroundColor3 = Color3.fromRGB(30,32,38); local hC = Instance.new("UICorner",holder); hC.CornerRadius = UDim.new(0,8)
			local t, iR = pcall(Players.GetUserThumbnailAsync, Players, playerInfo.UserId, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size48x48)
			local img = Instance.new("ImageLabel",holder); img.Size=UDim2.new(0,48,0,48); img.Position=UDim2.new(0,12,0.5,0); img.AnchorPoint=Vector2.new(0,0.5); img.Image = (t and iR) or ""; img.BackgroundTransparency=1; local iC = Instance.new("UICorner",img); iC.CornerRadius = UDim.new(1,0)
			local nameFrame = Instance.new("Frame", holder); nameFrame.BackgroundTransparency=1; nameFrame.Size=UDim2.new(1,-150,0, 40); nameFrame.Position=UDim2.new(0,70,0.5,0); nameFrame.AnchorPoint=Vector2.new(0,0.5)
			local nfLayout = Instance.new("UIListLayout", nameFrame); nfLayout.FillDirection=Enum.FillDirection.Vertical; nfLayout.VerticalAlignment=Enum.VerticalAlignment.Center; nfLayout.Padding = UDim.new(0,2)
			local displayName = Instance.new("TextLabel",nameFrame); displayName.Text=playerInfo.DisplayName; displayName.Font=Enum.Font.SourceSansBold; displayName.TextSize=18; displayName.TextColor3=Color3.new(1,1,1); displayName.TextXAlignment=Enum.TextXAlignment.Left; displayName.BackgroundTransparency=1; displayName.Size=UDim2.new(1,0,0.5,-2)
			local userName = Instance.new("TextLabel",nameFrame); userName.Text="@"..playerInfo.Name; userName.Font=Enum.Font.SourceSans; userName.TextSize=13; userName.TextColor3=Color3.fromRGB(180,180,180); userName.TextXAlignment=Enum.TextXAlignment.Left; userName.BackgroundTransparency=1; userName.Size=UDim2.new(1,0,0.5,-2)
			local statusIcon = Instance.new("ImageLabel", holder); statusIcon.Size=UDim2.new(0,24,0,24); statusIcon.Position=UDim2.new(1,-16,0.5,0); statusIcon.AnchorPoint=Vector2.new(1,0.5); statusIcon.Image = icons.PlayerLeft; statusIcon.BackgroundTransparency=1
			task.delay(180, function() if holder and holder.Parent then holder:Destroy() end end)
			return holder
		end
		
		local function updatePlayerList()
			if not serverPlayersPage or not serverPlayersPage.Parent then return end
			for _, p in ipairs(Players:GetPlayers()) do if p ~= localPlayer_878 and not serverPlayersPage:FindFirstChild(p.Name) then createPlayerCard(p, serverPlayersPage).LayoutOrder = 1 end end
			for _, card in ipairs(serverPlayersPage:GetChildren()) do if card:IsA("Frame") and card.LayoutOrder == 1 then if not Players:FindFirstChild(card.Name) then card:Destroy() end end end
		end

		updatePlayerList(); Players.PlayerAdded:Connect(updatePlayerList)
		Players.PlayerRemoving:Connect(function(leavingPlayer) createLeftPlayerCard({UserId = leavingPlayer.UserId, Name = leavingPlayer.Name, DisplayName = leavingPlayer.DisplayName}); task.wait(0.1); updatePlayerList() end)

		local friendsListContainer = Instance.new("ScrollingFrame", friendsPage); friendsListContainer.Size = UDim2.new(1, 0, 1, -55); friendsListContainer.Position = UDim2.new(0, 0, 0, 0); friendsListContainer.BackgroundTransparency = 1; friendsListContainer.BorderSizePixel = 0
		local friendsListLayout = Instance.new("UIListLayout", friendsListContainer); friendsListLayout.Padding = UDim.new(0, 10); friendsListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
		local listPadding = Instance.new("UIPadding", friendsListContainer); listPadding.PaddingTop = UDim.new(0,15); listPadding.PaddingLeft = UDim.new(0,15); listPadding.PaddingRight = UDim.new(0,15)
		local paginationFrame = Instance.new("Frame", friendsPage); paginationFrame.Size = UDim2.new(1, -30, 0, 30); paginationFrame.Position = UDim2.new(0.5, 0, 1, -15); paginationFrame.AnchorPoint = Vector2.new(0.5, 1); paginationFrame.BackgroundTransparency = 1
		local prevButton = Instance.new("TextButton", paginationFrame); prevButton.Size = UDim2.new(0.5, -5, 1, 0); setTextAsync_878(prevButton, "< Previous"); prevButton.Font = Enum.Font.GothamSemibold; prevButton.TextSize = 14; prevButton.BackgroundColor3 = Color3.fromRGB(45, 45, 55); local prevCorner = Instance.new("UICorner", prevButton); prevCorner.CornerRadius = UDim.new(0, 6)
		local nextButton = Instance.new("TextButton", paginationFrame); nextButton.Size = UDim2.new(0.5, -5, 1, 0); nextButton.Position = UDim2.new(0.5, 5, 0, 0); setTextAsync_878(nextButton, "Next >"); nextButton.Font = Enum.Font.GothamSemibold; nextButton.TextSize = 14; nextButton.BackgroundColor3 = Color3.fromRGB(45, 45, 55); local nextCorner = Instance.new("UICorner", nextButton); nextCorner.CornerRadius = UDim.new(0, 6)
		local allFriendsData,currentPage,friendsPerPage={},1,5
		
		local function createFriendCard(friendData)
			local holder=Instance.new("Frame",friendsListContainer); holder.Size=UDim2.new(1,0,0,80); holder.BackgroundColor3=Color3.fromRGB(30,32,38); holder.ClipsDescendants=true; local hC=Instance.new("UICorner",holder); hC.CornerRadius=UDim.new(0,8)
			local gradient=Instance.new("UIGradient",holder); gradient.Rotation=315; gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 80)), ColorSequenceKeypoint.new(1, Color3.fromRGB(170, 0, 255))})
			local t,iR=pcall(Players.GetUserThumbnailAsync, Players, friendData.id,Enum.ThumbnailType.AvatarThumbnail,Enum.ThumbnailSize.Size48x48)
			local img=Instance.new("ImageLabel",holder); img.Size=UDim2.new(0,48,0,48); img.Position=UDim2.new(0,12,0.5,0); img.AnchorPoint=Vector2.new(0,0.5); img.Image = t and iR or ""; img.BackgroundTransparency=1; local iC = Instance.new("UICorner",img); iC.CornerRadius = UDim.new(1,0)
			local nameFrame = Instance.new("Frame", holder); nameFrame.BackgroundTransparency = 1; nameFrame.Size=UDim2.new(0,200,0,20); nameFrame.Position=UDim2.new(0,70,0.5,-18); nameFrame.AnchorPoint=Vector2.new(0,0.5)
			local nfLayout = Instance.new("UIListLayout", nameFrame); nfLayout.FillDirection=Enum.FillDirection.Horizontal; nfLayout.VerticalAlignment=Enum.VerticalAlignment.Center; nfLayout.Padding = UDim.new(0,6)
			local statusDot = Instance.new("Frame", nameFrame); statusDot.Size = UDim2.new(0,8,0,8); local dC = Instance.new("UICorner", statusDot); dC.CornerRadius = UDim.new(1,0)
			local nameL=Instance.new("TextLabel",nameFrame); nameL.Text=friendData.displayName; nameL.Font=Enum.Font.SourceSansBold; nameL.TextSize=18; nameL.TextColor3=Color3.new(1,1,1); nameL.TextXAlignment=Enum.TextXAlignment.Left; nameL.BackgroundTransparency=1; nameL.Size = UDim2.new(1, -14, 1, 0)
			local statusL=Instance.new("TextLabel",holder); statusL.Size=UDim2.new(1,-80,0,30); statusL.Position=UDim2.new(0,70,0.5,8); statusL.AnchorPoint=Vector2.new(0,0.5); statusL.Font=Enum.Font.SourceSans; statusL.TextSize=13; statusL.TextColor3=Color3.fromRGB(215,215,225); statusL.TextXAlignment=Enum.TextXAlignment.Left; statusL.TextYAlignment=Enum.TextYAlignment.Top; statusL.BackgroundTransparency=1; statusL.RichText=true
			local p=friendData.presence; local g="<font color='#d7d7e1'>"; local inGameStr, inStudioStr, onlineStr, offlineStr = translate_878("IN GAME", userLang_878), translate_878("IN STUDIO", userLang_878), translate_878("ONLINE", userLang_878), translate_878("OFFLINE", userLang_878); if p then if p.userPresenceType==2 then statusDot.BackgroundColor3=Color3.fromRGB(255,70,70); statusL.Text=string.format("<b>%s</b>\n%s%s",inGameStr,g,p.lastLocation) elseif p.userPresenceType==3 then statusDot.BackgroundColor3=Color3.fromRGB(255,165,0); statusL.Text=string.format("<b>%s</b>\n%s%s",inStudioStr,g,p.lastLocation) elseif p.userPresenceType==1 then statusDot.BackgroundColor3=Color3.fromRGB(70,255,70); statusL.Text=string.format("<b>%s</b>\n%s%s",onlineStr,g,translate_878("On Website", userLang_878)) else statusDot.BackgroundColor3=Color3.fromRGB(120,120,120); statusL.Text=string.format("<b>%s</b>",offlineStr) end else statusDot.BackgroundColor3=Color3.fromRGB(120,120,120); statusL.Text=string.format("<b>%s</b>",offlineStr) end
		end
		local function updatePaginationButtons() prevButton.AutoButtonColor=currentPage>1; prevButton.TextColor3=currentPage>1 and Color3.new(1,1,1)or Color3.fromRGB(120,120,120); nextButton.AutoButtonColor=currentPage*friendsPerPage<#allFriendsData; nextButton.TextColor3=currentPage*friendsPerPage<#allFriendsData and Color3.new(1,1,1)or Color3.fromRGB(120,120,120)end
		local function displayFriendsPage() for _,v in ipairs(friendsListContainer:GetChildren())do if v:IsA("Frame")then v:Destroy()end end; local s,e=(currentPage-1)*friendsPerPage+1,math.min(currentPage*friendsPerPage,#allFriendsData); if #allFriendsData>0 then for i=s,e do createFriendCard(allFriendsData[i])end else local nF=Instance.new("TextLabel",friendsListContainer); nF.Size=UDim2.new(1,0,0,50); setTextAsync_878(nF, "No friends found to display."); nF.Font=Enum.Font.Gotham; nF.TextColor3=Color3.fromRGB(150,150,150); nF.BackgroundTransparency=1 end; friendsListContainer.CanvasSize=UDim2.new(0,0,0,friendsListLayout.AbsoluteContentSize.Y+20); updatePaginationButtons()end
		nextButton.Activated:Connect(function()if nextButton.AutoButtonColor then currentPage=currentPage+1;displayFriendsPage()end end); prevButton.Activated:Connect(function()if prevButton.AutoButtonColor then currentPage=currentPage-1;displayFriendsPage()end end)
		task.spawn(function() local f,p="https://friends.roblox.com/v1/users/"..localPlayer_878.UserId.."/friends","https://presence.roblox.com/v1/users/presences"; local s,r=pcall(function()return HttpService:JSONDecode(game:HttpGet(f,true))end); if s and r and r.data then allFriendsData=r.data; local u={}; for _,fr in ipairs(allFriendsData)do table.insert(u,fr.id)end; if #u>0 then local ps,pr=pcall(function()return HttpService:JSONDecode(HttpService:PostAsync(p,HttpService:JSONEncode({userIds=u}),Enum.HttpContentType.ApplicationJson,true))end); if ps and pr and pr.userPresences then local pm={}; for _,pd in ipairs(pr.userPresences)do pm[pd.userId]=pd end; for _,fr in ipairs(allFriendsData)do fr.presence=pm[fr.id]end end end end; displayFriendsPage()end)
		
		aiBubble_878 = Instance.new("Frame")
		aiBubble_878.Size = UDim2.new(0, 280, 0, 320)
		aiBubble_878.Position = UDim2.new(1, -295, 0, 15)
		aiBubble_878.BackgroundColor3 = Color3.fromRGB(35, 25, 30)
		aiBubble_878.BorderSizePixel = 0
		aiBubble_878.ClipsDescendants = true
		aiBubble_878.Active = true
		aiBubble_878.Parent = Container
		local mainCorner = Instance.new("UICorner", aiBubble_878); mainCorner.CornerRadius = UDim.new(0, 8)
		local mainStroke = Instance.new("UIStroke", aiBubble_878); mainStroke.Color = Color3.fromRGB(180, 40, 90); mainStroke.Thickness = 2
		
		local mainLayout = Instance.new("UIListLayout", aiBubble_878)
		mainLayout.SortOrder = Enum.SortOrder.LayoutOrder

		topBar_878 = Instance.new("Frame", aiBubble_878)
		topBar_878.LayoutOrder = 1
		topBar_878.Size = UDim2.new(1, 0, 0, 25)
		topBar_878.BackgroundColor3 = Color3.fromRGB(25, 15, 20)
		topBar_878.BorderSizePixel = 0
		
		titleLabel_878 = Instance.new("TextLabel", topBar_878)
		titleLabel_878.Size = UDim2.new(1, -55, 1, 0)
		titleLabel_878.Position = UDim2.new(0, 10, 0, 0)
		titleLabel_878.BackgroundTransparency = 1
		titleLabel_878.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel_878.Font = Enum.Font.GothamBold
		titleLabel_878.TextSize = 12
		titleLabel_878.TextXAlignment = Enum.TextXAlignment.Left
		titleLabel_878.Text = "VERBAL HUB AI"
		
		local function makeAIMoveable()
			local dragging = false
			local dragStart, startPos = nil, nil
			topBar_878.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging, dragStart, startPos = true, input.Position, aiBubble_878.Position
				end
			end)
			UserInputService.InputChanged:Connect(function(input)
				if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
					local delta = input.Position - dragStart
					aiBubble_878.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
				end
			end)
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = false
				end
			end)
		end
		makeAIMoveable()

		local topBarButtons = Instance.new("Frame", topBar_878)
		topBarButtons.Size = UDim2.new(0, 50, 1, 0)
		topBarButtons.Position = UDim2.new(1, -5, 0, 0)
		topBarButtons.AnchorPoint = Vector2.new(1, 0)
		topBarButtons.BackgroundTransparency = 1
		local topBarButtonsLayout = Instance.new("UIListLayout", topBarButtons)
		topBarButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
		topBarButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		topBarButtonsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		topBarButtonsLayout.Padding = UDim.new(0, 5)

		aiToggleBtn_878 = Instance.new("ImageButton", topBarButtons)
		aiToggleBtn_878.Size = UDim2.new(0, 20, 0, 20)
		aiToggleBtn_878.BackgroundTransparency = 1
		aiToggleBtn_878.Image = icons.ArrowOpened

		local closeAIBtn_878 = Instance.new("TextButton", topBarButtons)
		closeAIBtn_878.Size = UDim2.new(0, 20, 0, 20)
		closeAIBtn_878.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
		closeAIBtn_878.BackgroundTransparency = 0.5
		closeAIBtn_878.Font = Enum.Font.GothamBold
		closeAIBtn_878.Text = "X"
		closeAIBtn_878.TextSize = 12
		closeAIBtn_878.TextColor3 = Color3.new(1, 1, 1)
		local closeAICorner = Instance.new("UICorner", closeAIBtn_878)
		closeAICorner.CornerRadius = UDim.new(0, 4)

		closeAIBtn_878.MouseEnter:Connect(function() TweenService:Create(closeAIBtn_878, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play() end)
		closeAIBtn_878.MouseLeave:Connect(function() TweenService:Create(closeAIBtn_878, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play() end)
		closeAIBtn_878.Activated:Connect(function()
			aiBubble_878.Visible = false
		end)

		isAIOpen_878 = true
		aiToggleBtn_878.Activated:Connect(function()
			isAIOpen_878 = not isAIOpen_878
			aiToggleBtn_878.Image = isAIOpen_878 and icons.ArrowOpened or icons.ArrowClosed
			local targetSize = isAIOpen_878 and UDim2.new(0, 280, 0, 320) or UDim2.new(0, 280, 0, 25)
			tabContainer_878.Visible = isAIOpen_878
			aiBodyContainer_878.Visible = isAIOpen_878
			controlsContainer_878.Visible = isAIOpen_878
			TweenService:Create(aiBubble_878, TweenInfo.new(0.2), {Size = targetSize}):Play()
		end)

		tabContainer_878 = Instance.new("Frame", aiBubble_878)
		tabContainer_878.LayoutOrder = 2
		tabContainer_878.Size = UDim2.new(1, -10, 0, 35)
		tabContainer_878.Position = UDim2.new(0.5, 0, 0, 0)
		tabContainer_878.AnchorPoint = Vector2.new(0.5, 0)
		tabContainer_878.BackgroundColor3 = Color3.fromRGB(30, 20, 25)
		tabContainer_878.BorderSizePixel = 0
		local tabContainerCorner = Instance.new("UICorner", tabContainer_878)
		tabContainerCorner.CornerRadius = UDim.new(0.5, 0)

		tabScrollFrame_878 = Instance.new("ScrollingFrame", tabContainer_878)
		tabScrollFrame_878.Size = UDim2.new(1, -35, 1, 0)
		tabScrollFrame_878.Position = UDim2.new(0, 5, 0, 0)
		tabScrollFrame_878.BackgroundTransparency = 1
		tabScrollFrame_878.BorderSizePixel = 0
		tabScrollFrame_878.ScrollBarThickness = 2
		tabScrollFrame_878.ScrollingDirection = Enum.ScrollingDirection.X
		local tabLayout_878 = Instance.new("UIListLayout", tabScrollFrame_878)
		tabLayout_878.FillDirection = Enum.FillDirection.Horizontal
		tabLayout_878.VerticalAlignment = Enum.VerticalAlignment.Center
		tabLayout_878.Padding = UDim.new(0, 5)
		
		tabLayout_878:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			tabScrollFrame_878.CanvasSize = UDim2.new(0, tabLayout_878.AbsoluteContentSize.X, 0, 0)
		end)

		addTabButton_878 = Instance.new("TextButton", tabContainer_878)
		addTabButton_878.Size = UDim2.new(0, 26, 0, 26)
		addTabButton_878.Position = UDim2.new(1, -5, 0.5, 0)
		addTabButton_878.AnchorPoint = Vector2.new(1, 0.5)
		addTabButton_878.Font = Enum.Font.GothamBold; addTabButton_878.Text = "+"; addTabButton_878.TextSize = 20
		addTabButton_878.TextColor3 = Color3.fromRGB(200, 200, 200); addTabButton_878.BackgroundColor3 = Color3.fromRGB(50, 40, 45)
		local addTabCorner = Instance.new("UICorner", addTabButton_878); addTabCorner.CornerRadius = UDim.new(0, 6)
		
		aiBodyContainer_878 = Instance.new("Frame", aiBubble_878)
		aiBodyContainer_878.LayoutOrder = 3
		aiBodyContainer_878.Size = UDim2.new(1, 0, 1, -170)
		aiBodyContainer_878.BackgroundTransparency = 1
		local bodyPadding = Instance.new("UIPadding", aiBodyContainer_878)
		bodyPadding.PaddingLeft = UDim.new(0, 5); bodyPadding.PaddingRight = UDim.new(0, 5)
		
		aiScrollFrame_878 = Instance.new("ScrollingFrame", aiBodyContainer_878)
		aiScrollFrame_878.Size = UDim2.new(1, 0, 1, 0)
		aiScrollFrame_878.BackgroundTransparency = 1; aiScrollFrame_878.BorderSizePixel = 0
		aiScrollFrame_878.ScrollBarThickness = 3; aiScrollFrame_878.ScrollBarImageColor3 = Color3.fromRGB(180, 40, 90)
		
		aiMessageLabel_878 = Instance.new("TextLabel", aiScrollFrame_878)
		aiMessageLabel_878.Size = UDim2.new(1, -10, 0, 0)
		aiMessageLabel_878.Position = UDim2.new(0, 5, 0, 5)
		aiMessageLabel_878.AutomaticSize = Enum.AutomaticSize.Y
		aiMessageLabel_878.BackgroundTransparency = 1
		aiMessageLabel_878.TextColor3 = Color3.fromRGB(220, 220, 220)
		aiMessageLabel_878.Font = Enum.Font.Gotham; aiMessageLabel_878.TextSize = 12
		aiMessageLabel_878.TextWrapped = true; aiMessageLabel_878.TextYAlignment = Enum.TextYAlignment.Top
		aiMessageLabel_878.TextXAlignment = Enum.TextXAlignment.Left; aiMessageLabel_878.RichText = true
		
		controlsContainer_878 = Instance.new("Frame", aiBubble_878)
		controlsContainer_878.LayoutOrder = 4
		controlsContainer_878.Size = UDim2.new(1, 0, 0, 110)
		controlsContainer_878.BackgroundTransparency = 1
		local controlsLayout = Instance.new("UIListLayout", controlsContainer_878)
		controlsLayout.Padding = UDim.new(0, 5)
		controlsLayout.SortOrder = Enum.SortOrder.LayoutOrder
		local controlsPadding = Instance.new("UIPadding", controlsContainer_878)
		controlsPadding.PaddingLeft = UDim.new(0, 5); controlsPadding.PaddingRight = UDim.new(0, 5); controlsPadding.PaddingBottom = UDim.new(0, 5)

		inputFrame_878 = Instance.new("Frame", controlsContainer_878)
		inputFrame_878.LayoutOrder = 1
		inputFrame_878.Size = UDim2.new(1, 0, 0, 30)
		inputFrame_878.BackgroundTransparency = 1

		aiTextBox_878 = Instance.new("TextBox", inputFrame_878)
		aiTextBox_878.Size = UDim2.new(1, -65, 1, 0)
		aiTextBox_878.BackgroundColor3 = Color3.fromRGB(45, 45, 65)
		aiTextBox_878.Font = Enum.Font.Gotham; aiTextBox_878.TextSize = 11
		aiTextBox_878.PlaceholderText = "Ask AI..."; aiTextBox_878.TextColor3 = Color3.fromRGB(220, 220, 220)
		local aiTxtCorner = Instance.new("UICorner", aiTextBox_878); aiTxtCorner.CornerRadius = UDim.new(0, 6)
		local aiTxtPad = Instance.new("UIPadding", aiTextBox_878); aiTxtPad.PaddingLeft=UDim.new(0,6)
		
		aiSendButton_878 = Instance.new("TextButton", inputFrame_878)
		aiSendButton_878.Size = UDim2.new(0, 60, 1, 0)
		aiSendButton_878.Position = UDim2.new(1, 0, 0, 0)
		aiSendButton_878.AnchorPoint = Vector2.new(1, 0)
		aiSendButton_878.BackgroundColor3 = Color3.fromRGB(180, 40, 90)
		aiSendButton_878.Font = Enum.Font.GothamBold; aiSendButton_878.TextSize = 12; aiSendButton_878.Text = "Ask"
		local aiSendCorner = Instance.new("UICorner", aiSendButton_878); aiSendCorner.CornerRadius = UDim.new(0, 6)

		buttonFrame_878 = Instance.new("Frame", controlsContainer_878)
		buttonFrame_878.LayoutOrder = 2
		buttonFrame_878.Size = UDim2.new(1, 0, 1, -35)
		buttonFrame_878.BackgroundTransparency = 1
		local buttonGridLayout = Instance.new("UIGridLayout", buttonFrame_878)
		buttonGridLayout.CellSize = UDim2.new(0.25, -4, 0.5, -3)
		buttonGridLayout.CellPadding = UDim2.new(0, 5, 0, 5)
		
		typingSound_878 = Instance.new("Sound", workspace)
		typingSound_878.SoundId = "rbxassetid://115037290162561"
		typingSound_878.Volume = 1; typingSound_878.PlaybackSpeed = 1.35
		
		aiTextBox_878:GetPropertyChangedSignal("Text"):Connect(function()
			typingSound_878:Stop(); typingSound_878:Play(); task.delay(0.05, function() if typingSound_878.IsPlaying then typingSound_878:Stop() end end)
		end)

		sendSound_878 = Instance.new("Sound", workspace)
		sendSound_878.SoundId = "rbxassetid://87437544236708"; sendSound_878.Volume = 1

		API_URL_878 = "https://openrouter.ai/api/v1/chat/completions"
		API_KEY_878 = "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"
		AI_MODEL_878 = "google/gemma-2-9b-it:free"
		chatTabs_878 = {}
		activeTabIndex_878 = 1
		autoResponseTimer_878 = 0
		
		autoResponseApis_878 = {
			{ name = "Facts", url = "https://uselessfacts.jsph.pl/random.json?language=en", parse = function(d) return d and d.text end },
			{ name = "Advice", url = "https://api.adviceslip.com/advice", parse = function(d) return d and d.slip and d.slip.advice end },
			{ name = "Jokes", url = "https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=single", parse = function(d) return d and d.joke end },
			{ name = "Lyrics", url = "https://api.quotable.io/random", parse = function(d) return d and d.content and (d.content .. " - " .. d.author) end }
		}
		
		aiMessageLabel_878:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
			aiScrollFrame_878.CanvasSize = UDim2.new(0, 0, 0, aiMessageLabel_878.AbsoluteSize.Y + 10)
		end)
		
		local renderActiveTab_878
		function removeSystemMessages_878(messages)
			for i = #messages, 1, -1 do
				if messages[i].role == "system" then
					table.remove(messages, i)
				end
			end
		end

		function showTemporaryMessage_878(text, role)
			local activeMessages = chatTabs_878[activeTabIndex_878].messages
			removeSystemMessages_878(activeMessages)
			table.insert(activeMessages, { role = role or "system", content = text })
			renderActiveTab_878()
			if role ~= "user" then
				task.spawn(function()
					for i = 1, 3 do
						task.wait(0.4)
						if activeMessages and #activeMessages > 0 and activeMessages[#activeMessages] and activeMessages[#activeMessages].role == "system" then
							activeMessages[#activeMessages].content = activeMessages[#activeMessages].content .. "."
							renderActiveTab_878()
						else break end
					end
				end)
			end
		end
		
		function getRandomApiResponse_878(apiInfo)
			local success, response = pcall(function() return game:HttpGet(apiInfo.url, true) end)
			if success then
				local s, data = pcall(HttpService.JSONDecode, HttpService, response)
				if s and data then
					local result = apiInfo.parse(data)
					if result then
						local prefix = apiInfo.name .. ": "
						return prefix .. result
					end
				end
			end
			return "API Error - Verbal Hub still working!"
		end
		
		function renderActiveTab_878()
			if not chatTabs_878[activeTabIndex_878] then aiMessageLabel_878.Text = "" return end
			local messages = chatTabs_878[activeTabIndex_878].messages
			local fullText = ""
			for _, msg in ipairs(messages) do
				local prefix = ""
				if msg.role == "user" then prefix = "<b>You:</b> "
				elseif msg.role == "assistant" then prefix = "<b>AI:</b> "
				elseif msg.role == "auto" then prefix = "<b>"
				elseif msg.role == "system" then prefix = "<i><font color='#94a3b8'>" end
				local suffix = ""
				if msg.role == "auto" then suffix = "</b>" end
				if msg.role == "system" then suffix = "</font></i>" end
				fullText = fullText .. prefix .. msg.content .. suffix .. "\n\n"
			end
			aiMessageLabel_878.Text = fullText:gsub("\n\n$", "")
			task.wait()
			aiScrollFrame_878.CanvasPosition = Vector2.new(0, aiScrollFrame_878.CanvasSize.Y.Offset)
		end
		
		local rebuildTabButtons_878
		function switchTab_878(indexToSwitch)
			activeTabIndex_878 = indexToSwitch
			rebuildTabButtons_878()
			renderActiveTab_878()
		end

		function removeTab_878(indexToRemove)
			table.remove(chatTabs_878, indexToRemove)
			if #chatTabs_878 == 0 then
				table.insert(chatTabs_878, { name = "Chat 1", messages = { {role = "assistant", content = "Welcome to Verbal Hub AI!"} } })
				activeTabIndex_878 = 1
			elseif activeTabIndex_878 > indexToRemove then
				activeTabIndex_878 = activeTabIndex_878 - 1
			elseif activeTabIndex_878 == indexToRemove then
				activeTabIndex_878 = math.max(1, indexToRemove - 1)
			end
			rebuildTabButtons_878()
			renderActiveTab_878()
		end

		function createTabButton_878(tabData, index)
			local tabButton = Instance.new("TextButton")
			tabButton.Name = "Tab_" .. index; tabButton.AutomaticSize = Enum.AutomaticSize.X
			tabButton.Size = UDim2.new(0, 0, 0, 24); tabButton.Font = Enum.Font.Gotham; tabButton.TextSize = 11
			tabButton.Text = " " .. tabData.name .. " "; tabButton.Parent = tabScrollFrame_878; tabButton.AutoButtonColor = false
			local corner = Instance.new("UICorner", tabButton); corner.CornerRadius = UDim.new(0, 4)
			
			local closeButton = Instance.new("TextButton", tabButton)
			closeButton.Size = UDim2.new(0, 16, 0, 16); closeButton.Position = UDim2.new(1, -5, 0.5, 0)
			closeButton.AnchorPoint = Vector2.new(1, 0.5); closeButton.Font = Enum.Font.GothamBold; closeButton.Text = "X"; closeButton.TextSize = 11
			closeButton.TextColor3 = Color3.fromRGB(200, 200, 200); closeButton.BackgroundTransparency = 1; closeButton.ZIndex = 3
			
			local defaultColor = Color3.fromRGB(200, 200, 200)
			local hoverColor = Color3.fromRGB(255, 80, 80)
			closeButton.MouseEnter:Connect(function() closeButton.TextColor3 = hoverColor end)
			closeButton.MouseLeave:Connect(function() closeButton.TextColor3 = defaultColor end)

			local indicatorLine = Instance.new("Frame", tabButton)
			indicatorLine.Size = UDim2.new(1, 0, 0, 2); indicatorLine.Position = UDim2.new(0, 0, 1, 0)
			indicatorLine.BackgroundColor3 = Color3.fromRGB(180, 40, 90); indicatorLine.BorderSizePixel = 0; indicatorLine.ZIndex = 2
			
			if index == activeTabIndex_878 then
				tabButton.BackgroundColor3 = Color3.fromRGB(50, 40, 45); tabButton.TextColor3 = Color3.fromRGB(255, 255, 255); indicatorLine.Visible = true
			else
				tabButton.BackgroundColor3 = Color3.fromRGB(30, 20, 25); tabButton.TextColor3 = Color3.fromRGB(150, 150, 150); indicatorLine.Visible = false
			end

			closeButton.Activated:Connect(function() removeTab_878(index) end)
			tabButton.Activated:Connect(function() switchTab_878(index) end)
		end

		function rebuildTabButtons_878()
			for _, v in ipairs(tabScrollFrame_878:GetChildren()) do
				if v:IsA("TextButton") then v:Destroy() end
			end
			for i, tabData in ipairs(chatTabs_878) do createTabButton_878(tabData, i) end
		end

		function showAddTabPrompt_878()
			local promptBG = Instance.new("Frame", aiBubble_878)
			promptBG.Name = "AddTabPrompt"; promptBG.Size = UDim2.fromScale(1, 1); promptBG.BackgroundTransparency = 1; promptBG.ZIndex = 9

			local mainFrame = Instance.new("Frame", promptBG)
			mainFrame.Size = UDim2.new(0, 220, 0, 100); mainFrame.Position = UDim2.fromScale(0.5, 0.5)
			mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.BackgroundColor3 = Color3.fromRGB(42, 33, 38)
			local mfCorner = Instance.new("UICorner", mainFrame); mfCorner.CornerRadius = UDim.new(0, 8)
			local mfStroke = Instance.new("UIStroke", mainFrame); mfStroke.Color = Color3.fromRGB(180, 40, 90)

			local title = Instance.new("TextLabel", mainFrame)
			title.Size = UDim2.new(1, 0, 0, 30); title.Text = "Create New Tab"; title.Font = Enum.Font.GothamBold; title.TextSize = 14; title.TextColor3 = Color3.new(1,1,1); title.BackgroundTransparency = 1

			local nameBox = Instance.new("TextBox", mainFrame)
			nameBox.Size = UDim2.new(1, -20, 0, 28); nameBox.Position = UDim2.fromScale(0.5, 0.45); nameBox.AnchorPoint = Vector2.new(0.5, 0.5)
			nameBox.BackgroundColor3 = Color3.fromRGB(30, 20, 25); nameBox.Font = Enum.Font.Gotham; nameBox.TextSize = 12; nameBox.TextColor3 = Color3.new(1,1,1)
			nameBox.PlaceholderText = "Enter name..."; nameBox.ClearTextOnFocus = false
			local nbCorner = Instance.new("UICorner", nameBox); nbCorner.CornerRadius = UDim.new(0, 6)
			local nbStroke = Instance.new("UIStroke", nameBox); nbStroke.Color = Color3.fromRGB(80, 70, 75)

			local buttonFrame = Instance.new("Frame", mainFrame)
			buttonFrame.Size = UDim2.new(1, -20, 0, 25); buttonFrame.Position = UDim2.new(0.5, 0, 1, -10)
			buttonFrame.AnchorPoint = Vector2.new(0.5, 1); buttonFrame.BackgroundTransparency = 1
			local bfLayout = Instance.new("UIListLayout", buttonFrame)
			bfLayout.FillDirection = Enum.FillDirection.Horizontal; bfLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; bfLayout.Padding = UDim.new(0, 10)

			local addButton = Instance.new("TextButton", buttonFrame)
			addButton.Size = UDim2.new(0.5, -5, 1, 0); addButton.Text = "Add"; addButton.Font = Enum.Font.GothamBold; addButton.TextSize = 12
			addButton.BackgroundColor3 = Color3.fromRGB(180, 40, 90); local addCorner = Instance.new("UICorner", addButton); addCorner.CornerRadius = UDim.new(0, 6)
			
			local cancelButton = Instance.new("TextButton", buttonFrame)
			cancelButton.Size = UDim2.new(0.5, -5, 1, 0); cancelButton.Text = "Cancel"; cancelButton.Font = Enum.Font.Gotham; cancelButton.TextSize = 12
			cancelButton.BackgroundColor3 = Color3.fromRGB(80, 80, 90); local cancelCorner = Instance.new("UICorner", cancelButton); cancelCorner.CornerRadius = UDim.new(0, 6)
			
			addButton.Activated:Connect(function()
				local name = nameBox.Text:match("^%s*(.-)%s*$")
				if name and #name > 0 then
					table.insert(chatTabs_878, { name = name, messages = { {role = "assistant", content = "New chat started!"} } })
					switchTab_878(#chatTabs_878); promptBG:Destroy()
				end
			end)
			cancelButton.Activated:Connect(function() promptBG:Destroy() end)
		end
		
		addTabButton_878.Activated:Connect(showAddTabPrompt_878)
		
		function askAI_878(prompt)
			if aiSendButton_878.Text ~= "Ask" then return end
			aiSendButton_878.Text = "..."
			local activeMessages = chatTabs_878[activeTabIndex_878].messages
			removeSystemMessages_878(activeMessages)
			table.insert(activeMessages, { role = "user", content = prompt })
			showTemporaryMessage_878("AI thinking...")
			
			task.spawn(function()
				local responseText; local messagesForAPI = {}
				
				local system_prompt = [[
You are a dual-mode AI assistant inside a Roblox game. You must first determine the user's intent.

1.  **COMMAND INTENT**: If the user's request is a command to be executed (e.g., "fly", "speed 100", "spin me", "kill me", "bring player X"), generate ONLY the necessary and complete Roblox Lua script to perform that action.
    - The script MUST be enclosed in a Lua markdown block (```lua ... ```).
    - Do NOT add any other text, explanation, or conversation outside the code block.
    - Ensure the script is functional and self-contained. For temporary effects like "spin", make the script automatically stop after a few seconds.

2.  **CONVERSATIONAL INTENT**: If the user's request is a general question, a request for information (like "what is 1+1?", "what time is it?"), or a simple conversational statement, you MUST respond naturally as a helpful assistant.
    - Do NOT generate any code in this case. Just provide a text-based answer.

Analyze the prompt and choose one of the two modes.
]]
				table.insert(messagesForAPI, {role = "system", content = system_prompt})

				for _, msg in ipairs(activeMessages) do
					if msg.role == "user" or msg.role == "assistant" then table.insert(messagesForAPI, {role = msg.role, content = msg.content}) end
				end
				
				local success, result = pcall(HttpRequest_878, { Url = API_URL_878, Method = "POST", Headers = {["Content-Type"] = "application/json", ["Authorization"] = "Bearer " .. API_KEY_878, ["HTTP-Referer"] = "https://roblox.com", ["X-Title"] = "Verbal Hub AI"}, Body = HttpService:JSONEncode({ model = AI_MODEL_878, messages = messagesForAPI, max_tokens = 800, temperature = 0.7 }) })
				if success and result and result.Body then
					local decodeSuccess, data = pcall(HttpService.JSONDecode, HttpService, result.Body)
					if decodeSuccess and data and data.choices and #data.choices > 0 and data.choices[1].message then
						responseText = data.choices[1].message.content
					else responseText = "AI service unavailable." end
				else responseText = "Connection failed." end
				
				removeSystemMessages_878(activeMessages)
				
				local script_code = responseText:match("```lua\n(.-)\n```")
				
				if script_code then
					showTemporaryMessage_878("Code block detected. Executing...", "system")
					local func, err = loadstring(script_code)
					if func then
						local success, err_msg = pcall(func)
						if not success then
							table.insert(activeMessages, { role = "assistant", content = "Execution failed: " .. tostring(err_msg) })
						else
							table.insert(activeMessages, { role = "assistant", content = "Command executed." })
						end
					else
						table.insert(activeMessages, { role = "assistant", content = "Failed to compile script: " .. tostring(err) })
					end
				else
					table.insert(activeMessages, { role = "assistant", content = responseText })
				end
				
				renderActiveTab_878(); aiSendButton_878.Text = "Ask"
			end)
		end
		
		function sendAIMessage_878()
			local prompt = aiTextBox_878.Text:match("^%s*(.-)%s*$")
			if prompt and #prompt > 0 and aiSendButton_878.Text == "Ask" then
				sendSound_878:Play(); aiTextBox_878.Text = ""; askAI_878(prompt)
			end
		end
		
		aiSendButton_878.Activated:Connect(sendAIMessage_878)
		aiTextBox_878.FocusLost:Connect(function(enter) if enter then sendAIMessage_878() end end)

		function createActionButton_878(text, callback)
			local btn = Instance.new("TextButton", buttonFrame_878)
			btn.BackgroundColor3 = Color3.fromRGB(55, 35, 45); btn.TextColor3 = Color3.fromRGB(220, 220, 220); btn.Font = Enum.Font.GothamBold; btn.TextSize = 10; btn.Text = text
			local corner = Instance.new("UICorner", btn); corner.CornerRadius = UDim.new(0, 6)
			btn.Activated:Connect(callback)
		end
		
		for _, api in ipairs(autoResponseApis_878) do
			createActionButton_878(api.name, function()
				showTemporaryMessage_878("Loading " .. api.name:lower() .. "...")
				task.spawn(function()
					local response = getRandomApiResponse_878(api)
					local activeMessages = chatTabs_878[activeTabIndex_878].messages
					removeSystemMessages_878(activeMessages)
					table.insert(activeMessages, { role = "auto", content = response, timestamp = os.time(), id = HttpService:GenerateGUID() })
					renderActiveTab_878()
				end)
			end)
		end
		createActionButton_878("Copy", function() if setclipboard then pcall(setclipboard, aiMessageLabel_878.Text) showTemporaryMessage_878("Copied to clipboard.") task.delay(2, function() if chatTabs_878[activeTabIndex_878] then removeSystemMessages_878(chatTabs_878[activeTabIndex_878].messages); renderActiveTab_878() end end) end end)
		createActionButton_878("Clear", function()
			if chatTabs_878[activeTabIndex_878] then
				chatTabs_878[activeTabIndex_878].messages = {}
				showTemporaryMessage_878("Chat cleared.")
				task.delay(2, function() if chatTabs_878[activeTabIndex_878] then removeSystemMessages_878(chatTabs_878[activeTabIndex_878].messages); renderActiveTab_878() end end)
			end
		end)
		
		table.insert(chatTabs_878, { name = "Chat 1", messages = { {role = "assistant", content = "Verbal Hub AI active! Auto-responses every minute."} } })
		rebuildTabButtons_878()
		renderActiveTab_878()
		
		RunService.Heartbeat:Connect(function(dt)
			autoResponseTimer_878 = autoResponseTimer_878 + dt
			if autoResponseTimer_878 >= 60 then
				autoResponseTimer_878 = 0
				task.spawn(function()
					local randomAPI = autoResponseApis_878[math.random(1, #autoResponseApis_878)]
					local responseText = getRandomApiResponse_878(randomAPI)
					if chatTabs_878[activeTabIndex_878] then
						table.insert(chatTabs_878[activeTabIndex_878].messages, { role = "auto", content = responseText, timestamp = os.time(), id = HttpService:GenerateGUID() })
						renderActiveTab_878()
					end
				end)
			end

			local needsRender = false
			for tabIndex, tabData in ipairs(chatTabs_878) do
				for i = #tabData.messages, 1, -1 do
					local message = tabData.messages[i]
					if message and message.role == "auto" and os.time() - (message.timestamp or 0) > 60 then
						table.remove(tabData.messages, i)
						if tabIndex == activeTabIndex_878 then needsRender = true end
					end
				end
			end
			if needsRender then renderActiveTab_878() end
		end)
	end
	
	local sideTabInfo = { Button = TabButton, Container = Container, ParentTopTab = parentTopTab }
	table.insert(parentTopTab.SideTabs, sideTabInfo)
	table.insert(AllSideTabObjects, sideTabInfo)
	if activeTopTabObject == parentTopTab then
		TabButton.Visible = true
		if #parentTopTab.SideTabs == 1 then SelectSideTab(sideTabInfo) else Container.Visible = false end
	else TabButton.Visible = false; Container.Visible = false end
	AddConnection(TabButton.Activated, function() SelectSideTab(sideTabInfo) end)
	local Elements = GetElements(Container)
	if TabConfig.PremiumOnly then
		for i, v in next, Elements do Elements[i] = function() end end
		if Container:FindFirstChild("UIListLayout") then pcall(function() Container:FindFirstChild("UIListLayout"):Destroy() end) end
		if Container:FindFirstChild("UIPadding") then pcall(function() Container:FindFirstChild("UIPadding"):Destroy() end) end
		if Container:FindFirstChild("EmptyState") then pcall(function() Container:FindFirstChild("EmptyState"):Destroy() end) end
		SetChildren(SetProps(MakeElement("TFrame"), { Size = UDim2.new(1, 0, 1, 0), Parent = Container }), {
			AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), { Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 15, 0, 15), ImageTransparency = 0.4 }), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "Unauthorised Access", 14), { Size = UDim2.new(1, -38, 0, 14), Position = UDim2.new(0, 38, 0, 18), TextTransparency = 0.4 }), "Text"),
			AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345875"), { Size = UDim2.new(0, 56, 0, 56), Position = UDim2.new(0.5, -28, 0.5, -60), AnchorPoint = Vector2.new(0.5, 0.5) }), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "Premium Feature", 16), { Size = UDim2.new(1, 0, 0, 20), Position = UDim2.new(0.5, 0, 0.5, -5), AnchorPoint = Vector2.new(0.5, 0.5), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "This feature is only available for Sirius Premium users. You can purchase premium in our Discord server.", 12), { Size = UDim2.new(1, -40, 0, 40), Position = UDim2.new(0.5, 0, 0.5, 30), AnchorPoint = Vector2.new(0.5, 0.5), TextWrapped = true, TextTransparency = 0.4, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
		})
	end
	return Elements
end
	function TabFunction:AddScriptHub(HubConfig)
		HubConfig = HubConfig or {}
		HubConfig.Name = HubConfig.Name or "Script Hub"
		
		local TopButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(0, 0, 1, -4), AutomaticSize = Enum.AutomaticSize.X, Parent = TopTabHolder, BackgroundTransparency = 1,
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"), MakeElement("Corner", 0, 5),
			Create("UIPadding", {PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8)}),
			AddThemeObject(SetProps(MakeElement("Label", HubConfig.Name, 14), {
				Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamSemibold, Name = "Title"
			}), "TextDark")
		}), "Second")

		MakeShineOnHover(TopButton, TopButton.Title)

		local hubContainer = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
			Size = UDim2.new(1, -150, 1, -85), Position = UDim2.new(0, 150, 0, 85), Parent = MainWindow, Visible = false, Name = "ScriptHubContainer"
		}), { MakeElement("List", 0, 8), MakeElement("Padding", 15, 10, 10, 15) }), "Divider")
		
		local hubTabInfo = { Button = TopButton, Name = HubConfig.Name, SideTabs = {}, IsMultiTab = false, Container = hubContainer }
		table.insert(AllTopTabObjects, hubTabInfo)
		currentTopTabForCreation = hubTabInfo
		AddConnection(TopButton.MouseButton1Click, function() SelectTopTab(hubTabInfo) end)
		if not activeTopTabObject then SelectTopTab(AllTopTabObjects[1]) end

		AddConnection(hubContainer.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			if hubContainer and hubContainer.UIListLayout then
				hubContainer.CanvasSize = UDim2.new(0, 0, 0, hubContainer.UIListLayout.AbsoluteContentSize.Y + 30)
			end
		end)

		local currentPage, totalPages = 1, 1
		local currentQuery = ""
		local isLoading = false

		local searchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
			Size = UDim2.new(1, 0, 0, 32), Parent = hubContainer
		}),{ AddThemeObject(MakeElement("Stroke"), "Stroke") }), "Main")

		local searchBox = AddThemeObject(Create("TextBox", {
			Size = UDim2.new(1, -38, 1, 0), Position = UDim2.new(0, 38, 0, 0), BackgroundTransparency = 1,
			Font = Enum.Font.GothamSemibold, TextSize = 14, PlaceholderText = "Search ScriptBlox...", Text = ""
		}), "Text")
		searchBox.Parent = searchBar
		SetChildren(searchBox, {MakeElement("Padding", 0, 8, 0, 0)})
		
		local searchIcon = AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://6075757398"), {
			Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(0, 10, 0.5, 0), AnchorPoint = Vector2.new(0, 0.5)
		}), "Text")
		searchIcon.Parent = searchBar

		local resultsFrame = Create("Frame", {
			Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, BackgroundTransparency = 1, Parent = hubContainer
		}, { MakeElement("List", 0, 8) })

		local paginationFrame = Create("Frame", {
			Size = UDim2.new(1, 0, 0, 30), BackgroundTransparency = 1, Parent = hubContainer
		}, { Create("UIListLayout", { FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Center, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0,10)}) })

		local prevButton = AddThemeObject(Create("TextButton", { Size=UDim2.new(0,80,1,0), Text="", AutoButtonColor=false }), "Second")
		SetChildren(prevButton, { AddThemeObject(SetProps(MakeElement("Label", "Previous", 14), {Size=UDim2.fromScale(1,1), Font=Enum.Font.GothamBold}),"Text"), MakeElement("Corner",0,4), AddThemeObject(MakeElement("Stroke"),"Stroke") })
		prevButton.Parent = paginationFrame
		
		local pageLabel = AddThemeObject(SetProps(MakeElement("Label", "Page 1 / 1", 14), {Size=UDim2.new(0,100,1,0), Font=Enum.Font.GothamBold}), "Text")
		pageLabel.Parent = paginationFrame
		
		local nextButton = AddThemeObject(Create("TextButton", { Size=UDim2.new(0,80,1,0), Text="", AutoButtonColor=false }), "Second")
		SetChildren(nextButton, { AddThemeObject(SetProps(MakeElement("Label", "Next", 14), {Size=UDim2.fromScale(1,1), Font=Enum.Font.GothamBold}),"Text"), MakeElement("Corner",0,4), AddThemeObject(MakeElement("Stroke"),"Stroke") })
		nextButton.Parent = paginationFrame
		
		local function clearResults()
			for _, child in ipairs(resultsFrame:GetChildren()) do
				if child:IsA("GuiObject") then child:Destroy() end
			end
		end

		local function truncateText(text, maxWords)
			local words = {}
			for word in text:gmatch("%S+") do table.insert(words, word) end
			if #words > maxWords then
				return table.concat(words, " ", 1, maxWords) .. "...", true
			end
			return text, false
		end
		
		local function containsSuspiciousCode(script)
			local suspiciousKeywords = {
				"getgenv", "getrenv", "getfenv", "setfenv",
				"loadstring", "require", "PostAsync", "GetAsync",
				"RequestAsync", "webhook", "discord", "http",
				"dump", "steal", "token", "logger"
			}
			local lowerScript = script:lower()
			for _, keyword in ipairs(suspiciousKeywords) do
				if lowerScript:find(keyword, 1, true) then return true end
			end
			return false
		end
		
		local function createExecutorWarning(onConfirm)
			local container = Create("Frame", {Size = UDim2.new(1, 0, 1, 0),BackgroundColor3 = Color3.new(),BackgroundTransparency = 0.5,ZIndex = Orion.DisplayOrder + 10,Parent = Orion})
			local frame = Create("Frame", {Size = UDim2.new(0, 420, 0, 220),Position = UDim2.new(0.5, 0, 0.5, 0),AnchorPoint = Vector2.new(0.5, 0.5),BackgroundColor3=OrionLib.Themes.Default.Second, Parent = container})
			Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = frame })
			AddThemeObject(Create("UIStroke", { Thickness = 2 }), "Stroke").Parent = frame
			local title = AddThemeObject(Create("TextLabel", {Text = "<b>Security Warning</b>",Font = Enum.Font.GothamBold,TextSize = 18,RichText = true,Size = UDim2.new(1, -20, 0, 40),Position=UDim2.new(0.5,0,0,0),AnchorPoint=Vector2.new(0.5,0),BackgroundTransparency = 1,Parent = frame}),"Text")
			local body = AddThemeObject(Create("TextLabel", {Text = "This script contains functions that could be malicious (e.g., `require`, `getfenv`, `loadstring`). Please review the code before executing.",Font = Enum.Font.Gotham,TextSize = 16,TextColor3 = OrionLib.Themes.Default.TextDark,LineHeight = 1.1,TextWrapped = true,Size = UDim2.new(1, -40, 0, 120),Position = UDim2.new(0.5, 0, 0.5, 0),AnchorPoint = Vector2.new(0.5, 0.5),BackgroundTransparency = 1,Parent = frame}),"TextDark")
			local buttonHolder = Create("Frame", {Size = UDim2.new(1, 0, 0, 40),Position = UDim2.new(0, 0, 1, -40),BackgroundTransparency = 1,Parent = frame})
			Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal,HorizontalAlignment = Enum.HorizontalAlignment.Right,VerticalAlignment = Enum.VerticalAlignment.Center,Padding = UDim.new(0, 10),Parent = buttonHolder})
			Create("UIPadding", { PaddingRight = UDim.new(0, 15), Parent = buttonHolder })
			
			local function destroyPrompt() container:Destroy() end
			
			local cancelButton = AddThemeObject(Create("TextButton", {Text = "Cancel", Font = Enum.Font.GothamBold, TextColor3 = OrionLib.Themes.Default.Text, TextSize = 15, Size = UDim2.new(0, 120, 0, 32), AutoButtonColor = false, Parent = buttonHolder}), "Second")
			Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = cancelButton }); AddThemeObject(Create("UIStroke", { Thickness = 1 }), "Stroke").Parent = cancelButton
			cancelButton.MouseButton1Click:Connect(destroyPrompt)
			
			local confirmButton = AddThemeObject(Create("TextButton", {Text = "<b>Execute Anyway</b>", Font = Enum.Font.GothamBold, RichText = true, TextColor3 = Color3.fromRGB(255,255,255), TextSize = 15, Size = UDim2.new(0, 150, 0, 32), AutoButtonColor = false, Parent = buttonHolder}),"Main")
			confirmButton.BackgroundColor3 = Color3.fromRGB(200, 40, 40)
			Create("UICorner", { CornerRadius = UDim.new(0, 6), Parent = confirmButton }); AddThemeObject(Create("UIStroke", { Thickness = 1.5, Color = Color3.fromRGB(255, 80, 80) }), "Stroke").Parent = confirmButton
			confirmButton.MouseButton1Click:Connect(function() destroyPrompt(); onConfirm() end)
		end

		local function createScriptEntry(scriptData)
			local scriptContent, fullDescription
			local isDescriptionExpanded = false

			local entryFrame = AddThemeObject(Create("Frame", {
				Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = resultsFrame, BackgroundTransparency = 1
			}), "Second")
			SetChildren(entryFrame, {MakeElement("List", 0, 8), MakeElement("Padding", 8,8,8,8), AddThemeObject(MakeElement("Stroke"), "Stroke"), MakeElement("Corner",0,6)})
			entryFrame.Parent = resultsFrame

			local headerFrame = SetChildren(Create("Frame", {Size=UDim2.new(1,0,0,80), BackgroundTransparency=1, Parent=entryFrame}), {Create("UIListLayout", {FillDirection=Enum.FillDirection.Horizontal, VerticalAlignment=Enum.VerticalAlignment.Center, Padding=UDim.new(0,8)})})

			local scriptImage = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
				Size = UDim2.new(0, 100, 1, 0), ClipsDescendants=true
			}), {AddThemeObject(MakeElement("Stroke"), "Stroke")}),"Main")
			local imageLabel = Create("ImageLabel", {Size=UDim2.fromScale(1,1), BackgroundTransparency=1, Image="rbxassetid://10411342089", Parent=scriptImage})
			scriptImage.Parent = headerFrame

			local titleFrame = SetChildren(Create("Frame",{Size=UDim2.new(1,-116,1,0), BackgroundTransparency=1,Parent=headerFrame}), {MakeElement("List",0,2)})
			local title = AddThemeObject(SetProps(MakeElement("Label", scriptData.title, 16), {Size=UDim2.new(1,0,0,18), Font=Enum.Font.GothamBold, TextWrapped=true, AutomaticSize=Enum.AutomaticSize.Y}),"Text")
			title.Parent = titleFrame
			local author = AddThemeObject(SetProps(MakeElement("Label", "by...", 12), {Size=UDim2.new(1,0,0,14), Font=Enum.Font.Gotham}),"TextDark")
			author.Parent = titleFrame
			local gameName = AddThemeObject(SetProps(MakeElement("Label", scriptData.game.name, 12), {Size=UDim2.new(1,0,0,14), Font=Enum.Font.GothamSemibold}),"Text")
			gameName.Parent = titleFrame

			local description = AddThemeObject(SetProps(MakeElement("Label", "Loading description...", 13), {
				Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true, TextXAlignment=Enum.TextXAlignment.Left,
			}), "TextDark")
			description.Parent = entryFrame
			
			local readMoreButton = AddThemeObject(SetProps(MakeElement("Label", "Read More", 13), {
				Visible=false, Size=UDim2.new(0,100,0,15), Font=Enum.Font.GothamBold
			}), "Text")
			readMoreButton.TextColor3 = OrionLib.Themes.Default.Bloom
			readMoreButton.Parent = entryFrame
			local readMoreClick = Create("TextButton", {Size=UDim2.fromScale(1,1), BackgroundTransparency=1, Text="", Parent=readMoreButton})

			AddConnection(readMoreClick.MouseButton1Click, function()
				isDescriptionExpanded = not isDescriptionExpanded
				if isDescriptionExpanded then
					description.Text = fullDescription
					readMoreButton.Text = "Read Less"
				else
					description.Text, _ = truncateText(fullDescription, 25)
					readMoreButton.Text = "Read More"
				end
			end)
			
			local statsBar = SetChildren(Create("Frame", {Size=UDim2.new(1,0,0,20), BackgroundTransparency=1, Parent=entryFrame}), {Create("UIListLayout",{FillDirection=Enum.FillDirection.Horizontal, Padding=UDim.new(0,10)})})
			local function createStat(iconId, text)
				local statFrame = SetChildren(Create("Frame",{Size=UDim2.new(0,0,1,0), AutomaticSize=Enum.AutomaticSize.X, BackgroundTransparency=1}),{Create("UIListLayout",{FillDirection=Enum.FillDirection.Horizontal, VerticalAlignment=Enum.VerticalAlignment.Center, Padding=UDim.new(0,4)})})
				local icon = AddThemeObject(SetProps(MakeElement("Image", iconId), {Size=UDim2.new(0,14,0,14)}),"TextDark")
				icon.Parent = statFrame
				local label = AddThemeObject(SetProps(MakeElement("Label", text, 12),{Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X, Font=Enum.Font.GothamBold}),"TextDark")
				label.Parent = statFrame
				return statFrame, label
			end
			local viewsStat, viewsLabel = createStat("rbxassetid://7723993893", "...")
			viewsStat.Parent = statsBar
			local likesStat, likesLabel = createStat("rbxassetid://10489694483", "...")
			likesStat.Parent = statsBar
			local dislikesStat, dislikesLabel = createStat("rbxassetid://10489694982", "...")
			dislikesStat.Parent = statsBar

			local buttonContainer = SetChildren(Create("Frame", {
				Size = UDim2.new(1, 0, 0, 30), BackgroundTransparency = 1, Parent=entryFrame
			}), { Create("UIListLayout", {FillDirection=Enum.FillDirection.Horizontal, HorizontalAlignment=Enum.HorizontalAlignment.Center, Padding=UDim.new(0,8)}) })

			local copyBtn = AddThemeObject(Create("TextButton", {Size=UDim2.new(0,120,1,0), Text="", AutoButtonColor=false}, {MakeElement("Corner",0,5),AddThemeObject(MakeElement("Stroke"),"Stroke"), AddThemeObject(SetProps(MakeElement("Label","Copy Script",14),{Size=UDim2.fromScale(1,1),Font=Enum.Font.GothamBold}),"Text")}), "Main")
			copyBtn.Parent = buttonContainer
			local execBtn = AddThemeObject(Create("TextButton", {Size=UDim2.new(0,120,1,0), Text="", AutoButtonColor=false}, {MakeElement("Corner",0,5),AddThemeObject(MakeElement("Stroke"),"Stroke"), AddThemeObject(SetProps(MakeElement("Label","Execute",14),{Size=UDim2.fromScale(1,1),Font=Enum.Font.GothamBold}),"Text")}), "Main")
			execBtn.Parent = buttonContainer

			AddConnection(copyBtn.MouseButton1Click, function()
				if scriptContent and setclipboard then setclipboard(scriptContent); OrionLib:MakeNotification({ Name = "Script Hub", Content = "Copied script to clipboard!" }) end
			end)
			
			AddConnection(execBtn.MouseButton1Click, function()
				if scriptContent and loadstring then
					local function proceed()
						OrionLib:MakeNotification({ Name = "Script Hub", Content = "Executing script..." })
						local success, err = pcall(loadstring(scriptContent)); if not success then warn("OrionLib Script Hub Error:", err); OrionLib:MakeNotification({ Name = "Execution Error", Content = tostring(err)}) end
					end
					if containsSuspiciousCode(scriptContent) then createExecutorWarning(proceed) else proceed() end
				end
			end)

			task.spawn(function()
				local success, data = pcall(function() return HttpService:JSONDecode(game:HttpGetAsync("https://scriptblox.com/api/script/" .. scriptData.slug)) end)
				if success and data and data.script then
					local details = data.script
					scriptContent = details.script
					fullDescription = details.features or "No description provided."
					local isTruncated
					description.Text, isTruncated = truncateText(fullDescription, 25)
					readMoreButton.Visible = isTruncated
					author.Text = "by " .. (details.owner.username or "Unknown")
					imageLabel.Image = details.game.imageUrl or "rbxassetid://10411342089"
					viewsLabel.Text = tostring(details.views or 0)
					likesLabel.Text = tostring(details.likeCount or 0)
					dislikesLabel.Text = tostring(details.dislikeCount or 0)
				else
					description.Text = "Failed to load script details."
				end
			end)
		end

		local function updatePaginationControls()
			pageLabel.Text = "Page " .. tostring(currentPage) .. " / " .. tostring(totalPages)
			prevButton.Active = (currentPage > 1)
			prevButton.UIStroke.Transparency = (currentPage > 1) and 0 or 0.5
			nextButton.Active = (currentPage < totalPages)
			nextButton.UIStroke.Transparency = (currentPage < totalPages) and 0 or 0.5
		end

		local function fetchAndUpdate(url)
			isLoading = true
			clearResults()
			local loadingLabel = AddThemeObject(SetProps(MakeElement("Label", "Loading...", 16),{Size=UDim2.new(1,0,0,30), TextXAlignment=Enum.TextXAlignment.Center, Parent=resultsFrame}), "Text")
			
			task.spawn(function()
				local success, data = pcall(function() return HttpService:JSONDecode(game:HttpGetAsync(url)) end)
				if loadingLabel and loadingLabel.Parent then loadingLabel:Destroy() end

				if success and data and data.result and data.result.scripts then
					totalPages = data.result.totalPages or 1
					if #data.result.scripts > 0 then
						for _, scriptData in ipairs(data.result.scripts) do createScriptEntry(scriptData) end
					else
					end
				else
					AddThemeObject(SetProps(MakeElement("Label", "Error fetching scripts.", 16),{Size=UDim2.new(1,0,0,30), TextXAlignment=Enum.TextXAlignment.Center, Parent=resultsFrame}), "TextDark")
					warn("ScriptBlox API Error: ", data)
				end

				isLoading = false
				updatePaginationControls()
			end)
		end

		local function performSearch(page)
			if isLoading then return end
			currentQuery = searchBox.Text
			currentPage = page
			local url = "https://scriptblox.com/api/script/search?q=" .. HttpService:UrlEncode(currentQuery) .. "&max=10&page=" .. tostring(page)
			fetchAndUpdate(url)
		end
		
		local function fetchHomePage(page)
			if isLoading then return end
			currentQuery = ""
			currentPage = page
			local url = "https://scriptblox.com/api/script/fetch?page=" .. tostring(page) .. "&max=10"
			fetchAndUpdate(url)
		end

		AddConnection(searchBox.FocusLost, function(enterPressed) if enterPressed then performSearch(1) end end)
		
		AddConnection(prevButton.MouseButton1Click, function()
			if isLoading or currentPage <= 1 then return end
			if currentQuery == "" then fetchHomePage(currentPage - 1) else performSearch(currentPage - 1) end
		end)
		
		AddConnection(nextButton.MouseButton1Click, function()
			if isLoading or currentPage >= totalPages then return end
			if currentQuery == "" then fetchHomePage(currentPage + 1) else performSearch(currentPage + 1) end
		end)
		
		fetchHomePage(1)
		return {}
	end

	return TabFunction
end

function OrionLib:Destroy()
	if Orion and Orion.Parent then pcall(function() Orion:Destroy() end) end
end

return OrionLib
